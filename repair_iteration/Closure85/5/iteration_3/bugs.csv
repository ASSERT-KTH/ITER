bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    >=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	74	None	replace
2	[BUG]  [BUGGY]  if(outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    >=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	74	None	replace
3	[BUG]  [BUGGY]  Node  first  =  outEdges.getFirstChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  outEdges.getFirstChild();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  outEdges.getFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
4	[BUG]  [BUGGY]  Node  first  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  node.getFirstChild();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  node.getFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
5	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  n.removeFirstChild();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  n.removeFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
6	[BUG]  [BUGGY]  if(outEdges.size()  >=  1)  {  if(outEdges.size()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >=  1)  {  if(outEdges.size()  >=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >=    1)    {    if(outEdges.size()  >=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
7	[BUG]  [BUGGY]  if(outEdges.size()  >=  1)  {  if(outEdges.size()  >>  1)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >=  1)  {  if(outEdges.size()  >>  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >=    1)    {    if(outEdges.size()  >>  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
8	[BUG]  [BUGGY]  if(outEdges.size()  >=  1)  {  if(outEdges.size()!=  1)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >=  1)  {  if(outEdges.size()!=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >=    1)    {    if(outEdges.size()!=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
9	[BUG]  [BUGGY]  if(outEdges.size()  >=  1)  {  if(outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >=  1)  {  if(outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >=    1)    {    if(outEdges.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
10	[BUG]  [BUGGY]  if(outEdges.size()  >=  1)  {  If(outEdges.size()  >=  1)  {  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >=  1)  {  If(outEdges.size()  >=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >=    1)    {    If(outEdges.size()  >=  1)  {	  	non-compiled	[CE]  ';'  expected	81	None	add
11	[BUG]  [BUGGY]  if(outEdges.size()  >=  1)  {  if(outEdges.size()  [Delete]  1)  {  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >=  1)  {  if(outEdges.size()  [Delete]  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >=    1)    {    if(outEdges.size()  [Delete]  1)  {	  	non-compiled	[CE]  ')'  expected	81	None	add
12	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  ==  1  ||  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  RuntimeException  	76	3	replace
13	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  RuntimeException  	76	3	replace
14	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()!=  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  ==  1  &&  (n.getNext()!=  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  RuntimeException  	76	10	replace
15	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()!=  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()!=  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  &&  (n.getNext()!=  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  RuntimeException  	76	10	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()!=  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  AssertionFailedError  	76	7	replace
17	[BUG]  [BUGGY]  if(outEdges.size()!=  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  AssertionFailedError  	76	7	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  >  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  AssertionFailedError  	76	7	replace
19	[BUG]  [BUGGY]  if(outEdges.size()  >  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  AssertionFailedError  	76	7	replace
20	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()!=  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()!=  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  RuntimeException  	76	4	replace
21	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()!=  Token.FUNCTION))  {  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()!=  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()!=  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  RuntimeException  	76	4	replace
22	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getFirst()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getFirst()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  &&  (n.getFirst()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
23	[BUG]  [BUGGY]  Node  first  =  outEdges.getNext();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  outEdges.getNext();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  outEdges.getNext();	  Node    first    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
24	[BUG]  [BUGGY]  Node  first  =  n.getPrevious();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  n.getPrevious();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  n.getPrevious();	  Node    first    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
25	[BUG]  [BUGGY]  Node  first  =  n.getNext()  +  1;  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  n.getNext()  +  1;  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  n.getNext()  +  1;	  Node    first    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
26	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	54	None	replace
27	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	54	None	replace
28	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	54	None	replace
29	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	54	None	replace
30	[BUG]  [BUGGY]  If(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  If(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	If(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	54	None	replace
31	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    ||    outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	53	None	replace
32	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    ||    outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	53	None	replace
33	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    OutEdges.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
34	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    OutEdges.getOutEdges();    	non-compiled	[CE]  not  a  statement	67	None	replace
35	[BUG]  [BUGGY]  outEdges  =  OutEdges.getOutEdges();  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  outEdges  =  OutEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	outEdges  =  OutEdges.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    OutEdges.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
36	[BUG]  [BUGGY]  OutEdges  outEdges  =  outEdges.getOutEdges();  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  OutEdges  outEdges  =  outEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	OutEdges  outEdges  =  outEdges.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    OutEdges.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
37	[BUG]  [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    OutEdges.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
38	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  }  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  }  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  }	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    OutEdges.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
39	[BUG]  [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    OutEdges.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
40	[BUG]  [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getOutEdges();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getOutEdges();	  Deque    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
41	[BUG]  [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getOutEdges();  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Deque  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getOutEdges();	  Deque    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  >  expected	78	None	replace
42	[BUG]  [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDeadExprStatements();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDeadExprStatements();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDeadExprStatements();	  Deque    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
43	[BUG]  [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getOutEdges();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getOutEdges();	  Deque    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
44	[BUG]  [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nNode.getOutEdges();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nNode.getOutEdges();	  Deque    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
45	[BUG]  [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getOutEdges();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getOutEdges();	  Deque    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
46	[BUG]  [BUGGY]  Node  first  =  node.getNext();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  node.getNext();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  node.getNext();	  Node    first    =    gNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
47	[BUG]  [BUGGY]  Node  first  =  nNode.getNext();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  nNode.getNext();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  nNode.getNext();	  Node    first    =    gNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
48	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getNext();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  nextCfgNode.getNext();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  nextCfgNode.getNext();	  Node    first    =    gNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
49	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null    ||    outEdges.size()    ==    1)    {    if(outEdges!=  null  ||  outEdges.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
50	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  if(outEdges  ==  null  ||  outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  if(outEdges  ==  null  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null    ||    outEdges.size()    ==    1)    {    if(outEdges  ==  null  ||  outEdges.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
51	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  if(outEdges!=  null  ||  outEdges.size()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  if(outEdges!=  null  ||  outEdges.size()  ==  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null    ||    outEdges.size()    ==    1)    {    if(outEdges!=  null  ||  outEdges.size()  ==  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
52	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  if(outEdges!=  null  ||  outEdges.size()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  if(outEdges!=  null  ||  outEdges.size()  >=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null    ||    outEdges.size()    ==    1)    {    if(outEdges!=  null  ||  outEdges.size()  >=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
53	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  if(outEdges  >=  null  ||  outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  if(outEdges  >=  null  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null    ||    outEdges.size()    ==    1)    {    if(outEdges  >=  null  ||  outEdges.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
54	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  If(outEdges!=  null  ||  outEdges.size()  ==  1)  {  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  If(outEdges!=  null  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null    ||    outEdges.size()    ==    1)    {    If(outEdges!=  null  ||  outEdges.size()  ==  1)  {	  	non-compiled	[CE]  ';'  expected	36	None	add
55	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	22	None	replace
56	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	22	None	replace
57	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	22	None	replace
58	[BUG]  [BUGGY]  if(outEdges.size()!=  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	22	None	replace
59	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	22	None	replace
60	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	22	None	replace
61	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null    &&    outEdges.size()    ==    1)    {    if(outEdges!=  null  &&  outEdges.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
62	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  if(outEdges  ==  null  &&  outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  if(outEdges  ==  null  &&  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null    &&    outEdges.size()    ==    1)    {    if(outEdges  ==  null  &&  outEdges.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
63	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  if(outEdges!=  null  &&  outEdges.size()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  if(outEdges!=  null  &&  outEdges.size()  ==  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null    &&    outEdges.size()    ==    1)    {    if(outEdges!=  null  &&  outEdges.size()  ==  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
64	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  if(outEdges  >=  null  &&  outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  if(outEdges  >=  null  &&  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null    &&    outEdges.size()    ==    1)    {    if(outEdges  >=  null  &&  outEdges.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
65	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  if(outEdges!=  null  &&  outEdges.size()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  if(outEdges!=  null  &&  outEdges.size()  >=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null    &&    outEdges.size()    ==    1)    {    if(outEdges!=  null  &&  outEdges.size()  >=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
66	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  If(outEdges!=  null  &&  outEdges.size()  ==  1)  {  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  If(outEdges!=  null  &&  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null    &&    outEdges.size()    ==    1)    {    If(outEdges!=  null  &&  outEdges.size()  ==  1)  {	  	non-compiled	[CE]  ';'  expected	55	None	add
67	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    2    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	69	None	replace
68	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    2    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	69	None	replace
69	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    2    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	69	None	replace
70	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    2    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	69	None	replace
71	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()!=  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()!=  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()!=  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    2    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	69	None	replace
72	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FU  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FU  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FU	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    2    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	69	None	replace
73	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
74	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
75	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
76	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
77	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
78	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
79	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  not  a  statement	63	None	replace
80	[BUG]  [BUGGY]  outEdges  =  gNode.getOutEdges();  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  outEdges  =  gNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	outEdges  =  gNode.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
81	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();  [CE]  >  expected  [FE]            RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  >  expected	63	None	replace
82	[BUG]  [BUGGY]  OutEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  OutEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	OutEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  not  a  statement	63	None	replace
83	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  gNode.getOutEdges();  [CE]  ']'  expected  [FE]                RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  gNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  gNode.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  ']'  expected	63	None	replace
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  &&  outEdges.size()  >  1)  {	  if(outEdges.size()    >    1)    {    	compilable	  [FE]  AssertionFailedError  	35	7	replace
85	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1)  {	  if(outEdges.size()    >    1)    {    	compilable	  [FE]  AssertionFailedError  	35	7	replace
86	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  ||  outEdges.size()  >  1)  {	  if(outEdges.size()    >    1)    {    	compilable	  [FE]  RuntimeException  	35	3	replace
87	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  >  1)  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  >  1)  {	  if(outEdges.size()    >    1)    {    	compilable	  [FE]  RuntimeException  	35	3	replace
88	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges    ==    null    ||    outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	10	None	replace
89	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges    ==    null    ||    outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	10	None	replace
90	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  >=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  >=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  >=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges    ==    null    ||    outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	10	None	replace
91	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges    ==    null    ||    outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	10	None	replace
92	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges    ==    null    ||    outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	10	None	replace
93	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(removeNoOpStatements)  {  if(outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(removeNoOpStatements)  {  if(outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
94	[BUG]  [BUGGY]  if(outEdges!=  null)  {  if(outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  if(outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null)  {  if(outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
95	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  if(outEdges.size()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  if(outEdges.size()  ==  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >  1)  {  if(outEdges.size()  ==  2)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
96	[BUG]  [BUGGY]  if(outEdges!=  null)  {  if(outEdges.size()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  if(outEdges.size()  ==  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null)  {  if(outEdges.size()  ==  2)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(n.hasChildren())  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(n.hasChildren())  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()    ==    2)    {    	compilable	  [FE]  AssertionFailedError  	25	7	replace
98	[BUG]  [BUGGY]  if(n.hasChildren())  {  [FE]  AssertionFailedError  [FE]                  RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(n.hasChildren())  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(n.hasChildren())  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()    ==    2)    {    	compilable	  [FE]  AssertionFailedError  	25	7	replace
99	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	72	None	replace
100	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	72	None	replace
101	[BUG]  [BUGGY]  if(n.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(n.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(n.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	72	None	replace
102	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  &&  outEdges.size()  >=  1)  {	  if(outEdges.size()    >=    1)    {    	compilable	  [FE]  RuntimeException  	82	3	replace
103	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  1)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >=  1)  {	  if(outEdges.size()    >=    1)    {    	compilable	  [FE]  RuntimeException  	82	3	replace
104	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  >=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  ||  outEdges.size()  >=  1)  {	  if(outEdges.size()    >=    1)    {    	compilable	  [FE]  RuntimeException  	82	3	replace
105	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  >=  1)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  >=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  >=  1)  {	  if(outEdges.size()    >=    1)    {    	compilable	  [FE]  RuntimeException  	82	3	replace
106	[BUG]  [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  ||  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges    ==    null    &&    outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	52	None	replace
107	[BUG]  [BUGGY]  if(outEdges.size()  ==  2)  {  if(outEdges.size()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  2)  {  if(outEdges.size()  ==  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    2)    {    if(outEdges.size()  ==  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
108	[BUG]  [BUGGY]  if(outEdges.size()  ==  2)  {  If(outEdges.size()  ==  2)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  2)  {  If(outEdges.size()  ==  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    2)    {    If(outEdges.size()  ==  2)  {	  	non-compiled	[CE]  ';'  expected	44	None	add
109	[BUG]  [BUGGY]  if(outEdges.size()  ==  2)  {  if(outEdges.size()!=  2)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  2)  {  if(outEdges.size()!=  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    2)    {    if(outEdges.size()!=  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
110	[BUG]  [BUGGY]  if(outEdges.size()  ==  2)  {  if(outEdges.size()  >=  2)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  2)  {  if(outEdges.size()  >=  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    2)    {    if(outEdges.size()  >=  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
111	[BUG]  [BUGGY]  if(outEdges.size()  ==  2)  {  if(outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  2)  {  if(outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    2)    {    if(outEdges.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
112	[BUG]  [BUGGY]  if(outEdges.size()  ==  2)  {  if(OutEdges.size()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  2)  {  if(OutEdges.size()  ==  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    2)    {    if(OutEdges.size()  ==  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
113	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
114	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
115	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FU  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FU  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FU	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
116	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
117	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
118	[BUG]  [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	59	None	replace
119	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges!=    null    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	59	None	replace
120	[BUG]  [BUGGY]  if(outEdges!=  null)  {  if(outEdges.size()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  if(outEdges.size()  >=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null)  {  if(outEdges.size()  >=  1)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
121	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(outEdges.size()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(removeNoOpStatements)  {  if(outEdges.size()  >=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(removeNoOpStatements)  {  if(outEdges.size()  >=  1)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
122	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  if(outEdges.size()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  if(outEdges.size()  >=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >  1)  {  if(outEdges.size()  >=  1)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
123	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(outEdges.size()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(removeNoOpStatements)  {  if(outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(removeNoOpStatements)  {  if(outEdges.size()  >  1)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
124	[BUG]  [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();  [CE]  >  expected  [FE]          RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	OutEdges  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >=    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  >  expected	64	None	replace
125	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >=    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
126	[BUG]  [BUGGY]  Node  first  =  nNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  nNode.getFirstChild();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  nNode.getFirstChild();	  Node    first    =    gNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
127	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  nextCfgNode.getFirstChild();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  nextCfgNode.getFirstChild();	  Node    first    =    gNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
128	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(outEdges.size()!=  1)  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(removeNoOpStatements)  {  if(outEdges.size()!=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(removeNoOpStatements)  {  if(outEdges.size()!=  1)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()!=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
129	[BUG]  [BUGGY]  if(outEdges!=  null)  {  if(outEdges.size()!=  1)  {  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  if(outEdges.size()!=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null)  {  if(outEdges.size()!=  1)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()!=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
130	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	20	None	replace
131	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	20	None	replace
132	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	20	None	replace
133	[BUG]  [BUGGY]  Node  first  =  n.getFirst();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  n.getFirst();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  n.getFirst();	  Node    first    =    gNode.getFirst();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
134	[BUG]  [BUGGY]  Node  first  =  outEdges.getFirst();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  outEdges.getFirst();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  outEdges.getFirst();	  Node    first    =    gNode.getFirst();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
135	[BUG]  [BUGGY]  Node  first  =  node.getFirst();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  node.getFirst();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  node.getFirst();	  Node    first    =    gNode.getFirst();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
136	[BUG]  [BUGGY]  Node  first  =  gNode.getLast();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  gNode.getLast();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  gNode.getLast();	  Node    first    =    gNode.getFirst();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
137	[BUG]  [BUGGY]  Node  first  =  nNode.getFirst();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  nNode.getFirst();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  nNode.getFirst();	  Node    first    =    gNode.getFirst();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
138	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getFirst();  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  nextCfgNode.getFirst();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  nextCfgNode.getFirst();	  Node    first    =    gNode.getFirst();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
139	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.size();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
140	[BUG]  [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.size();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
141	[BUG]  [BUGGY]  outEdges  =  outEdges.size();  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  outEdges  =  outEdges.size();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	outEdges  =  outEdges.size();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.size();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
142	[BUG]  [BUGGY]  if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  }  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  }  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  }	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.size();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
143	[BUG]  [BUGGY]  OutEdges  outEdges  =  outEdges.size();  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  OutEdges  outEdges  =  outEdges.size();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	OutEdges  outEdges  =  outEdges.size();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.size();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
144	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  outEdges.size();  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  outEdges.size();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  outEdges.size();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.size();    	non-compiled	[CE]  not  a  statement	66	None	replace
145	[BUG]  [BUGGY]  if(outEdges!=  null)  {  if(OutEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  if(OutEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null)  {  if(OutEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    if(OutEdges.size()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
146	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  if(OutEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  if(OutEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >  1)  {  if(OutEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    if(OutEdges.size()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
147	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  if(outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  if(outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >  1)  {  if(outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    if(OutEdges.size()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
148	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(OutEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(removeNoOpStatements)  {  if(OutEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(removeNoOpStatements)  {  if(OutEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    if(OutEdges.size()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
149	[BUG]  [BUGGY]  if(n.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(n.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(n.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(n.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	21	None	replace
150	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	61	None	replace
151	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	61	None	replace
152	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	61	None	replace
153	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	61	None	replace
154	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FU  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FU  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FU	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	61	None	replace
155	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	61	None	replace
156	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getOutEdges();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
157	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getOutEdges();  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  >  expected	77	None	replace
158	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getOutEdges();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
159	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDeadExprStatements();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDeadExprStatements();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
160	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nNode.getOutEdges();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nNode.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
161	[BUG]  [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getInEdges();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getInEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getInEdges();	  Deque    <    DiGraphEdge    <    Node,Branch    >=    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
162	[BUG]  [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getOutEdges();  [CE]  ']'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Deque  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getOutEdges();	  Deque    <    DiGraphEdge    <    Node,Branch    >=    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  ']'  expected	79	None	replace
163	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  If(outEdges.size()  ==  1)  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(removeNoOpStatements)  {  If(outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(removeNoOpStatements)  {  If(outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    If(outEdges.size()    ==    1)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
164	[BUG]  [BUGGY]  if(outEdges!=  null)  {  If(outEdges.size()  ==  1)  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  If(outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null)  {  If(outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    If(outEdges.size()    ==    1)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
165	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  If(outEdges.size()  ==  1  ||  outEdges.size()  ==  2)  {  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1)  {  If(outEdges.size()  ==  1  ||  outEdges.size()  ==  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1)  {  If(outEdges.size()  ==  1  ||  outEdges.size()  ==  2)  {	  if(outEdges.size()    ==    1)    {    If(outEdges.size()    ==    1)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
166	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  If(outEdges.size()  ==  1  ||  outEdges.get(0).getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1)  {  If(outEdges.size()  ==  1  ||  outEdges.get(0).getType()  ==  Token.FUNCTION)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1)  {  If(outEdges.size()  ==  1  ||  outEdges.get(0).getType()  ==  Token.FUNCTION)  {	  if(outEdges.size()    ==    1)    {    If(outEdges.size()    ==    1)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
167	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  If(outEdges.size()  ==  2)  {  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1)  {  If(outEdges.size()  ==  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1)  {  If(outEdges.size()  ==  2)  {	  if(outEdges.size()    ==    1)    {    If(outEdges.size()    ==    1)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  <  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  &&  outEdges.size()  <  1)  {	  if(outEdges.size()    <    1)    {    	compilable	  [FE]  AssertionFailedError  	43	7	replace
169	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  <  1)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  <  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  <  1)  {	  if(outEdges.size()    <    1)    {    	compilable	  [FE]  AssertionFailedError  	43	7	replace
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  <  1  ||  outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  <  1  ||  outEdges.size()  >  1)  {	  if(outEdges.size()    <    1)    {    	compilable	  [FE]  AssertionFailedError  	43	7	replace
171	[BUG]  [BUGGY]  if(outEdges.size()  <  1  ||  outEdges.size()  >  1)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  <  1  ||  outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  <  1  ||  outEdges.size()  >  1)  {	  if(outEdges.size()    <    1)    {    	compilable	  [FE]  AssertionFailedError  	43	7	replace
172	[BUG]  [BUGGY]  NodeUtil.removeChild(outEdges,  n);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  NodeUtil.removeChild(outEdges,  n);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	NodeUtil.removeChild(outEdges,  n);	  NodeUtil.removeChild(outEdges);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
173	[BUG]  [BUGGY]  NodeUtil.removeChild(outEdges,  first);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  NodeUtil.removeChild(outEdges,  first);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	NodeUtil.removeChild(outEdges,  first);	  NodeUtil.removeChild(outEdges);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
174	[BUG]  [BUGGY]  NodeUtil.removeChild(n);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  NodeUtil.removeChild(n);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	NodeUtil.removeChild(n);	  NodeUtil.removeChild(outEdges);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
175	[BUG]  [BUGGY]  NodeUtil.removeChild(outEdges,  outCfgNode);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  NodeUtil.removeChild(outEdges,  outCfgNode);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	NodeUtil.removeChild(outEdges,  outCfgNode);	  NodeUtil.removeChild(outEdges);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
176	[BUG]  [BUGGY]  NodeUtil.removeChild(outEdges,  gNode);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  NodeUtil.removeChild(outEdges,  gNode);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	NodeUtil.removeChild(outEdges,  gNode);	  NodeUtil.removeChild(outEdges);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
177	[BUG]  [BUGGY]  NodeUtil.removeChild(compiler,  outEdges);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  NodeUtil.removeChild(compiler,  outEdges);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	NodeUtil.removeChild(compiler,  outEdges);	  NodeUtil.removeChild(outEdges);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
178	[BUG]  [BUGGY]  NodeUtil.removeChild(first);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  NodeUtil.removeChild(first);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	NodeUtil.removeChild(first);	  NodeUtil.removeChild(outEdges);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
179	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.getOutEdges();    	non-compiled	[CE]  not  a  statement	68	None	replace
180	[BUG]  [BUGGY]  outEdges  =  outEdges.getOutEdges();  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  outEdges  =  outEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	outEdges  =  outEdges.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
181	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  }  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  }  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  }	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
182	[BUG]  [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
183	[BUG]  [BUGGY]  if(outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	11	None	replace
184	[BUG]  [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	11	None	replace
185	[BUG]  [BUGGY]  if(outEdges.size()!=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	11	None	replace
186	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	11	None	replace
187	[BUG]  [BUGGY]  if(!outEdges.isEmpty()  ||  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(!outEdges.isEmpty()  ||  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(!outEdges.isEmpty()  ||  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(!outEdges.isEmpty()    &&    outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	71	None	replace
188	[BUG]  [BUGGY]  if(!outEdges.isEmpty()  ||  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(!outEdges.isEmpty()  ||  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(!outEdges.isEmpty()  ||  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(!outEdges.isEmpty()    &&    outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	71	None	replace
189	[BUG]  [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FU  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FU  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(!outEdges.isEmpty()  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FU	  if(!outEdges.isEmpty()    &&    outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	71	None	replace
190	[BUG]  [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(!outEdges.isEmpty()  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(!outEdges.isEmpty()    &&    outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	71	None	replace
191	[BUG]  [BUGGY]  if(outEdges.size()  <  1)  {  if(outEdges.size()  <  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  <  1)  {  if(outEdges.size()  <  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    <    1)    {    if(outEdges.size()  <  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
192	[BUG]  [BUGGY]  if(outEdges.size()  <  1)  {  If(outEdges.size()  <  1)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  <  1)  {  If(outEdges.size()  <  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    <    1)    {    If(outEdges.size()  <  1)  {	  	non-compiled	[CE]  ';'  expected	42	None	add
193	[BUG]  [BUGGY]  if(outEdges.size()  <  1)  {  if(outEdges.size()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  <  1)  {  if(outEdges.size()  >=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    <    1)    {    if(outEdges.size()  >=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
194	[BUG]  [BUGGY]  if(outEdges.size()  <  1)  {  if(OutEdges.size()  <  1)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  <  1)  {  if(OutEdges.size()  <  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    <    1)    {    if(OutEdges.size()  <  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
195	[BUG]  [BUGGY]  if(outEdges.size()  <  1)  {  if(outEdges.size()  <  2)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  <  1)  {  if(outEdges.size()  <  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    <    1)    {    if(outEdges.size()  <  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
196	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  if(outEdges.size()  >  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  if(outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >    1)    {    if(outEdges.size()  >  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
197	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  If(outEdges.size()  >  1)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  If(outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >    1)    {    If(outEdges.size()  >  1)  {	  	non-compiled	[CE]  ';'  expected	34	None	add
198	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  Node  outEdges  =  gNode.getOutEdges();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  Node  outEdges  =  gNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >    1)    {    Node  outEdges  =  gNode.getOutEdges();	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
199	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  if(OutEdges.size()  >  1)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  if(OutEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >    1)    {    if(OutEdges.size()  >  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
200	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  if(outEdges.size()  >  2)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  if(outEdges.size()  >  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >    1)    {    if(outEdges.size()  >  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
201	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	23	None	replace
202	[BUG]  [BUGGY]  if(n.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(n.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(n.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	23	None	replace
203	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	23	None	replace
204	[BUG]  [BUGGY]  Preconditions.checkState(outEdges  ==  null);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Preconditions.checkState(outEdges  ==  null);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Preconditions.checkState(outEdges  ==  null);	  Preconditions.checkState(outEdges!=    null);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
205	[BUG]  [BUGGY]  Preconditions.checkState(outEdges!=  null  &&  outEdges.size()  >  0);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Preconditions.checkState(outEdges!=  null  &&  outEdges.size()  >  0);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Preconditions.checkState(outEdges!=  null  &&  outEdges.size()  >  0);	  Preconditions.checkState(outEdges!=    null);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
206	[BUG]  [BUGGY]  Preconditions.checkState(outEdges!=  null,  outEdges.size()  >  0);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Preconditions.checkState(outEdges!=  null,  outEdges.size()  >  0);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Preconditions.checkState(outEdges!=  null,  outEdges.size()  >  0);	  Preconditions.checkState(outEdges!=    null);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkState(outEdges!=  null  ||  outEdges.size()  ==  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Preconditions.checkState(outEdges!=  null  ||  outEdges.size()  ==  1);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Preconditions.checkState(outEdges!=  null  ||  outEdges.size()  ==  1);	  Preconditions.checkState(outEdges!=    null);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(outEdges!=  null  &&  outEdges.size()  >  1);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Preconditions.checkState(outEdges!=  null  &&  outEdges.size()  >  1);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Preconditions.checkState(outEdges!=  null  &&  outEdges.size()  >  1);	  Preconditions.checkState(outEdges!=    null);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
209	[BUG]  [BUGGY]  Preconditions.checkState(outEdges!=  null,  outEdges.size());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Preconditions.checkState(outEdges!=  null,  outEdges.size());  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Preconditions.checkState(outEdges!=  null,  outEdges.size());	  Preconditions.checkState(outEdges!=    null);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
210	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2)  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	39	3	replace
211	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2)  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	39	3	replace
212	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()!=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  ==  1  ||  outEdges.size()!=  1)  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	39	3	replace
213	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()!=  1)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()!=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()!=  1)  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	39	3	replace
214	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  1  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()!=  1  ||  outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	39	3	replace
215	[BUG]  [BUGGY]  if(outEdges.size()!=  1  ||  outEdges.size()  ==  1)  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  1  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=  1  ||  outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	39	3	replace
216	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  >  1  ||  outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	39	3	replace
217	[BUG]  [BUGGY]  if(outEdges.size()  >  1  ||  outEdges.size()  ==  1)  {  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >  1  ||  outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	39	3	replace
218	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  >=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  ==  1  ||  outEdges.size()  >=  1)  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	39	3	replace
219	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  >=  1)  {  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  >=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()  >=  1)  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	39	3	replace
220	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  ==  1  ||  outEdges.size()  >  1)  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	39	3	replace
221	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  >  1)  {  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()  >  1)  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	39	3	replace
222	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    2    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	70	None	replace
223	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    2    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	70	None	replace
224	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    ==    2    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	70	None	replace
225	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges!=    null    &&    outEdges.size()    ==    2    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	70	None	replace
226	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >=  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    2    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	70	None	replace
227	[BUG]  [BUGGY]  if(outEdges!=  null)  {  if(outEdges!=  null)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  if(outEdges!=  null)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null)    {    if(outEdges!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
228	[BUG]  [BUGGY]  if(outEdges!=  null)  {  if(outEdges  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  if(outEdges  ==  null)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null)    {    if(outEdges  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
229	[BUG]  [BUGGY]  if(outEdges!=  null)  {  if(outEdges  >=  null)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  if(outEdges  >=  null)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null)    {    if(outEdges  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
230	[BUG]  [BUGGY]  if(outEdges!=  null)  {  if(outEdges  >>  null)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  if(outEdges  >>  null)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null)    {    if(outEdges  >>  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
231	[BUG]  [BUGGY]  if(outEdges!=  null)  {  If(outEdges!=  null)  {  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  If(outEdges!=  null)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null)    {    If(outEdges!=  null)  {	  	non-compiled	[CE]  ';'  expected	57	None	add
232	[BUG]  [BUGGY]  if(outEdges!=  null)  {  if(outEdges  [BUGGY]  null)  {  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  if(outEdges  [BUGGY]  null)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null)    {    if(outEdges  [BUGGY]  null)  {	  	non-compiled	[CE]  ')'  expected	57	None	add
233	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDeadExprStatement();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(0).getDeadExprStatement();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getDeadExprStatement();	  Node    n    =    outEdges.get(0);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
234	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getOutEdges();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(0).getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getOutEdges();	  Node    n    =    outEdges.get(0);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
235	[BUG]  [BUGGY]  Node  n  =  outEdges.get(1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(1);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(1);	  Node    n    =    outEdges.get(0);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
236	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDeadExprStatements();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(0).getDeadExprStatements();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getDeadExprStatements();	  Node    n    =    outEdges.get(0);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
237	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDeepestination();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(0).getDeepestination();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getDeepestination();	  Node    n    =    outEdges.get(0);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
238	[BUG]  [BUGGY]  Node  first  =  outEdges.getLastChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  outEdges.getLastChild();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  outEdges.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
239	[BUG]  [BUGGY]  Node  first  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  node.getLastChild();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  node.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
240	[BUG]  [BUGGY]  Node  nextCfgNode  =  gNode.getNext();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  nextCfgNode  =  gNode.getNext();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  nextCfgNode  =  gNode.getNext();	  Node    nextCfgNode    =    outEdges.getNext();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
241	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  nextCfgNode  =  n.getNext();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  nextCfgNode  =  n.getNext();	  Node    nextCfgNode    =    outEdges.getNext();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
242	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  nextCfgNode  =  first.getNext();	  Node    nextCfgNode    =    outEdges.getNext();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
243	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getFirst();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  nextCfgNode  =  outEdges.getFirst();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  nextCfgNode  =  outEdges.getFirst();	  Node    nextCfgNode    =    outEdges.getNext();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
244	[BUG]  [BUGGY]  Node  nextCfgNode  =  gNode.getOutEdges();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  nextCfgNode  =  gNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  nextCfgNode  =  gNode.getOutEdges();	  Node    nextCfgNode    =    outEdges.getNext();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
245	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getLastChild();  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  nextCfgNode  =  outEdges.getLastChild();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  nextCfgNode  =  outEdges.getLastChild();	  Node    nextCfgNode    =    outEdges.getNext();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges  ==  null  &&  outEdges.size()  >  1)  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	56	7	replace
247	[BUG]  [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  >  1)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  &&  outEdges.size()  >  1)  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	56	7	replace
248	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  &&  outEdges.size()  ==  2)  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	56	7	replace
249	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  2)  {  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  2)  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	56	7	replace
250	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
251	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  if(outEdges.size()  ==  1  &&  (n.getNext()!=  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  if(outEdges.size()  ==  1  &&  (n.getNext()!=  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    if(outEdges.size()  ==  1  &&  (n.getNext()!=  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
252	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()!=  Token.FUNCTION))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()!=  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()!=  Token.FUNCTION))  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
253	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  if(outEdges.size()  ==  1  &&  (N.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  if(outEdges.size()  ==  1  &&  (N.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    if(outEdges.size()  ==  1  &&  (N.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
254	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  If(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  If(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    If(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  	non-compiled	[CE]  ';'  expected	75	None	add
255	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  if(outEdges.size()!=  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  if(outEdges.size()!=  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    if(outEdges.size()!=  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
256	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	31	None	replace
257	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	31	None	replace
258	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1)  {  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  &&  outEdges.size()  >  1)  {  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	compilable	  [FE]  AssertionFailedError  	31	7	replace
259	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1)  {  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1)  {  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1)  {  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	compilable	  [FE]  AssertionFailedError  	31	7	replace
260	[BUG]  [BUGGY]  Node  first  =  nNode.getLastChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  nNode.getLastChild();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  nNode.getLastChild();	  Node    first    =    gNode.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
261	[BUG]  [BUGGY]  if(n.hasChildren())  {  if(outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(n.hasChildren())  {  if(outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(n.hasChildren())  {  if(outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
262	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(n.getType()  ==  Token.NAME)  {  if(outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
263	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION)    	non-compiled	[CE]  ')'  expected	32	None	replace
264	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION)    	non-compiled	[CE]  ')'  expected	32	None	replace
265	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION)    	non-compiled	[CE]  ')'  expected	32	None	replace
266	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION)    	non-compiled	[CE]  ')'  expected	32	None	replace
267	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  <  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  <  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  <  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION)    	non-compiled	[CE]  ')'  expected	32	None	replace
268	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	33	None	replace
269	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges    ==    null    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	60	None	replace
270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges  ==  null)  {	  if(outEdges!=    null)    {    	compilable	  [FE]  AssertionFailedError  	58	7	replace
271	[BUG]  [BUGGY]  if(outEdges  ==  null)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null)  {	  if(outEdges!=    null)    {    	compilable	  [FE]  AssertionFailedError  	58	7	replace
272	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges  ==  null  ||  outEdges.size()  ==  1)  {	  if(outEdges!=    null)    {    	compilable	  [FE]  RuntimeException  	58	3	replace
273	[BUG]  [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  1)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  ||  outEdges.size()  ==  1)  {	  if(outEdges!=    null)    {    	compilable	  [FE]  RuntimeException  	58	3	replace
274	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  ||  outEdges.size()  ==  2)  {	  if(outEdges!=    null)    {    	compilable	  [FE]  RuntimeException  	58	3	replace
275	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  2)  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  ==  2)  {	  if(outEdges!=    null)    {    	compilable	  [FE]  RuntimeException  	58	3	replace
276	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges  ==  null  ||  outEdges.size()  ==  2)  {	  if(outEdges!=    null)    {    	compilable	  [FE]  AssertionFailedError  	58	7	replace
277	[BUG]  [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  2)  {  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  ||  outEdges.size()  ==  2)  {	  if(outEdges!=    null)    {    	compilable	  [FE]  AssertionFailedError  	58	7	replace
278	[BUG]  [BUGGY]  if(outEdges.size()  >=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    >    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	9	None	replace
279	[BUG]  [BUGGY]  if(outEdges.size()  <  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  <  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  <  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    >    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	9	None	replace
280	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDeestination().getValue();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(0).getDeestination().getValue();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getDeestination().getValue();	  Node    n    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
281	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDestination().getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(0).getDestination().getValue()  +  1;  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getDestination().getValue()  +  1;	  Node    n    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
282	[BUG]  [BUGGY]  Node  n  =  outEdges.get(1).getDestination().getValue();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(1).getDestination().getValue();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(1).getDestination().getValue();	  Node    n    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
283	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDesertion().getValue();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(0).getDesertion().getValue();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getDesertion().getValue();	  Node    n    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
284	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDetination().getValue();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(0).getDetination().getValue();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getDetination().getValue();	  Node    n    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
285	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getEntry().getValue();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(0).getEntry().getValue();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getEntry().getValue();	  Node    n    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
286	[BUG]  [BUGGY]  if(outEdges.size()!=  1)  {  if(outEdges.size()!=  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  1)  {  if(outEdges.size()!=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=    1)    {    if(outEdges.size()!=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
287	[BUG]  [BUGGY]  if(outEdges.size()!=  1)  {  if(outEdges.size()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  1)  {  if(outEdges.size()  >=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=    1)    {    if(outEdges.size()  >=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
288	[BUG]  [BUGGY]  if(outEdges.size()!=  1)  {  if(outEdges.size()  >>  1)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  1)  {  if(outEdges.size()  >>  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=    1)    {    if(outEdges.size()  >>  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
289	[BUG]  [BUGGY]  if(outEdges.size()!=  1)  {  if(outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  1)  {  if(outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=    1)    {    if(outEdges.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
290	[BUG]  [BUGGY]  if(outEdges.size()!=  1)  {  If(outEdges.size()!=  1)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  1)  {  If(outEdges.size()!=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=    1)    {    If(outEdges.size()!=  1)  {	  	non-compiled	[CE]  ';'  expected	40	None	add
291	[BUG]  [BUGGY]  if(outEdges.size()!=  1)  {  If(outEdges.size()  >=  1)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  1)  {  If(outEdges.size()  >=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=    1)    {    If(outEdges.size()  >=  1)  {	  	non-compiled	[CE]  ';'  expected	40	None	add
292	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  >  2)  {	  if(outEdges.size()    ==    2)    {    	compilable	  [FE]  AssertionFailedError  	45	7	replace
293	[BUG]  [BUGGY]  if(outEdges.size()  >  2)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >  2)  {	  if(outEdges.size()    ==    2)    {    	compilable	  [FE]  AssertionFailedError  	45	7	replace
294	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDeestination();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(0).getDeestination();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getDeestination();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
295	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDetination();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(0).getDetination();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getDetination();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
296	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getCfgNode();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(0).getCfgNode();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getCfgNode();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
297	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDesertion();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(0).getDesertion();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getDesertion();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
298	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getEntry();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(0).getEntry();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getEntry();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
299	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()!=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()!=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()!=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()!=    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	12	None	replace
300	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()!=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  ||  outEdges.size()!=  1)  {	  if(outEdges.size()!=    1)    {    	compilable	  [FE]  RuntimeException  	41	3	replace
301	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()!=  1)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()!=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()!=  1)  {	  if(outEdges.size()!=    1)    {    	compilable	  [FE]  RuntimeException  	41	3	replace
302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()!=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  &&  outEdges.size()!=  1)  {	  if(outEdges.size()!=    1)    {    	compilable	  [FE]  AssertionFailedError  	41	7	replace
303	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()!=  1)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()!=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()!=  1)  {	  if(outEdges.size()!=    1)    {    	compilable	  [FE]  AssertionFailedError  	41	7	replace
304	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges  ==  null  &&  outEdges.size()  ==  1)  {	  if(outEdges!=    null    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	37	7	replace
305	[BUG]  [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  ==  1)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  &&  outEdges.size()  ==  1)  {	  if(outEdges!=    null    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	37	7	replace
306	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
307	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  if(outEdges.size()  ==  1  ||  outEdges.size()!=  1)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  if(outEdges.size()  ==  1  ||  outEdges.size()!=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    if(outEdges.size()  ==  1  ||  outEdges.size()!=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
308	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  if(outEdges.size()!=  1  ||  outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  if(outEdges.size()!=  1  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    if(outEdges.size()!=  1  ||  outEdges.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
309	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  if(outEdges.size()  ==  1  ||  outEdges.size()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  if(outEdges.size()  ==  1  ||  outEdges.size()  >=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    if(outEdges.size()  ==  1  ||  outEdges.size()  >=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
310	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  if(outEdges.size()  >=  1  ||  outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  if(outEdges.size()  >=  1  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    if(outEdges.size()  >=  1  ||  outEdges.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
311	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
312	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  If(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  [CE]  ';'  expected  [FE]                RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  If(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    If(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {	  	non-compiled	[CE]  ';'  expected	38	None	add
313	[BUG]  [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  ||  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges    ==    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	62	None	replace
314	[BUG]  [BUGGY]  if(outEdges  ==  null)  {  if(outEdges.size()!=  1)  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null)  {  if(outEdges.size()!=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null)  {  if(outEdges.size()!=  1)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()!=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
315	[BUG]  [BUGGY]  if(outEdges  ==  null)  {  if(outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null)  {  if(outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null)  {  if(outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()!=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
316	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges  ==  null  ||  outEdges.size()  >  1)  {	  if(outEdges!=    null    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	37	7	replace
317	[BUG]  [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  >  1)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  ||  outEdges.size()  >  1)  {	  if(outEdges!=    null    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	37	7	replace
318	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	11	None	replace
319	[BUG]  [BUGGY]  OutEdge  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  OutEdge  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	OutEdge  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
320	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  to  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  to  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  to  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges    ==    null    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	60	None	replace
321	[BUG]  [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  ||  outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    >    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	9	None	replace
322	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    >    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	9	None	replace
323	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    2    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	69	None	replace
324	[BUG]  [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  ||  outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    2    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	69	None	replace
325	[BUG]  [BUGGY]  if(outEdges!=  null)  {  if(outEdges.size()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  if(outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null)  {  if(outEdges.size()  >  1)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
326	[BUG]  [BUGGY]  if(outEdges  ==  null)  {  if(outEdges.size()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null)  {  if(outEdges.size()  >=  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null)  {  if(outEdges.size()  >=  1)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
327	[BUG]  [BUGGY]  if(outEdges  ==  null)  {  if(outEdges.size()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null)  {  if(outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null)  {  if(outEdges.size()  >  1)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
328	[BUG]  [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getCfgEdges();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getCfgEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getCfgEdges();	  Deque    <    DiGraphEdge    <    Node,Branch    >=    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
329	[BUG]  [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();	  Deque    <    DiGraphEdge    <    Node,Branch    >=    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
330	[BUG]  [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
331	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	39	3	replace
332	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	39	3	replace
333	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  if(OutEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  if(OutEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    if(OutEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
334	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  if(outEdges.size()  ==  2  ||  outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  if(outEdges.size()  ==  2  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    if(outEdges.size()  ==  2  ||  outEdges.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
335	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  //  If  there  is  a  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  //  If  there  is  a  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  &&  //  If  there  is  a  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(n.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	21	None	replace
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  AssertionFailedError  	76	2	replace
337	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  AssertionFailedError  	76	2	replace
338	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getParent()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  ==  1  &&  (n.getParent()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  RuntimeException  	76	10	replace
339	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getParent()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getParent()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  &&  (n.getParent()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  RuntimeException  	76	10	replace
340	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.isEmpty())  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  ||  outEdges.isEmpty())  {	  if(outEdges!=    null)    {    	compilable	  [FE]  RuntimeException  	58	3	replace
341	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.isEmpty())  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.isEmpty())  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.isEmpty())  {	  if(outEdges!=    null)    {    	compilable	  [FE]  RuntimeException  	58	3	replace
342	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {	  if(outEdges!=    null)    {    	compilable	  [FE]  RuntimeException  	58	3	replace
343	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {	  if(outEdges!=    null)    {    	compilable	  [FE]  RuntimeException  	58	3	replace
344	[BUG]  [BUGGY]  if(outEdges.size()  <  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  <  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    <    1)    {    List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
345	[BUG]  [BUGGY]  if(outEdges.size()  <  1)  {  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  <  1)  {  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    <    1)    {    List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();	  	non-compiled	[CE]  >  expected	42	None	add
346	[BUG]  [BUGGY]  if(outEdges.size()  <  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  <  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    <    1)    {    List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
347	[BUG]  [BUGGY]  if(outEdges.size()  <  1)  {  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  gNode.getOutEdges();  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  <  1)  {  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  gNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    <    1)    {    List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  gNode.getOutEdges();	  	non-compiled	[CE]  ']'  expected	42	None	add
348	[BUG]  [BUGGY]  if(outEdges.size()  <  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  <  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    <    1)    {    List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
349	[BUG]  [BUGGY]  if(outEdges.size()  <  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  <  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    <    1)    {    List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
350	[BUG]  [BUGGY]  if(outEdges.size()  <  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  nEdges  =  outEdges.size();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  <  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  nEdges  =  outEdges.size();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    <    1)    {    List  <  DiGraphEdge  <  Node,Branch  >>  nEdges  =  outEdges.size();	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
351	[BUG]  [BUGGY]  if(outEdges.size()!=  1)  {  if(outEdges.size()!=  2)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  1)  {  if(outEdges.size()!=  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=    1)    {    if(outEdges.size()!=  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
352	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getDestination();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  nextCfgNode  =  outEdges.getDestination();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  nextCfgNode  =  outEdges.getDestination();	  Node    nextCfgNode    =    outEdges.getNext();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
353	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getParent();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  nextCfgNode  =  outEdges.getParent();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  nextCfgNode  =  outEdges.getParent();	  Node    nextCfgNode    =    outEdges.getNext();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
354	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getNext()  -  1;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  nextCfgNode  =  outEdges.getNext()  -  1;  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  nextCfgNode  =  outEdges.getNext()  -  1;	  Node    nextCfgNode    =    outEdges.getNext();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
355	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  if(OutEdges!=  null  ||  outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  if(OutEdges!=  null  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null    ||    outEdges.size()    ==    1)    {    if(OutEdges!=  null  ||  outEdges.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
356	[BUG]  [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
357	[BUG]  [BUGGY]  Node  n  =  outEdges.get(gNode);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(gNode);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(gNode);	  Node    n    =    outEdges.get(0);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
358	[BUG]  [BUGGY]  Node  n  =  outEdges.get(first);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(first);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(first);	  Node    n    =    outEdges.get(0);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
359	[BUG]  [BUGGY]  if(outEdges.size()  >=  1)  {  if(outEdges.size()  >=  2)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >=  1)  {  if(outEdges.size()  >=  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >=    1)    {    if(outEdges.size()  >=  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
360	[BUG]  [BUGGY]  Node  n  =  outEdges.get(gNode).getDestination();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(gNode).getDestination();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(gNode).getDestination();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
361	[BUG]  [BUGGY]  Node  n  =  outEdges.get(1).getDestination();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(1).getDestination();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(1).getDestination();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
362	[BUG]  [BUGGY]  OutEdge  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  OutEdge  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	OutEdge  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.size();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
363	[BUG]  [BUGGY]  if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.size();    	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	66	None	replace
364	[BUG]  [BUGGY]  if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  }  else  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  }  else  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  }  else  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.size();    	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	66	None	replace
365	[BUG]  [BUGGY]  NodeUtil.removeChild(outEdges,  noOpStatements);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  NodeUtil.removeChild(outEdges,  noOpStatements);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	NodeUtil.removeChild(outEdges,  noOpStatements);	  NodeUtil.removeChild(outEdges);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
366	[BUG]  [BUGGY]  NodeUtil.removeChild(outEdges,  nextCfgNode);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  NodeUtil.removeChild(outEdges,  nextCfgNode);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	NodeUtil.removeChild(outEdges,  nextCfgNode);	  NodeUtil.removeChild(outEdges);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
367	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  if(OutEdges!=  null  &&  outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  if(OutEdges!=  null  &&  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null    &&    outEdges.size()    ==    1)    {    if(OutEdges!=  null  &&  outEdges.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
368	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    ||    outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	53	None	replace
369	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.get(0).getType()  ==  Branch.UNCOND)  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.get(0).getType()  ==  Branch.UNCOND)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.get(0).getType()  ==  Branch.UNCOND)  {	  if(outEdges.size()    ==    2)    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
370	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    ==    2    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	70	None	replace
371	[BUG]  [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION)    	non-compiled	[CE]  ')'  expected	32	None	replace
372	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1)  {  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  &&  outEdges.size()  >  1)  {  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION)    	compilable	  [FE]  AssertionFailedError  	32	7	replace
373	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1)  {  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1)  {  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1)  {  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION)    	compilable	  [FE]  AssertionFailedError  	32	7	replace
374	[BUG]  [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	31	None	replace
375	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	22	None	replace
376	[BUG]  [BUGGY]  if(outEdges!=  null)  {  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null)  {  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	22	None	replace
377	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	22	None	replace
378	[BUG]  [BUGGY]  if(outEdges!=  null)  {  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null)  {  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	22	None	replace
379	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  to  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  to  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  to  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	22	None	replace
380	[BUG]  [BUGGY]  if(!outEdges.isEmpty())  {  if(outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(!outEdges.isEmpty())  {  if(outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(!outEdges.isEmpty())  {  if(outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
381	[BUG]  [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	23	None	replace
382	[BUG]  [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	23	None	replace
383	[BUG]  [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	73	None	replace
384	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	73	None	replace
385	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >    1)    {    List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
386	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >    1)    {    List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();	  	non-compiled	[CE]  >  expected	34	None	add
387	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  gNode.getOutEdges();  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  gNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >    1)    {    List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  gNode.getOutEdges();	  	non-compiled	[CE]  ']'  expected	34	None	add
388	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >    1)    {    List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
389	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  nEdges  =  outEdges.getOutEdges();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  nEdges  =  outEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >    1)    {    List  <  DiGraphEdge  <  Node,Branch  >>  nEdges  =  outEdges.getOutEdges();	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
390	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >    1)    {    List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
391	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getOutEdges();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >    1)    {    List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getOutEdges();	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
392	[BUG]  [BUGGY]  Preconditions.checkState(outEdges!=  null  &&  outEdges.size()  ==  1)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Preconditions.checkState(outEdges!=  null  &&  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Preconditions.checkState(outEdges!=  null  &&  outEdges.size()  ==  1)  {	  Preconditions.checkState(outEdges!=    null);    	non-compiled	[CE]  ';'  expected	46	None	replace
393	[BUG]  [BUGGY]  Preconditions.checkState(outEdges!=  null  &&  outEdges.size()  >  1)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Preconditions.checkState(outEdges!=  null  &&  outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Preconditions.checkState(outEdges!=  null  &&  outEdges.size()  >  1)  {	  Preconditions.checkState(outEdges!=    null);    	non-compiled	[CE]  ';'  expected	46	None	replace
394	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
395	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(removeNoOpStatements)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(removeNoOpStatements)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()    ==    2)    {    	compilable	  [FE]  RuntimeException  	25	3	replace
396	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(removeNoOpStatements)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(removeNoOpStatements)  {	  if(outEdges.size()    ==    1)    {    if(outEdges.size()    ==    2)    {    	compilable	  [FE]  RuntimeException  	25	3	replace
397	[BUG]  [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(!outEdges.isEmpty()  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(!outEdges.isEmpty()    &&    outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	71	None	replace
398	[BUG]  [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(!outEdges.isEmpty()  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(!outEdges.isEmpty()    &&    outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	71	None	replace
399	[BUG]  [BUGGY]  if(outEdges!=  null)  {  if(OutEdges!=  null)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  if(OutEdges!=  null)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=    null)    {    if(OutEdges!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
400	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()!=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()!=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()!=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()!=    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	12	None	replace
401	[BUG]  [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()!=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()!=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  ||  outEdges.size()!=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()!=    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	12	None	replace
402	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()!=    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	12	None	replace
403	[BUG]  [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	72	None	replace
404	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	20	None	replace
405	[BUG]  [BUGGY]  Node  n  =  outEdges.get(gNode).getDestination().getValue();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(gNode).getDestination().getValue();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(gNode).getDestination().getValue();	  Node    n    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
406	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDeadExprStatement().getValue();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(0).getDeadExprStatement().getValue();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getDeadExprStatement().getValue();	  Node    n    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
407	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDeserialization().getValue();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(0).getDeserialization().getValue();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getDeserialization().getValue();	  Node    n    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
408	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Branch.UNCOND))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Branch.UNCOND))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Branch.UNCOND))  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
409	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  if(outEdges.size()  ==  2  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  if(outEdges.size()  ==  2  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    if(outEdges.size()  ==  2  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
410	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  if(OutEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  if(OutEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    if(OutEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
411	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
412	[BUG]  [BUGGY]  OutEdge  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  OutEdge  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	OutEdge  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
413	[BUG]  [BUGGY]  if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.getOutEdges();    	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	replace
414	[BUG]  [BUGGY]  if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  }  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  }  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  }	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
415	[BUG]  [BUGGY]  OutEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  OutEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	OutEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.getOutEdges();    	non-compiled	[CE]  not  a  statement	68	None	replace
416	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  <  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  ||  outEdges.size()  <  1)  {	  if(outEdges.size()    <    1)    {    	compilable	  [FE]  RuntimeException  	43	3	replace
417	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  <  1)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  <  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  <  1)  {	  if(outEdges.size()    <    1)    {    	compilable	  [FE]  RuntimeException  	43	3	replace
418	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	61	None	replace
419	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getCfgEdges();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getCfgEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getCfgEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
420	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
421	[BUG]  [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    >=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	6	None	replace
422	[BUG]  [BUGGY]  if(outEdges  ==  null)  {  If(outEdges.size()  ==  1)  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null)  {  If(outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null)  {  If(outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    If(outEdges.size()    ==    1)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
423	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  If(outEdges.get(0)  ==  1)  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1)  {  If(outEdges.get(0)  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1)  {  If(outEdges.get(0)  ==  1)  {	  if(outEdges.size()    ==    1)    {    If(outEdges.size()    ==    1)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
424	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  If(outEdges.get(0)  ==  null)  {  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1)  {  If(outEdges.get(0)  ==  null)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1)  {  If(outEdges.get(0)  ==  null)  {	  if(outEdges.size()    ==    1)    {    If(outEdges.size()    ==    1)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
425	[BUG]  [BUGGY]  OutEdges  outEdges  =  outEdges.get(0).getOutEdges();  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  OutEdges  outEdges  =  outEdges.get(0).getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	OutEdges  outEdges  =  outEdges.get(0).getOutEdges();	  if(outEdges.size()    ==    1)    {    If(outEdges.size()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
426	[BUG]  [BUGGY]  if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    OutEdges.getOutEdges();    	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	67	None	replace
427	[BUG]  [BUGGY]  if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  }  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  }  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  }	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    OutEdges.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
428	[BUG]  [BUGGY]  if(outEdges  ==  null)  {  if(OutEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null)  {  if(OutEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null)  {  if(OutEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    if(OutEdges.size()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
429	[BUG]  [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    >=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	74	None	replace
430	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	compilable	  [FE]  RuntimeException  	54	3	replace
431	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	compilable	  [FE]  RuntimeException  	54	3	replace
432	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  0)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  &&  outEdges.size()  >  0)  {	  if(outEdges!=    null)    {    	compilable	  [FE]  RuntimeException  	58	3	replace
433	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  0)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  0)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  0)  {	  if(outEdges!=    null)    {    	compilable	  [FE]  RuntimeException  	58	3	replace
434	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  &&  outEdges.size()  >  2)  {	  if(outEdges!=    null)    {    	compilable	  [FE]  AssertionFailedError  	58	7	replace
435	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  2)  {  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  2)  {	  if(outEdges!=    null)    {    	compilable	  [FE]  AssertionFailedError  	58	7	replace
436	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDeserialization();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  n  =  outEdges.get(0).getDeserialization();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getDeserialization();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
437	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
438	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(!outEdges.isEmpty()  &&  outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  AssertionFailedError  	76	2	replace
439	[BUG]  [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(!outEdges.isEmpty()  &&  outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  AssertionFailedError  	76	2	replace
440	[BUG]  [BUGGY]  Preconditions.checkState(outEdges!=  null,  outEdges.size()  >  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Preconditions.checkState(outEdges!=  null,  outEdges.size()  >  1);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Preconditions.checkState(outEdges!=  null,  outEdges.size()  >  1);	  Preconditions.checkState(outEdges!=    null);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
441	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  2  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  ==  2  ||  outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	39	3	replace
442	[BUG]  [BUGGY]  if(outEdges.size()  ==  2  ||  outEdges.size()  ==  1)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  2  ||  outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  2  ||  outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	39	3	replace
443	[BUG]  [BUGGY]  ArrayList  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  ArrayList  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	ArrayList  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
444	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION);	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  not  a  statement	54	None	replace
445	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	54	None	replace
446	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	54	None	replace
447	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  *  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  ||  *  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  *  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
448	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges    ==    null    ||    outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	10	None	replace
449	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size()  >  1)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size()  >  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >    1)    {    List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size()  >  1)  {	  	non-compiled	[CE]  ';'  expected	34	None	add
450	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getOutEdges();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    >    1)    {    List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getOutEdges();	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
451	[BUG]  [BUGGY]  OutEdges  outEdges  =  gNode.getOutEdges();  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  OutEdges  outEdges  =  gNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	OutEdges  outEdges  =  gNode.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
452	[BUG]  [BUGGY]  ArrayList  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  ArrayList  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	ArrayList  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
453	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDestination();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDestination();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDestination();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
454	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDeepestStatements();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDeepestStatements();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDeepestStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
455	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  If(outEdges.size()  ==  1)  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1)  {  If(outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >  1)  {  If(outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    If(outEdges.size()    ==    1)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
456	[BUG]  [BUGGY]  if(n.hasChildren())  {  If(outEdges.size()  ==  1)  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(n.hasChildren())  {  If(outEdges.size()  ==  1)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(n.hasChildren())  {  If(outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    If(outEdges.size()    ==    1)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
457	[BUG]  [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(!outEdges.isEmpty()  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
458	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
459	[BUG]  [BUGGY]  if(outEdges.size()  <  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size());  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  <  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size());  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    <    1)    {    List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size());	  	non-compiled	[CE]  ';'  expected	42	None	add
460	[BUG]  [BUGGY]  if(outEdges.size()  <  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size()  -  1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  <  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size()  -  1;  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    <    1)    {    List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size()  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
461	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  outEdges.size()  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1)  {  outEdges.size()  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1)  {  outEdges.size()  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  not  a  statement	22	None	replace
462	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  outEdges.size()  {  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1)  {  outEdges.size()  {  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1)  {  outEdges.size()  {  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ';'  expected	22	None	replace
463	[BUG]  [BUGGY]  if(outEdges.size()  ==  2  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  2  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  2  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	22	None	replace
464	[BUG]  [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDestination();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDestination();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDestination();	  Deque    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
465	[BUG]  [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges();	  Deque    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
466	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1)  {  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1)  {  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1)  {  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION)    	non-compiled	[CE]  not  a  statement	32	None	replace
467	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  0  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  0  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  0  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION)    	non-compiled	[CE]  ')'  expected	32	None	replace
468	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION)    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
469	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  if(outEdges.size()  ==  1  &&  (n.getPrevious()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  if(outEdges.size()  ==  1  &&  (n.getPrevious()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    if(outEdges.size()  ==  1  &&  (n.getPrevious()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
470	[BUG]  [BUGGY]  if(outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	72	None	replace
471	[BUG]  [BUGGY]  if(outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	72	None	replace
472	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1)  {  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1)  {  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1)  {  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION);	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  not  a  statement	31	None	replace
473	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1)  {  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1)  {  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1)  {  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	31	None	replace
474	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  0  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  0  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  0  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION    	non-compiled	[CE]  ')'  expected	31	None	replace
475	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  <  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  <  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  <  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    2    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	70	None	replace
476	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    ||    outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	53	None	replace
477	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	61	None	replace
478	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	61	None	replace
479	[BUG]  [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(!outEdges.isEmpty()  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    >=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	74	None	replace
480	[BUG]  [BUGGY]  ArrayList  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  ArrayList  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	ArrayList  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.size();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
481	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  }  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  }  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  }	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.size();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
482	[BUG]  [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(!outEdges.isEmpty()  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    >=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	6	None	replace
483	[BUG]  [BUGGY]  if(outEdges.size()!=  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    2    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	69	None	replace
484	[BUG]  [BUGGY]  if(outEdges.size()  >  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    2    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	69	None	replace
485	[BUG]  [BUGGY]  if(outEdges.size()  >  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    2    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	69	None	replace
486	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  &&  outEdges.size()  >  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  AssertionFailedError  	30	7	replace
487	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  AssertionFailedError  	30	7	replace
488	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  0  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  0  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  0  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    >    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	30	None	replace
489	[BUG]  [BUGGY]  ArrayList  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  ArrayList  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	ArrayList  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    OutEdges.getOutEdges();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
490	[BUG]  [BUGGY]  Node  nextCfgNode  =  gNode.getInEdges();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  Node  nextCfgNode  =  gNode.getInEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  nextCfgNode  =  gNode.getInEdges();	  Node    nextCfgNode    =    outEdges.getNext();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
491	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getOutEdges();  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getOutEdges();  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getOutEdges();	  if(outEdges.size()    ==    1)    {    List    <    DiGraphEdge    <    Node,Branch    [Delete]    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	65	None	replace
492	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(outEdges);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(outEdges);  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	NodeUtil.redeclareVarsInsideBranch(outEdges);	  NodeUtil.removeChild(outEdges);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
493	[BUG]  [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(!outEdges.isEmpty()  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	73	None	replace
494	[BUG]  [BUGGY]  if(outEdges.size()  ==  2  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  2  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  2  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	20	None	replace
495	[BUG]  [BUGGY]  if(outEdges.size()!=  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=  1  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	20	None	replace
496	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()!=  2)  {	  if(outEdges.size()    ==    2)    {    	compilable	  [FE]  RuntimeException  	45	3	replace
497	[BUG]  [BUGGY]  if(outEdges.size()!=  2)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=  2)  {	  if(outEdges.size()    ==    2)    {    	compilable	  [FE]  RuntimeException  	45	3	replace
498	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >=  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  >=  2)  {	  if(outEdges.size()    ==    2)    {    	compilable	  [FE]  AssertionFailedError  	45	7	replace
499	[BUG]  [BUGGY]  if(outEdges.size()  >=  2)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  >=  2)  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >=  2)  {	  if(outEdges.size()    ==    2)    {    	compilable	  [FE]  AssertionFailedError  	45	7	replace
500	[BUG]  [BUGGY]  if(outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	23	None	replace
501	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  (n!=  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();      [BUGGY]  if(outEdges.size()  ==  1  &&  (n!=  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]        (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  &&  (n!=  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    leap    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	23	None	replace
