bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(n.getValue()  ==  Branch.UNCOND);	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	compilable	  [FE]  AssertionFailedError  	11	2	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	compilable	  [FE]  AssertionFailedError  	11	2	replace
4	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	compilable	  [FE]  RuntimeException  	11	10	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	compilable	  [FE]  RuntimeException  	11	10	replace
6	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]          AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	11	10	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]          AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	11	10	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	compilable	  [FE]  AssertionFailedError  	11	2	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	compilable	  [FE]  AssertionFailedError  	11	2	replace
10	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]              AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	11	10	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]              AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	11	10	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	  	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	compilable	  [FE]  AssertionFailedError  	11	2	replace
13	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]                AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	  	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	compilable	  [FE]  AssertionFailedError  	11	2	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n);  [CE]  incomparable  types:  Branch  and  Node  [FE]    AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n);	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	non-compiled	[CE]  incomparable  types:  Branch  and  Node	11	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	compilable	  [FE]  AssertionFailedError  	11	2	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	compilable	  [FE]  AssertionFailedError  	11	2	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND);  [CE]  incomparable  types:  Node  and  Branch  [FE]          AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND);	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	non-compiled	[CE]  incomparable  types:  Node  and  Branch	11	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  n);  [CE]  incomparable  types:  Branch  and  Node  [FE]    AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  n);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  n);	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	non-compiled	[CE]  incomparable  types:  Branch  and  Node	11	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(1));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(1));  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(1));	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
