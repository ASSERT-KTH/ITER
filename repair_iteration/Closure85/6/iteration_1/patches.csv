bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND,  outEdges.get(0));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND,  outEdges.get(0));  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(n.getValue()  ==  Branch.UNCOND,  outEdges.get(0));	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  n.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  n.getNext().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    	compilable	  [FE]  AssertionFailedError  	17	2	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  n.getNext().getType()  ==  Token.FUNCTION);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  n.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  n.getNext().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    	compilable	  [FE]  AssertionFailedError  	17	2	replace
4	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	17	10	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	17	10	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n  +  1);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n  +  1);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	17	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  outCfgNode);  [CE]  cannot  find  symbol  outCfgNode  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  outCfgNode);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  outCfgNode);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    	non-compiled	[CE]  cannot  find  symbol  outCfgNode	17	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n.getNext());  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n.getNext());	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    	compilable	  [FE]  AssertionFailedError  	17	2	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n.getNext());  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n.getNext());  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n.getNext());	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    	compilable	  [FE]  AssertionFailedError  	17	2	replace
10	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getValue()!=  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	9	10	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getValue()!=  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getValue()!=  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	9	10	replace
12	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	9	10	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	9	10	replace
14	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  &&  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  &&  outEdges.get(1).getValue()!=  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    	compilable	  [FE]  RuntimeException  	9	10	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  &&  outEdges.get(1).getValue()!=  Branch.UNCOND);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  &&  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  &&  outEdges.get(1).getValue()!=  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    	compilable	  [FE]  RuntimeException  	9	10	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  first  =  n.getNext();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Node  first  =  n.getNext();	      	compilable	  [FE]  AssertionFailedError  	13	2	replace
18	[BUG]  [BUGGY]  Node  first  =  n.getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  first  =  n.getNext();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Node  first  =  n.getNext();	      	compilable	  [FE]  AssertionFailedError  	13	2	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();	      	compilable	  [FE]  AssertionFailedError  	13	2	replace
20	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();	      	compilable	  [FE]  AssertionFailedError  	13	2	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  first  =  n.getFirstChild();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Node  first  =  n.getFirstChild();	      	compilable	  [FE]  AssertionFailedError  	13	2	replace
22	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  first  =  n.getFirstChild();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Node  first  =  n.getFirstChild();	      	compilable	  [FE]  AssertionFailedError  	13	2	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  first  =  n.getLastChild();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Node  first  =  n.getLastChild();	      	compilable	  [FE]  AssertionFailedError  	13	2	replace
24	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  first  =  n.getLastChild();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Node  first  =  n.getLastChild();	      	compilable	  [FE]  AssertionFailedError  	13	2	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  firstCfgNode  =  n.getLastChild();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Node  firstCfgNode  =  n.getLastChild();	      	compilable	  [FE]  AssertionFailedError  	13	2	replace
26	[BUG]  [BUGGY]  Node  firstCfgNode  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  firstCfgNode  =  n.getLastChild();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Node  firstCfgNode  =  n.getLastChild();	      	compilable	  [FE]  AssertionFailedError  	13	2	replace
27	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  firstCfgNode  =  n.getFirstChild();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Node  firstCfgNode  =  n.getFirstChild();	      	compilable	  [FE]  RuntimeException  	13	2	replace
28	[BUG]  [BUGGY]  Node  firstCfgNode  =  n.getFirstChild();  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  firstCfgNode  =  n.getFirstChild();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Node  firstCfgNode  =  n.getFirstChild();	      	compilable	  [FE]  RuntimeException  	13	2	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  firstCfgNode  =  n.getNext();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Node  firstCfgNode  =  n.getNext();	      	compilable	  [FE]  AssertionFailedError  	13	2	replace
30	[BUG]  [BUGGY]  Node  firstCfgNode  =  n.getNext();  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  firstCfgNode  =  n.getNext();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Node  firstCfgNode  =  n.getNext();	      	compilable	  [FE]  AssertionFailedError  	13	2	replace
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  AssertionFailedError  	2	2	add
32	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  AssertionFailedError  	2	2	add
33	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	2	10	add
34	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	2	10	add
35	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  ';'  expected	2	None	add
36	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  ';'  expected	2	None	add
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  AssertionFailedError  	2	2	add
38	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  AssertionFailedError  	2	2	add
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  AssertionFailedError  	2	2	add
40	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  AssertionFailedError  	2	2	add
41	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Context.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  Context  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Context.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Context.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  cannot  find  symbol  Context	2	None	add
42	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	2	10	add
43	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	2	10	add
44	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  RuntimeException  	4	10	add
45	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  RuntimeException  	4	10	add
46	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  RuntimeException  	4	10	add
47	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  RuntimeException  	4	10	add
48	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  RuntimeException  	4	10	add
49	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  RuntimeException  	4	10	add
50	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  RuntimeException  	4	10	add
51	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  RuntimeException  	4	10	add
52	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();	  	compilable	  [FE]  RuntimeException  	4	10	add
53	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();	  	compilable	  [FE]  RuntimeException  	4	10	add
54	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  >>  Branch.UNCOND);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  >>  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()  >>  Branch.UNCOND);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	4	None	add
55	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();	  	compilable	  [FE]  RuntimeException  	4	10	add
56	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();	  	compilable	  [FE]  RuntimeException  	4	10	add
57	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  >=  Branch.UNCOND);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  >=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()  >=  Branch.UNCOND);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	4	None	add
58	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()!=  Branch.UNCOND);  [CE]  incomparable  types:  Node  and  Branch  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getDestination().getValue()!=  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getDestination().getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  incomparable  types:  Node  and  Branch	18	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getDestination().getValue()  ==  Branch.UNCOND);  [CE]  incomparable  types:  Node  and  Branch  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getDestination().getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getDestination().getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getDestination().getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  incomparable  types:  Node  and  Branch	18	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(n.getDestination().getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(n.getDestination().getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(n.getDestination().getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getDestination().getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getType()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getType()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getDestination().getType()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getDestination().getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getDeestination().getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getDeestination().getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getDeestination().getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getDestination().getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getDeadExprStatement().getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getDeadExprStatement().getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getDeadExprStatement().getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getDestination().getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
64	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	11	10	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	11	10	replace
66	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	11	10	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	11	10	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(n.getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(n.getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(n.getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    	compilable	  [FE]  AssertionFailedError  	11	2	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [FE]  AssertionFailedError  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    	compilable	  [FE]  AssertionFailedError  	11	2	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(n.getValue()  ==  outEdges.get(0).getValue());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(n.getValue()  ==  outEdges.get(0).getValue());  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(n.getValue()  ==  outEdges.get(0).getValue());	  Preconditions.checkState(outEdges.get(0).getValue()    ==    n);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  n.getNext());  [CE]  incomparable  types:  Branch  and  Node  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  n.getNext());  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  n.getNext());	  Preconditions.checkState(outEdges.get(0).getValue()    ==    n);    	non-compiled	[CE]  incomparable  types:  Branch  and  Node	19	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  n);  [CE]  incomparable  types:  Branch  and  Node  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=  n);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    n);    	non-compiled	[CE]  incomparable  types:  Branch  and  Node	19	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  n.getFirstChild());  [CE]  incomparable  types:  Branch  and  Node  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  n.getFirstChild());  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  n.getFirstChild());	  Preconditions.checkState(outEdges.get(0).getValue()    ==    n);    	non-compiled	[CE]  incomparable  types:  Branch  and  Node	19	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  n.getNext());  [CE]  incomparable  types:  Branch  and  Node  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  n.getNext());  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=  n.getNext());	  Preconditions.checkState(outEdges.get(0).getValue()    ==    n);    	non-compiled	[CE]  incomparable  types:  Branch  and  Node	19	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  n.getFirstChild());  [CE]  incomparable  types:  Branch  and  Node  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  n.getFirstChild());  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=  n.getFirstChild());	  Preconditions.checkState(outEdges.get(0).getValue()    ==    n);    	non-compiled	[CE]  incomparable  types:  Branch  and  Node	19	None	replace
77	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	7	10	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	7	10	replace
79	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	7	10	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	7	10	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(n.getValue()!=  Branch.UNCOND);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(n.getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(n.getValue()!=  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getType()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getType()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getType()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getType()  ==  Token.UNCOND);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getType()  ==  Token.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getType()  ==  Token.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getValue()  ==  n);  [CE]  incomparable  types:  Branch  and  Node  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getValue()  ==  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getValue()  ==  n);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    n);    	non-compiled	[CE]  incomparable  types:  Branch  and  Node	14	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  n);  [CE]  incomparable  types:  Branch  and  Node  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  n);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    n);    	non-compiled	[CE]  incomparable  types:  Branch  and  Node	14	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.getNext());  [CE]  incomparable  types:  Branch  and  Node  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.getNext());  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.getNext());	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    n);    	non-compiled	[CE]  incomparable  types:  Branch  and  Node	14	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n);  [CE]  incomparable  types:  Branch  and  Node  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    n);    	non-compiled	[CE]  incomparable  types:  Branch  and  Node	14	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    n);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.getFirstChild());  [CE]  incomparable  types:  Branch  and  Node  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.getFirstChild());  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.getFirstChild());	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    n);    	non-compiled	[CE]  incomparable  types:  Branch  and  Node	14	None	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);	  	compilable	  [FE]  AssertionFailedError  	16	2	add
91	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);	  	compilable	  [FE]  AssertionFailedError  	16	2	add
92	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	16	10	add
93	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	16	10	add
94	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  outEdges  =  outEdges.get(0).getValue();  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  outEdges  =  outEdges.get(0).getValue();  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Node  outEdges  =  outEdges.get(0).getValue();  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);	  	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);	  	compilable	  [FE]  AssertionFailedError  	16	2	add
96	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);	  	compilable	  [FE]  AssertionFailedError  	16	2	add
97	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  outEdges  =  outEdges.get(0).getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  outEdges  =  outEdges.get(0).getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Node  outEdges  =  outEdges.get(0).getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);	  	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
98	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	16	10	add
99	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	16	10	add
100	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [CE]  cannot  find  symbol  preconditions  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	16	None	add
101	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);	  	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
102	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  RuntimeException  	8	2	add
103	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  RuntimeException  	8	2	add
104	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	8	10	add
105	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	8	10	add
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  AssertionFailedError  	8	2	add
107	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  AssertionFailedError  	8	2	add
108	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Node  outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Node  outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    Node  outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	  	non-compiled	[CE]  ';'  expected	8	None	add
109	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Node  outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Node  outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    Node  outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	  	non-compiled	[CE]  ';'  expected	8	None	add
110	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Context.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [CE]  cannot  find  symbol  Context  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Context.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    Context.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	  	non-compiled	[CE]  cannot  find  symbol  Context	8	None	add
111	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	8	10	add
112	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	8	10	add
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  AssertionFailedError  	8	2	add
114	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()!=  Branch.UNCOND);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  AssertionFailedError  	8	2	add
115	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0),  n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0),  n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0),  n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getType()  ==  Token.FUNCTION);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getType()  ==  Token.FUNCTION);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0),  outEdges.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0),  outEdges.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0),  outEdges.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
121	[BUG]  [BUGGY]      Node  nextCfgNode  =  n.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]      Node  nextCfgNode  =  n.getNext();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	        Node  nextCfgNode  =  n.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	12	None	add
122	[BUG]  [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND  ||  n.getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND  ||  n.getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(n.getValue()  ==  Branch.UNCOND  ||  n.getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(n.getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(n.getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND,  outEdges.size());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND,  outEdges.size());  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(n.getValue()  ==  Branch.UNCOND,  outEdges.size());	  Preconditions.checkState(n.getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND,  n.getNext());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND,  n.getNext());  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(n.getValue()  ==  Branch.UNCOND,  n.getNext());	  Preconditions.checkState(n.getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND,  n.getType()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND,  n.getType()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(n.getValue()  ==  Branch.UNCOND,  n.getType()  ==  Branch.UNCOND);	  Preconditions.checkState(n.getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(1));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(1));  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(1));	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    n.get(1));    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(1));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(1));  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(1));	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    n.get(1));    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  n.get(1));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  n.get(1));  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  n.get(1));	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    n.get(1));    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0),  n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(1));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0),  n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(1));  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0),  n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(1));	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    n.get(1));    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0),  outEdges.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(1));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0),  outEdges.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(1));  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0),  outEdges.getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(1));	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    n.get(1));    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(2));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(2));  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(2));	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    n.get(1));    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
133	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	10	10	add
134	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	10	10	add
135	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	10	10	add
136	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	10	10	add
137	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	10	10	add
138	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	10	10	add
139	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	10	10	add
140	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	10	10	add
141	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  ';'  expected	10	None	add
142	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  ';'  expected	10	None	add
143	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  ';'  expected	10	None	add
144	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0).getDestination();  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0).getDestination();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  outEdges  =  outEdges.get(0).getDestination();	  	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	10	None	add
145	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	6	10	add
146	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	6	10	add
147	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	6	10	add
148	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	6	10	add
149	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(2).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	6	10	add
150	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(2).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(2).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	6	10	add
151	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  outEdges  =  outEdges.get(0);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
152	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
153	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  outEdges  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
154	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  ';'  expected	6	None	add
155	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  ';'  expected  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  ';'  expected	6	None	add
156	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getType()  ==  Token.FUNCTION);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getType()  ==  Token.FUNCTION);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
157	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  RuntimeException  	4	10	add
158	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  RuntimeException  	4	10	add
159	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);	  	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
160	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  RuntimeException  	4	10	add
161	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  RuntimeException  	4	10	add
162	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);	  	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
163	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  NodeUtil.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  NodeUtil.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    NodeUtil.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
164	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  n,  outEdges.size());  [CE]  incomparable  types:  Branch  and  Node  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  n,  outEdges.size());  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  n,  outEdges.size());	  Preconditions.checkState(outEdges.get(0).getValue()    ==    n);    	non-compiled	[CE]  incomparable  types:  Branch  and  Node	19	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  n);  [CE]  incomparable  types:  Branch  and  Node  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()  ==  n);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    n);    	non-compiled	[CE]  incomparable  types:  Branch  and  Node	19	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  n,  outEdges.get(1));  [CE]  incomparable  types:  Branch  and  Node  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  n,  outEdges.get(1));  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  n,  outEdges.get(1));	  Preconditions.checkState(outEdges.get(0).getValue()    ==    n);    	non-compiled	[CE]  incomparable  types:  Branch  and  Node	19	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges.get(1).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  ';'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges.get(1).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  outEdges.get(1).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  ';'  expected	10	None	add
168	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	10	10	add
169	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	10	10	add
170	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	10	10	add
171	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	10	10	add
172	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  OutEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  not  a  statement  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  OutEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    OutEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  not  a  statement	10	None	add
173	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	6	10	add
174	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	6	10	add
175	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  first  =  outEdges.get(1).getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  incompatible  types  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  first  =  outEdges.get(1).getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  first  =  outEdges.get(1).getValue();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  incompatible  types	6	None	add
176	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0);  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  outEdges  =  outEdges.get(0);	  	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
177	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  outEdges  =  outEdges.get(0);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  outEdges  =  outEdges.get(0);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Node  outEdges  =  outEdges.get(0);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);	  	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
178	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  outEdges  =  outEdges.get(0);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  outEdges  =  outEdges.get(0);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Node  outEdges  =  outEdges.get(0);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);	  	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
179	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);	  	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
180	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [CE]  cannot  find  symbol  preconditions  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	16	None	add
181	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  n);  [CE]  incomparable  types:  Branch  and  Node  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  n);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    n);    	non-compiled	[CE]  incomparable  types:  Branch  and  Node	14	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Token.FUNCTION);  [CE]  incomparable  types:  Branch  and  int  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Token.FUNCTION);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Token.FUNCTION);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    n);    	non-compiled	[CE]  incomparable  types:  Branch  and  int	14	None	replace
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Node  first  =  outEdges.get(0).getDestination().getValue();	      	compilable	  [FE]  AssertionFailedError  	13	2	replace
184	[BUG]  [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Node  first  =  outEdges.get(0).getDestination().getValue();	      	compilable	  [FE]  AssertionFailedError  	13	2	replace
185	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();	      	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	13	10	replace
186	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();	      	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	13	10	replace
187	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  n.getEdges();  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  List  <  Node>  outEdges  =  n.getEdges();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	List  <  Node>  outEdges  =  n.getEdges();	      	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	13	None	replace
188	[BUG]  [BUGGY]  Node  outEdges  =  outEdges.get(0);  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Node  outEdges  =  outEdges.get(0);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Node  outEdges  =  outEdges.get(0);	      	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	13	None	replace
189	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  &&  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  &&  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    	compilable	  [FE]  RuntimeException  	11	10	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  &&  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  RuntimeException  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  &&  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  &&  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    	compilable	  [FE]  RuntimeException  	11	10	replace
191	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  outEdges.get(1));  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  outEdges.get(1));	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	17	10	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  outEdges.get(1));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  outEdges.get(1));  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  outEdges.get(1));	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	17	10	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n));  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n));	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    	non-compiled	[CE]  ';'  expected	17	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n  ||  outEdges.get(1).getType()  ==  Token.FUNCTION);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND,  outEdges.get(1));  [CE]  incomparable  types:  Node  and  Branch  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND,  outEdges.get(1));  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND,  outEdges.get(1));	  Preconditions.checkState(outEdges.get(0).getDestination().getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  incomparable  types:  Node  and  Branch	18	None	replace
196	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND,  n);  [CE]  incomparable  types:  Node  and  Branch  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND,  n);	  Preconditions.checkState(outEdges.get(0).getDestination().getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  incomparable  types:  Node  and  Branch	18	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getDestination().getValue()  ==  Branch.UNCOND);  [CE]  incomparable  types:  Node  and  Branch  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getDestination().getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getDestination().getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getDestination().getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  incomparable  types:  Node  and  Branch	18	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND  ||  outEdges.get(1)!=  n);  [CE]  incomparable  types:  Node  and  Branch  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND  ||  outEdges.get(1)!=  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND  ||  outEdges.get(1)!=  n);	  Preconditions.checkState(outEdges.get(0).getDestination().getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  incomparable  types:  Node  and  Branch	18	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  n.get(1));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  n.get(1));  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  n.get(1));	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    n.get(1));    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(n.getValue()  ==  Branch.UNCOND  ||  outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(n.getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
201	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	3	10	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  &&  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	3	10	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  OutEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  OutEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    OutEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	  	non-compiled	[CE]  not  a  statement	8	None	add
204	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	8	10	add
205	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()!=  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()!=  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	8	10	add
206	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  OutEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  OutEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    OutEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	  	non-compiled	[CE]  not  a  statement	8	None	add
207	[BUG]  [BUGGY]      Node  firstCfgNode  =  outEdges.get(n.getLastChild());  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]      Node  firstCfgNode  =  outEdges.get(n.getLastChild());  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	        Node  firstCfgNode  =  outEdges.get(n.getLastChild());	  	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	12	None	add
208	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  outEdges  =  outEdges.get(0);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	2	None	add
209	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	2	10	add
210	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	2	10	add
211	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  OutEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  OutEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    OutEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  not  a  statement	2	None	add
212	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  OutEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  OutEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    OutEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  not  a  statement	2	None	add
213	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  &&  n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  &&  n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    	compilable	  [FE]  RuntimeException  	5	10	replace
214	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  &&  n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  &&  n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  &&  n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    	compilable	  [FE]  RuntimeException  	5	10	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination()!=  Branch.UNCOND);  [CE]  incomparable  types:  DiGraphNode<Node,Branch>  and  Branch  [FE]      RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getDestination()!=  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    	non-compiled	[CE]  incomparable  types:  DiGraphNode<Node,Branch>  and  Branch	5	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(1));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(1));  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.get(1));	  Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
217	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n.getFirstChild());  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n.getFirstChild());	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    	compilable	  [FE]  AssertionFailedError  	17	2	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n.getFirstChild());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n.getFirstChild());  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n.getFirstChild());	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    	compilable	  [FE]  AssertionFailedError  	17	2	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  n,  Branch.UNCOND);  [CE]  incomparable  types:  Branch  and  Node  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  n,  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  n,  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    	non-compiled	[CE]  incomparable  types:  Branch  and  Node	17	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	  	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	8	None	add
221	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1)!=  n.getType()  {  Token.FUNCTION);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1)!=  n.getType()  {  Token.FUNCTION);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1)!=  n.getType()  {  Token.FUNCTION);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	15	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  n  =  outEdges.get(0).getValue();  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  n  =  outEdges.get(0).getValue();  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Node  n  =  outEdges.get(0).getValue();  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
223	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  outEdges  =  outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  outEdges  =  outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Node  outEdges  =  outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);	  	non-compiled	[CE]  ';'  expected	16	None	add
224	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  outEdges  =  outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  outEdges  =  outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Node  outEdges  =  outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND,  n);	  	non-compiled	[CE]  ';'  expected	16	None	add
225	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  outEdges  =  outEdges.get(0).getValue()  {  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  Node  outEdges  =  outEdges.get(0).getValue()  {  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND,    n);    Node  outEdges  =  outEdges.get(0).getValue()  {  Branch.UNCOND,  n);  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n);	  	non-compiled	[CE]  ';'  expected	16	None	add
226	[BUG]  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	        Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	12	None	add
227	[BUG]  [BUGGY]      List  <  Node>  outEdges  =  n.getOutEdges();  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]      List  <  Node>  outEdges  =  n.getOutEdges();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	        List  <  Node>  outEdges  =  n.getOutEdges();	  	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	12	None	add
228	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  n.get(1).getValue()  ==  n.get(1));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  n.get(1).getValue()  ==  n.get(1));  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  n.get(1).getValue()  ==  n.get(1));	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    n.get(1));    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  n  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [CE]  incomparable  types:  Branch  and  Node  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  n  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  n  ||  outEdges.get(1).getValue()!=  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()!=    Branch.UNCOND);    	non-compiled	[CE]  incomparable  types:  Branch  and  Node	9	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  first  =  outEdges.get(1).getValue()  ==  Branch.UNCOND;  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  incompatible  types  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  first  =  outEdges.get(1).getValue()  ==  Branch.UNCOND;  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  first  =  outEdges.get(1).getValue()  ==  Branch.UNCOND;  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  incompatible  types	6	None	add
231	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  first  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  first  =  outEdges.get(0).getDestination().getValue();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	6	10	add
232	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  first  =  outEdges.get(0).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  first  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  first  =  outEdges.get(0).getDestination().getValue();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	6	10	add
233	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(2).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	6	10	add
234	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(2).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  first  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(2).getValue()  ==  Branch.UNCOND);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	6	10	add
235	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    Branch.UNCOND);    Node  outEdges  =  outEdges.get(0).getDestination();  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  variable  outEdges  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	2	None	add
236	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.getChildCount());  [CE]  incomparable  types:  Branch  and  int  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.getChildCount());  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  n.getChildCount());	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND    ||    outEdges.get(1).getValue()    ==    n);    	non-compiled	[CE]  incomparable  types:  Branch  and  int	14	None	replace
237	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  n,  outEdges.get(0));  [CE]  incomparable  types:  Branch  and  Node  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  n,  outEdges.get(0));  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  n,  outEdges.get(0));	  Preconditions.checkState(outEdges.get(0).getValue()    ==    n);    	non-compiled	[CE]  incomparable  types:  Branch  and  Node	19	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND,  n.getFirst());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND,  n.getFirst());  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(n.getValue()  ==  Branch.UNCOND,  n.getFirst());	  Preconditions.checkState(n.getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  n);  [CE]  incomparable  types:  Branch  and  Node  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  n);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND  ||  outEdges.get(2).getValue()  ==  n);	  Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  incomparable  types:  Branch  and  Node	7	None	replace
240	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  2  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	Preconditions.checkState(outEdges.get(2).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  2  	7	10	replace
241	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(2).getValue()  ==  Branch.UNCOND);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  2  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(2).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(1).getValue()    ==    Branch.UNCOND);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  2  	7	10	replace
242	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
243	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.get(1).getValue()!=  Branch.UNCOND);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
244	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  first  =  outEdges.get(0).getValue()!=  Branch.UNCOND;  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [CE]  incompatible  types  [FE]        RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  first  =  outEdges.get(0).getValue()!=  Branch.UNCOND;  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Node  first  =  outEdges.get(0).getValue()!=  Branch.UNCOND;  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);	  	non-compiled	[CE]  incompatible  types	4	None	add
245	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=    Branch.UNCOND);    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
