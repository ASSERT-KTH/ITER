bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  n.cloneTree());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  n.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first,  n.cloneTree());	  return    tryRemoveUnconditionalBranching(first,    first.cloneTree());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	84	None	replace
2	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  outEdges.cloneTree());  [CE]  cannot  find  symbol  outEdges  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  outEdges.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first,  outEdges.cloneTree());	  return    tryRemoveUnconditionalBranching(first,    first.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  outEdges	84	None	replace
3	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.cloneTree(),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.cloneTree(),  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.cloneTree(),  outEdges);	  return    tryRemoveUnconditionalBranching(first,    first.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  outEdges	84	None	replace
4	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.cloneTree());  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode.cloneTree());	  return    tryRemoveUnconditionalBranching(first,    first.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
5	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.cloneTree());  [CE]  cannot  find  symbol  outEdges  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.cloneTree());	  return    tryRemoveUnconditionalBranching(first,    first.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  outEdges	84	None	replace
6	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.cloneTree(),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.cloneTree(),  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.cloneTree(),  n);	  return    tryRemoveUnconditionalBranching(first,    first.cloneTree());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	84	None	replace
7	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getParent());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getParent());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getParent());	  return    tryRemoveUnconditionalBranching(first.getParent());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	27	None	replace
8	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getValue());  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getValue());	  return    tryRemoveUnconditionalBranching(first.getParent());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
9	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  cfgStack);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  cfgStack);	  return    tryRemoveUnconditionalBranching(first,    cfgStack);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	105	None	replace
10	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  cfgStack);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  cfgStack);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  cfgStack);	  return    tryRemoveUnconditionalBranching(first,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	105	None	replace
11	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  curCfgNode,  cfgStack);  [CE]  cannot  find  symbol  curCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  curCfgNode,  cfgStack);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  curCfgNode,  cfgStack);	  return    tryRemoveUnconditionalBranching(first,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	105	None	replace
12	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  cfgStack,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  cfgStack,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  cfgStack,  outEdges);	  return    tryRemoveUnconditionalBranching(first,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  outEdges	105	None	replace
13	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  fallThrough,  cfgStack);  [CE]  cannot  find  symbol  fallThrough  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  fallThrough,  cfgStack);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  fallThrough,  cfgStack);	  return    tryRemoveUnconditionalBranching(first,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	105	None	replace
14	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  rootNode,  cfgStack);  [CE]  cannot  find  symbol  rootNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  rootNode,  cfgStack);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  rootNode,  cfgStack);	  return    tryRemoveUnconditionalBranching(first,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  rootNode	105	None	replace
15	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  cfgNode,  cfgStack);  [CE]  cannot  find  symbol  cfgNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  cfgNode,  cfgStack);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  cfgNode,  cfgStack);	  return    tryRemoveUnconditionalBranching(first,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	105	None	replace
16	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  n,  first);	  return    tryRemoveUnconditionalBranching(first.getString(),    first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	19	None	replace
17	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  first,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  first,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  first,  outEdges);	  return    tryRemoveUnconditionalBranching(first.getString(),    first);    	non-compiled	[CE]  cannot  find  symbol  outEdges	19	None	replace
18	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  nextCfgNode,  first);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  nextCfgNode,  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  nextCfgNode,  first);	  return    tryRemoveUnconditionalBranching(first.getString(),    first);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	19	None	replace
19	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  gNode,  first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  gNode,  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  gNode,  first);	  return    tryRemoveUnconditionalBranching(first.getString(),    first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	19	None	replace
20	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  fallThrough,  first);  [CE]  cannot  find  symbol  fallThrough  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  fallThrough,  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  fallThrough,  first);	  return    tryRemoveUnconditionalBranching(first.getString(),    first);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	19	None	replace
21	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getString(),  first);	  return    tryRemoveUnconditionalBranching(first.getString(),    first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	19	None	replace
22	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  OutEdges.size()  -  1);  [CE]  cannot  find  symbol  OutEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  OutEdges.size()  -  1);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  OutEdges.size()  -  1);	  return    tryRemoveUnconditionalBranching(first,    OutEdges.size());    	non-compiled	[CE]  cannot  find  symbol  OutEdges	112	None	replace
23	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(First,  outEdges.size());  [CE]  cannot  find  symbol  First  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(First,  outEdges.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(First,  outEdges.size());	  return    tryRemoveUnconditionalBranching(first,    OutEdges.size());    	non-compiled	[CE]  cannot  find  symbol  First	112	None	replace
24	[BUG]  [BUGGY]  Return  tryRemoveUnconditionalBranching(first,  outEdges.size());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Return  tryRemoveUnconditionalBranching(first,  outEdges.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Return  tryRemoveUnconditionalBranching(first,  outEdges.size());	  return    tryRemoveUnconditionalBranching(first,    OutEdges.size());    	non-compiled	[CE]  ';'  expected	112	None	replace
25	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  n,  outEdges);	  return    tryRemoveUnconditionalBranching(first.getNext(),    n);    	non-compiled	[CE]  cannot  find  symbol  outEdges	24	None	replace
26	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n,  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n,  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  n,  fallThrough);	  return    tryRemoveUnconditionalBranching(first.getNext(),    n);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	24	None	replace
27	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n,  rootNode);  [CE]  cannot  find  symbol  rootNode  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n,  rootNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  n,  rootNode);	  return    tryRemoveUnconditionalBranching(first.getNext(),    n);    	non-compiled	[CE]  cannot  find  symbol  rootNode	24	None	replace
28	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n,  first.cloneTree());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n,  first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  n,  first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.getNext(),    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	24	None	replace
29	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n,  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n,  cfgStack);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  n,  cfgStack);	  return    tryRemoveUnconditionalBranching(first.getNext(),    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	24	None	replace
30	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext(),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext(),  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getNext(),  n);	  return    tryRemoveUnconditionalBranching(first.getNext(),    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	24	None	replace
31	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n,  parent);  [CE]  cannot  find  symbol  parent  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n,  parent);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  n,  parent);	  return    tryRemoveUnconditionalBranching(first.getNext(),    n);    	non-compiled	[CE]  cannot  find  symbol  parent	24	None	replace
32	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.nextCfgNode);	  return    tryRemoveUnconditionalBranching(first,    n.outEdges);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	49	None	replace
33	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.inEdges);  [CE]  cannot  find  symbol  inEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.inEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.inEdges);	  return    tryRemoveUnconditionalBranching(first,    n.outEdges);    	non-compiled	[CE]  cannot  find  symbol  inEdges	49	None	replace
34	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeNoOpStatements);  [CE]  cannot  find  symbol  removeNoOpStatements  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeNoOpStatements);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.removeNoOpStatements);	  return    tryRemoveUnconditionalBranching(first,    n.outEdges);    	non-compiled	[CE]  cannot  find  symbol  removeNoOpStatements	49	None	replace
35	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.rootNode);  [CE]  cannot  find  symbol  rootNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.rootNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.rootNode);	  return    tryRemoveUnconditionalBranching(first,    n.outEdges);    	non-compiled	[CE]  cannot  find  symbol  rootNode	49	None	replace
36	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.get(0).cloneTree());  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.get(0).cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.get(0).cloneTree());	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(0).cloneTree());    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
37	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.get(0).cloneTree());  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.get(0).cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode.get(0).cloneTree());	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(0).cloneTree());    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
38	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.get(1).cloneTree());  [CE]  cannot  find  symbol  outEdges  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.get(1).cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.get(1).cloneTree());	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(0).cloneTree());    	non-compiled	[CE]  cannot  find  symbol  outEdges	131	None	replace
39	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.get(1).cloneTree());  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.get(1).cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.get(1).cloneTree());	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(0).cloneTree());    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
40	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.get(0).cloneTree());  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.get(0).cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.get(0).cloneTree());	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(0).cloneTree());    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
41	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges.get(0).cloneTree());  [CE]  cannot  find  symbol  outEdges  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges.get(0).cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(outEdges.get(0).cloneTree());	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(0).cloneTree());    	non-compiled	[CE]  cannot  find  symbol  outEdges	131	None	replace
42	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  removeNoOpStatements);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  removeNoOpStatements);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  removeNoOpStatements);	  return    tryRemoveUnconditionalBranching(first,    n,    exceptions);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	80	None	replace
43	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  throwThrough);  [CE]  cannot  find  symbol  throwThrough  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  throwThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  throwThrough);	  return    tryRemoveUnconditionalBranching(first,    n,    exceptions);    	non-compiled	[CE]  cannot  find  symbol  throwThrough	80	None	replace
44	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  breakThrough);  [CE]  cannot  find  symbol  breakThrough  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  breakThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  breakThrough);	  return    tryRemoveUnconditionalBranching(first,    n,    exceptions);    	non-compiled	[CE]  cannot  find  symbol  breakThrough	80	None	replace
45	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext(),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext(),  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getNext(),  outEdges);	  return    tryRemoveUnconditionalBranching(first,    n.getNext());    	non-compiled	[CE]  cannot  find  symbol  outEdges	22	None	replace
46	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext(),  n.getType());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext(),  n.getType());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getNext(),  n.getType());	  return    tryRemoveUnconditionalBranching(first,    n.getNext());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	22	None	replace
47	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext(),  n.getParent());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext(),  n.getParent());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getNext(),  n.getParent());	  return    tryRemoveUnconditionalBranching(first,    n.getNext());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	22	None	replace
48	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext(),  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext(),  cfgStack);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getNext(),  cfgStack);	  return    tryRemoveUnconditionalBranching(first,    n.getNext());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	22	None	replace
49	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	44	None	replace
50	[BUG]  [BUGGY]  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.getNext();	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	44	None	replace
51	[BUG]  [BUGGY]  Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	44	None	replace
52	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n.getNext());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  n.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	44	None	replace
53	[BUG]  [BUGGY]  Node  first  =  first.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getNext();	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	44	None	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  AssertionFailedError  	44	6	replace
55	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getNext());  [FE]  AssertionFailedError  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  AssertionFailedError  	44	6	replace
56	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  next  =  first.getNext();  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  next  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  next  =  first.getNext();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    next    =    first.getNext();    	non-compiled	[CE]  unreachable  statement	115	None	replace
57	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild());  Node  next  =  first.getNext();  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild());  Node  next  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getLastChild());  Node  next  =  first.getNext();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    next    =    first.getNext();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	115	None	replace
58	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  first.getNext());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  first.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  first.getNext());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    next    =    first.getNext();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	115	None	replace
59	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  next  =  n.getNext();  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  next  =  n.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  next  =  n.getNext();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    next    =    first.getNext();    	non-compiled	[CE]  unreachable  statement	115	None	replace
60	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  first.getValue());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  first.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  first.getValue());	  return    tryRemoveUnconditionalBranching(first.getString()    +    1);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
61	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n.getValue());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  n.getValue());	  return    tryRemoveUnconditionalBranching(first.getString()    +    1);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
62	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  second.getValue());  [CE]  cannot  find  symbol  second  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  second.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  second.getValue());	  return    tryRemoveUnconditionalBranching(first.getString()    +    1);    	non-compiled	[CE]  cannot  find  symbol  second	20	None	replace
63	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  last  =  first.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    	compilable	  [FE]  RuntimeException  	102	1	replace
64	[BUG]  [BUGGY]  Node  last  =  first.getLastChild();  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  last  =  first.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    	compilable	  [FE]  RuntimeException  	102	1	replace
65	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  last  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    	compilable	  [FE]  RuntimeException  	102	1	replace
66	[BUG]  [BUGGY]  Node  last  =  n.getLastChild();  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  last  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    	compilable	  [FE]  RuntimeException  	102	1	replace
67	[BUG]  [BUGGY]  Node  first  =  first.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	102	None	replace
68	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  last  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  last  =  first.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    	compilable	  [FE]  RuntimeException  	102	11	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  last  =  first.getLastChild();  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  last  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  last  =  first.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    	compilable	  [FE]  RuntimeException  	102	11	replace
70	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  last  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  last  =  first.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    	compilable	  [FE]  RuntimeException  	102	11	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  last  =  first.getLastChild();  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  last  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  last  =  first.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    	compilable	  [FE]  RuntimeException  	102	11	replace
72	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  last  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  last  =  first.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    	compilable	  [FE]  RuntimeException  	102	11	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  last  =  first.getLastChild();  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  last  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  last  =  first.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    	compilable	  [FE]  RuntimeException  	102	11	replace
74	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.CALL);  Node  last  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Preconditions.checkState(first.getType()  ==  Token.CALL);  Node  last  =  first.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    	compilable	  [FE]  RuntimeException  	102	11	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.CALL);  Node  last  =  first.getLastChild();  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.CALL);  Node  last  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.CALL);  Node  last  =  first.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    	compilable	  [FE]  RuntimeException  	102	11	replace
76	[BUG]  [BUGGY]  gNode.removeChild(first);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    gNode.removeChild(first);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
77	[BUG]  [BUGGY]  Node  first  =  first.cloneTree();  gNode.removeChild(first);  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.cloneTree();  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.cloneTree();  gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    gNode.removeChild(first);    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	97	None	replace
78	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.cloneTree());  gNode.removeChild(first);  [CE]  cannot  find  symbol  outEdges  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.cloneTree());  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.cloneTree());  gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    gNode.removeChild(first);    	non-compiled	[CE]  cannot  find  symbol  outEdges	97	None	replace
79	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  gNode.removeChild(first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    gNode.removeChild(first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	97	None	replace
80	[BUG]  [BUGGY]  removeChild(first.cloneTree());  [CE]  cannot  find  symbol  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  removeChild(first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	removeChild(first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    gNode.removeChild(first);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
81	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(n.cloneTree());  gNode.removeChild(first);  [CE]  cannot  find  symbol  [FE]                        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(n.cloneTree());  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(n.cloneTree());  gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    gNode.removeChild(first);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
82	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  gNode.removeChild(first);  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.cloneTree();  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.cloneTree();  gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    gNode.removeChild(first);    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	97	None	replace
83	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  fallThrough,  n);  [CE]  cannot  find  symbol  fallThrough  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  fallThrough,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  fallThrough,  n);	  return    tryRemoveUnconditionalBranching(first,    n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	128	None	replace
84	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first,  n);	  return    tryRemoveUnconditionalBranching(first,    n,    nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	128	None	replace
85	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  curCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  curCfgNode);	  return    tryRemoveUnconditionalBranching(first,    n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	128	None	replace
86	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first,  outEdges);	  return    tryRemoveUnconditionalBranching(first,    n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  outEdges	128	None	replace
87	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first,  fallThrough);	  return    tryRemoveUnconditionalBranching(first,    n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	128	None	replace
88	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  fallThrough);	  return    tryRemoveUnconditionalBranching(first.getNext(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	23	None	replace
89	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  first);	  return    tryRemoveUnconditionalBranching(first.getNext(),    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	23	None	replace
90	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  next);  [CE]  cannot  find  symbol  next  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  next);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  next);	  return    tryRemoveUnconditionalBranching(first.getNext(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  next	23	None	replace
91	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  collapse);  [CE]  cannot  find  symbol  collapse  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  collapse);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  collapse);	  return    tryRemoveUnconditionalBranching(first.getNext(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  collapse	23	None	replace
92	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  getCfgNode());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  getCfgNode());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  getCfgNode());	  return    tryRemoveUnconditionalBranching(first.getNext(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
93	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  first  =  first.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  first  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  first  =  first.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  first  =  first.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  first  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  first  =  first.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  first  =  first.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  first  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  first  =  first.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	replace
97	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  first.getLastChild());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  first.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  first.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	1	None	replace
98	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  first.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  first.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	replace
99	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(n.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
100	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(n.getDestination().getValue());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	33	None	replace
101	[BUG]  [BUGGY]  Node  firstCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(n.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
102	[BUG]  [BUGGY]  Node  nCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination().getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(n.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
103	[BUG]  [BUGGY]  Node  n  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination().getValue());  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  n  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  n  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination().getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(n.getDestination().getValue());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	33	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  first  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  first  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    n.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	5	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  first  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  first  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    n.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	5	None	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(n.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	return  tryRemoveUnconditionalBranching(n.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	5	3	replace
107	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(n.getLastChild());  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(n.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(n.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	5	3	replace
108	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.getFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.getFirstChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    n.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	5	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  first  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  first  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    n.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	5	None	replace
110	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(n.getLastChild());  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(n.getLastChild());  Node  first  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(n.getLastChild());  Node  first  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    n.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	5	None	replace
111	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.get(1));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.get(1));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.get(1));	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(1));    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
112	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nextCfgNode.get(1));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nextCfgNode.get(1));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  nextCfgNode.get(1));	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(1));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	11	None	replace
113	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.get(1));  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.get(1));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode.get(1));	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(1));    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
114	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.get(2));  [CE]  cannot  find  symbol  outEdges  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.get(2));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.get(2));	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(1));    	non-compiled	[CE]  cannot  find  symbol  outEdges	11	None	replace
115	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.outEdges.get(0));  [CE]  cannot  find  symbol  outEdges  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.outEdges.get(0));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.outEdges.get(0));	  return    tryRemoveUnconditionalBranching(first,    n.outEdges.get(0));    	non-compiled	[CE]  cannot  find  symbol  outEdges	12	None	replace
116	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.get(2));  [CE]  cannot  find  symbol  outEdges  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.get(2));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.outEdges.get(2));	  return    tryRemoveUnconditionalBranching(first,    n.outEdges.get(0));    	non-compiled	[CE]  cannot  find  symbol  outEdges	12	None	replace
117	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.inEdges.get(0));  [CE]  cannot  find  symbol  inEdges  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.inEdges.get(0));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.inEdges.get(0));	  return    tryRemoveUnconditionalBranching(first,    n.outEdges.get(0));    	non-compiled	[CE]  cannot  find  symbol  inEdges	12	None	replace
118	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.outEdges.get(0));  [CE]  cannot  find  symbol  outEdges  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.outEdges.get(0));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode.outEdges.get(0));	  return    tryRemoveUnconditionalBranching(first,    n.outEdges.get(0));    	non-compiled	[CE]  cannot  find  symbol  outEdges	12	None	replace
119	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.outEdges.get(1));  [CE]  cannot  find  symbol  outEdges  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.outEdges.get(1));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.outEdges.get(1));	  return    tryRemoveUnconditionalBranching(first,    n.outEdges.get(0));    	non-compiled	[CE]  cannot  find  symbol  outEdges	12	None	replace
120	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  n,  outEdges);	  return    tryRemoveUnconditionalBranching(first.getString(),    n);    	non-compiled	[CE]  cannot  find  symbol  outEdges	15	None	replace
121	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  first.cloneTree());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  n,  first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.getString(),    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	15	None	replace
122	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  rootNode);  [CE]  cannot  find  symbol  rootNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  rootNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  n,  rootNode);	  return    tryRemoveUnconditionalBranching(first.getString(),    n);    	non-compiled	[CE]  cannot  find  symbol  rootNode	15	None	replace
123	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  n,  fallThrough);	  return    tryRemoveUnconditionalBranching(first.getString(),    n);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	15	None	replace
124	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  parent);  [CE]  cannot  find  symbol  parent  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  parent);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  n,  parent);	  return    tryRemoveUnconditionalBranching(first.getString(),    n);    	non-compiled	[CE]  cannot  find  symbol  parent	15	None	replace
125	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  cfgStack);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  n,  cfgStack);	  return    tryRemoveUnconditionalBranching(first.getString(),    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	15	None	replace
126	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  second);  [CE]  cannot  find  symbol  second  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  second);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  n,  second);	  return    tryRemoveUnconditionalBranching(first.getString(),    n);    	non-compiled	[CE]  cannot  find  symbol  second	15	None	replace
127	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  last  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  last  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	114	11	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  last  =  n.getLastChild();  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  last  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  last  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	114	11	replace
129	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  last  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  last  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	114	11	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  last  =  n.getLastChild();  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  last  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  last  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	114	11	replace
131	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  last  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  last  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	114	11	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  last  =  n.getLastChild();  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  last  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  last  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	114	11	replace
133	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.EXPR_RESULT);  Node  last  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Preconditions.checkState(first.getType()  ==  Token.EXPR_RESULT);  Node  last  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	114	11	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.EXPR_RESULT);  Node  last  =  n.getLastChild();  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.EXPR_RESULT);  Node  last  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.EXPR_RESULT);  Node  last  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	114	11	replace
135	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.CALL);  Node  last  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Preconditions.checkState(first.getType()  ==  Token.CALL);  Node  last  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	114	11	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.CALL);  Node  last  =  n.getLastChild();  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.CALL);  Node  last  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.CALL);  Node  last  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	114	11	replace
137	[BUG]  [BUGGY]  Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	93	None	replace
138	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue());    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
139	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue());    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
140	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getValue());  [CE]  cannot  find  symbol  outEdges  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getValue());	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue());    	non-compiled	[CE]  cannot  find  symbol  outEdges	93	None	replace
141	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	93	None	replace
142	[BUG]  [BUGGY]  Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getValue());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getValue());	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	93	None	replace
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	126	2	replace
144	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first);  [FE]  AssertionFailedError  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	126	2	replace
145	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  StackOverflowError  	126	11	replace
146	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n);  [FE]  StackOverflowError  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  StackOverflowError  	126	11	replace
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	126	6	replace
148	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode);  [FE]  AssertionFailedError  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	126	6	replace
149	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n,  nextCfgNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n,  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n,  nextCfgNode);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	126	None	replace
150	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  noOpStatements);  [CE]  cannot  find  symbol  noOpStatements  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  noOpStatements);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  noOpStatements);	  return    tryRemoveUnconditionalBranching(first,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	45	None	replace
151	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.next);  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.next);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.next);	  return    tryRemoveUnconditionalBranching(first,    fallThrough);    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	45	None	replace
152	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(last.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  last  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(last.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    last    =    first.cloneTree();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	compilable	  [FE]  RuntimeException  	59	1	replace
153	[BUG]  [BUGGY]  Node  last  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(last.cloneTree());  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(last.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  last  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(last.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    last    =    first.cloneTree();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	compilable	  [FE]  RuntimeException  	59	1	replace
154	[BUG]  [BUGGY]  Node  first  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    last    =    first.cloneTree();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	59	None	replace
155	[BUG]  [BUGGY]  Node  first  =  last.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  last.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  last.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    last    =    first.cloneTree();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	59	None	replace
156	[BUG]  [BUGGY]  Node  first  =  first.cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    last    =    first.cloneTree();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	59	None	replace
157	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  last  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    last    =    first.cloneTree();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	compilable	  [FE]  RuntimeException  	59	1	replace
158	[BUG]  [BUGGY]  Node  last  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [FE]  RuntimeException  [FE]                          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  last  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    last    =    first.cloneTree();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	compilable	  [FE]  RuntimeException  	59	1	replace
159	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  last  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    last    =    first.cloneTree();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	compilable	  [FE]  RuntimeException  	59	1	replace
160	[BUG]  [BUGGY]  Node  last  =  first.cloneTree();  [FE]  RuntimeException  [FE]                            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  last  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    last    =    first.cloneTree();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	compilable	  [FE]  RuntimeException  	59	1	replace
161	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  n  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	n  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    n    =    first.cloneTree();    	compilable	  [FE]  RuntimeException  	96	1	replace
162	[BUG]  [BUGGY]  n  =  first.cloneTree();  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  n  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	n  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    n    =    first.cloneTree();    	compilable	  [FE]  RuntimeException  	96	1	replace
163	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n);  n  =  first.cloneTree();  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n);  n  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  n);  n  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    n    =    first.cloneTree();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	96	None	replace
164	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  n  =  first.cloneTree();  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  n  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  n  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    n    =    first.cloneTree();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	96	None	replace
165	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.next);  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.next);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.next);	  return    tryRemoveUnconditionalBranching(first,    next);    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	117	None	replace
166	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nCfgNode);  [CE]  cannot  find  symbol  nCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  nCfgNode);	  return    tryRemoveUnconditionalBranching(first,    next);    	non-compiled	[CE]  cannot  find  symbol  nCfgNode	117	None	replace
167	[BUG]  [BUGGY]  Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(first.getLastChild());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	replace
168	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(first.getLastChild());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	replace
169	[BUG]  [BUGGY]  Node  first  =  first.getFirstChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getFirstChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getFirstChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(first.getLastChild());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	replace
170	[BUG]  [BUGGY]  Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild(),  first);  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild(),  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild(),  first);	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(first.getLastChild());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	replace
171	[BUG]  [BUGGY]  Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first,  n.getLastChild());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first,  n.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first,  n.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(first.getLastChild());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	replace
172	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getString(),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getString(),  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.getString(),  outEdges);	  return    tryRemoveUnconditionalBranching(first,    first.getString());    	non-compiled	[CE]  cannot  find  symbol  outEdges	18	None	replace
173	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  n.getString());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  n.getString());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first,  n.getString());	  return    tryRemoveUnconditionalBranching(first,    first.getString());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	18	None	replace
174	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getString(),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getString(),  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.getString(),  n);	  return    tryRemoveUnconditionalBranching(first,    first.getString());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	18	None	replace
175	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  outEdges.getString());  [CE]  cannot  find  symbol  outEdges  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  outEdges.getString());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first,  outEdges.getString());	  return    tryRemoveUnconditionalBranching(first,    first.getString());    	non-compiled	[CE]  cannot  find  symbol  outEdges	18	None	replace
176	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.getString());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.getString());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode.getString());	  return    tryRemoveUnconditionalBranching(first,    first.getString());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
177	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  outEdges.size());  [CE]  cannot  find  symbol  outEdges  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  outEdges.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  outEdges.size());	  return    tryRemoveUnconditionalBranching(first,    inEdges.size());    	non-compiled	[CE]  cannot  find  symbol  outEdges	67	None	replace
178	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  n.getLastChild());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  n.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  n.getLastChild());	  return    tryRemoveBlock(first.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
179	[BUG]  [BUGGY]  return  tryRemoveBlock(first.getLastChild(),  n);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first.getLastChild(),  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first.getLastChild(),  n);	  return    tryRemoveBlock(first.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
180	[BUG]  [BUGGY]  return  tryRemoveBlock(n.getLastChild());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(n.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(n.getLastChild());	  return    tryRemoveBlock(first.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
181	[BUG]  [BUGGY]  return  tryRemoveBlock(first.getLastChild(),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first.getLastChild(),  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first.getLastChild(),  outEdges);	  return    tryRemoveBlock(first.getLastChild());    	non-compiled	[CE]  cannot  find  symbol  outEdges	53	None	replace
182	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  outEdges.getLastChild());  [CE]  cannot  find  symbol  outEdges  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  outEdges.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  outEdges.getLastChild());	  return    tryRemoveBlock(first.getLastChild());    	non-compiled	[CE]  cannot  find  symbol  outEdges	53	None	replace
183	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  firstCfgNode  =  first.getNext();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.getNext();    	compilable	  [FE]  RuntimeException  	118	1	replace
184	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext();  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  first.getNext();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.getNext();    	compilable	  [FE]  RuntimeException  	118	1	replace
185	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  first.getNext());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  first.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  first.getNext());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.getNext();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	118	None	replace
186	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  firstCfgNode  =  first.getNext();  [CE]  unreachable  statement  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  firstCfgNode  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  firstCfgNode  =  first.getNext();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.getNext();    	non-compiled	[CE]  unreachable  statement	118	None	replace
187	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  nextCfgNode.getNext());  [CE]  cannot  find  symbol  nextCfgNode  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  nextCfgNode.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  nextCfgNode.getNext());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.getNext();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	118	None	replace
188	[BUG]  [BUGGY]  Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	34	None	replace
189	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
190	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getDestination().getValue());  [CE]  cannot  find  symbol  outEdges  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getDestination().getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol  outEdges	34	None	replace
191	[BUG]  [BUGGY]  Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getDestination().getValue());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getDestination().getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	34	None	replace
192	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  n.getValue());  [CE]  cannot  find  symbol  [FE]                        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  n.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  n.getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
193	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getNext());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getLastChild();    return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	99	None	replace
194	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first.getNext());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getLastChild();    return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	99	None	replace
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(n.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(n.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getLastChild();    return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  AssertionFailedError  	99	6	replace
196	[BUG]  [BUGGY]  Node  next  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(n.getNext());  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(n.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(n.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getLastChild();    return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  AssertionFailedError  	99	6	replace
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(n.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	return  tryRemoveUnconditionalBranching(n.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getLastChild();    return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  AssertionFailedError  	99	6	replace
198	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(n.getNext());  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(n.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(n.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getLastChild();    return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  AssertionFailedError  	99	6	replace
199	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  first);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	73	None	replace
200	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild(),  first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild(),  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getFirstChild(),  first);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	73	None	replace
201	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  fallThrough,  first);  [CE]  cannot  find  symbol  fallThrough  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  fallThrough,  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  fallThrough,  first);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    first);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	73	None	replace
202	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  first);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	73	None	replace
203	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  first,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  first,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  first,  outEdges);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    first);    	non-compiled	[CE]  cannot  find  symbol  outEdges	73	None	replace
204	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  gNode,  first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  gNode,  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  gNode,  first);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	73	None	replace
205	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  outEdges,  null);  [CE]  cannot  find  symbol  outEdges  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  outEdges,  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  outEdges,  null);	  return    tryRemoveUnconditionalBranching(first,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  outEdges	110	None	replace
206	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  null,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  null,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  null,  outEdges);	  return    tryRemoveUnconditionalBranching(first,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  outEdges	110	None	replace
207	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  fallThrough,  null);  [CE]  cannot  find  symbol  fallThrough  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  fallThrough,  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  fallThrough,  null);	  return    tryRemoveUnconditionalBranching(first,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	110	None	replace
208	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  rootNode,  null);  [CE]  cannot  find  symbol  rootNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  rootNode,  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  rootNode,  null);	  return    tryRemoveUnconditionalBranching(first,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  rootNode	110	None	replace
209	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  exceptions,  null);  [CE]  cannot  find  symbol  exceptions  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  exceptions,  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  exceptions,  null);	  return    tryRemoveUnconditionalBranching(first,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  exceptions	110	None	replace
210	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  n,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  n,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first,  n,  outEdges);	  return    tryRemoveUnconditionalBranching(first,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  outEdges	110	None	replace
211	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  fallThrough);	  return    tryRemoveUnconditionalBranching(first.getString(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	17	None	replace
212	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  next);  [CE]  cannot  find  symbol  next  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  next);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  next);	  return    tryRemoveUnconditionalBranching(first.getString(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  next	17	None	replace
213	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  gNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  gNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  gNode);	  return    tryRemoveUnconditionalBranching(first.getString(),    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	17	None	replace
214	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  last);  [CE]  cannot  find  symbol  last  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  last);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  last);	  return    tryRemoveUnconditionalBranching(first.getString(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  last	17	None	replace
215	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.size()  -  1);  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.size()  -  1);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.outEdges.size()  -  1);	  return    tryRemoveUnconditionalBranching(first,    n.outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  outEdges	63	None	replace
216	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.size()  +  1);  [CE]  cannot  find  symbol  outEdges  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.size()  +  1);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.outEdges.size()  +  1);	  return    tryRemoveUnconditionalBranching(first,    n.outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  outEdges	63	None	replace
217	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.inEdges.size());  [CE]  cannot  find  symbol  inEdges  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.inEdges.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.inEdges.size());	  return    tryRemoveUnconditionalBranching(first,    n.outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  inEdges	63	None	replace
218	[BUG]  [BUGGY]  Return  tryRemoveUnconditionalBranching(first,  n.outEdges.size());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Return  tryRemoveUnconditionalBranching(first,  n.outEdges.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Return  tryRemoveUnconditionalBranching(first,  n.outEdges.size());	  return    tryRemoveUnconditionalBranching(first,    n.outEdges.size());    	non-compiled	[CE]  ';'  expected	63	None	replace
219	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.getNext());  gNode.removeChild(first);  [CE]  cannot  find  symbol  outEdges  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.getNext());  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.getNext());  gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.getNext());    gNode.removeChild(first);    	non-compiled	[CE]  cannot  find  symbol  outEdges	122	None	replace
220	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(n.getNext());  gNode.removeChild(first);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(n.getNext());  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(n.getNext());  gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.getNext());    gNode.removeChild(first);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
221	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext());  gNode.removeChild(first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext());  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getNext());  gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.getNext());    gNode.removeChild(first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	122	None	replace
222	[BUG]  [BUGGY]  Node  first  =  first.getNext();  gNode.removeChild(first);  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getNext();  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getNext();  gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.getNext());    gNode.removeChild(first);    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	122	None	replace
223	[BUG]  [BUGGY]  removeChild(first.getNext());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  removeChild(first.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	removeChild(first.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    gNode.removeChild(first);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
224	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  next,  outEdges);  [CE]  cannot  find  symbol  next  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  next,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  next,  outEdges);	  return    tryRemoveUnconditionalBranching(first,    n,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  next	75	None	replace
225	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  n.outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  n.outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first,  n.outEdges);	  return    tryRemoveUnconditionalBranching(first,    n,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  outEdges	75	None	replace
226	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getLastChild();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	58	None	replace
227	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getLastChild();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	58	None	replace
228	[BUG]  [BUGGY]  Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getLastChild();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	58	None	replace
229	[BUG]  [BUGGY]  Node  first  =  first.getFirstChild();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getFirstChild();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getFirstChild();  return  tryRemoveUnconditionalBranching(first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getLastChild();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	58	None	replace
230	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n.getLastChild());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  n.getLastChild());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getLastChild();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	58	None	replace
231	[BUG]  [BUGGY]  gNode.removeChild(first);  return  tryRemoveUnconditionalBranching(first.getNext());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  gNode.removeChild(first);  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	gNode.removeChild(first);  return  tryRemoveUnconditionalBranching(first.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    gNode.removeChild(first);    return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
232	[BUG]  [BUGGY]  gNode.removeChild(first);  return  tryRemoveUnconditionalBranching(first,  outEdges.getNext());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  gNode.removeChild(first);  return  tryRemoveUnconditionalBranching(first,  outEdges.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	gNode.removeChild(first);  return  tryRemoveUnconditionalBranching(first,  outEdges.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    gNode.removeChild(first);    return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
233	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  n.removeChild(first);  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	n.removeChild(first);  return  tryRemoveUnconditionalBranching(first.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    gNode.removeChild(first);    return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  AssertionFailedError  	123	11	replace
234	[BUG]  [BUGGY]  n.removeChild(first);  return  tryRemoveUnconditionalBranching(first.getNext());  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  n.removeChild(first);  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	n.removeChild(first);  return  tryRemoveUnconditionalBranching(first.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    gNode.removeChild(first);    return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  AssertionFailedError  	123	11	replace
235	[BUG]  [BUGGY]  removeChild(first);  return  tryRemoveUnconditionalBranching(first.getNext());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  removeChild(first);  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	removeChild(first);  return  tryRemoveUnconditionalBranching(first.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    gNode.removeChild(first);    return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
236	[BUG]  [BUGGY]  removeChild(first.getNext());  return  tryRemoveUnconditionalBranching(first.getNext());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  removeChild(first.getNext());  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	removeChild(first.getNext());  return  tryRemoveUnconditionalBranching(first.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    gNode.removeChild(first);    return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
237	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    next    =    first.cloneTree();    	compilable	  [FE]  RuntimeException  	94	1	replace
238	[BUG]  [BUGGY]  Node  next  =  first.cloneTree();  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    next    =    first.cloneTree();    	compilable	  [FE]  RuntimeException  	94	1	replace
239	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  Node  next  =  first.cloneTree();  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  Node  next  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  Node  next  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    next    =    first.cloneTree();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	94	None	replace
240	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  first.cloneTree());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    next    =    first.cloneTree();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	94	None	replace
241	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.clone());  Node  next  =  first.cloneTree();  [CE]  clone()  has  protected  access  in  Object  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.clone());  Node  next  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.clone());  Node  next  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    next    =    first.cloneTree();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	94	None	replace
242	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  second.cloneTree());  [CE]  cannot  find  symbol  second  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  second.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  second.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    next    =    first.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  second	94	None	replace
243	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  next  =  first.cloneTree();  [CE]  unreachable  statement  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  next  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext());  Node  next  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    next    =    first.cloneTree();    	non-compiled	[CE]  unreachable  statement	94	None	replace
244	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getFirstChild());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getFirstChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.getFirstChild());	  return    tryRemoveUnconditionalBranching(first,    first.get(0));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	13	None	replace
245	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getValue());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.getValue());	  return    tryRemoveUnconditionalBranching(first,    first.get(0));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
246	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  outEdges.get(0));  [CE]  cannot  find  symbol  outEdges  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  outEdges.get(0));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first,  outEdges.get(0));	  return    tryRemoveUnconditionalBranching(first,    first.get(0));    	non-compiled	[CE]  cannot  find  symbol  outEdges	13	None	replace
247	[BUG]  [BUGGY]  Node  first  =  first.getLastChild();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getLastChild();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getLastChild();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.getLastChild());    }    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	replace
248	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getLastChild();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(n.getLastChild());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  first.getLastChild();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(n.getLastChild());  }	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	4	3	replace
249	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getLastChild();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(n.getLastChild());  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getLastChild();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(n.getLastChild());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getLastChild();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(n.getLastChild());  }	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	4	3	replace
250	[BUG]  [BUGGY]  Node  first  =  first.getLastChild();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  }  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getLastChild();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getLastChild();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  }	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.getLastChild());    }    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	replace
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(n.getLastChild());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  first.getNext();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(n.getLastChild());  }	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	4	3	replace
252	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(n.getLastChild());  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(n.getLastChild());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(n.getLastChild());  }	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	4	3	replace
253	[BUG]  [BUGGY]  Node  first  =  first.getLastChild();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first.getFirstChild());  }  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getLastChild();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first.getFirstChild());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getLastChild();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first.getFirstChild());  }	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.getLastChild());    }    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	replace
254	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  first.getNext());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  first.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  first.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    next    =    first.getNext();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	43	None	replace
255	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  Node  next  =  first.getNext();  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  Node  next  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getParent());  Node  next  =  first.getNext();	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    next    =    first.getNext();    	non-compiled	[CE]  unreachable  statement	43	None	replace
256	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  fallThrough);	  return    tryRemoveUnconditionalBranching(first.cloneTree(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	83	None	replace
257	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree(),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree(),  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.cloneTree(),  outEdges);	  return    tryRemoveUnconditionalBranching(first.cloneTree(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  outEdges	83	None	replace
258	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  first);	  return    tryRemoveUnconditionalBranching(first.cloneTree(),    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	83	None	replace
259	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  gNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  gNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  gNode);	  return    tryRemoveUnconditionalBranching(first.cloneTree(),    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	83	None	replace
260	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  next);  [CE]  cannot  find  symbol  next  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  next);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  next);	  return    tryRemoveUnconditionalBranching(first.cloneTree(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  next	83	None	replace
261	[BUG]  [BUGGY]  Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getParent());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getParent());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getParent());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	39	None	replace
262	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  n  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	n  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  RuntimeException  	39	10	replace
263	[BUG]  [BUGGY]  n  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getNext());  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  n  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	n  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  RuntimeException  	39	10	replace
264	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  null);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  n,  null);	  return    tryRemoveUnconditionalBranching(first.getString(),    null);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	130	None	replace
265	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  null,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  null,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  null,  outEdges);	  return    tryRemoveUnconditionalBranching(first.getString(),    null);    	non-compiled	[CE]  cannot  find  symbol  outEdges	130	None	replace
266	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  first,  null);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  first,  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  first,  null);	  return    tryRemoveUnconditionalBranching(first.getString(),    null);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	130	None	replace
267	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  gNode,  null);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  gNode,  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  gNode,  null);	  return    tryRemoveUnconditionalBranching(first.getString(),    null);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	130	None	replace
268	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  null);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getString(),  null);	  return    tryRemoveUnconditionalBranching(first.getString(),    null);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	130	None	replace
269	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  nextCfgNode,  null);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  nextCfgNode,  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  nextCfgNode,  null);	  return    tryRemoveUnconditionalBranching(first.getString(),    null);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	130	None	replace
270	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getValue(),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getValue(),  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getValue(),  nextCfgNode);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue(),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
271	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getValue(),  nextCfgNode);  [CE]  cannot  find  symbol  outEdges  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getValue(),  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getValue(),  nextCfgNode);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue(),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  outEdges	124	None	replace
272	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n.getValue(),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n.getValue(),  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n.getValue(),  nextCfgNode);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue(),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
273	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue(),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue(),  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue(),  nextCfgNode);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue(),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
274	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue(),  last);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue(),  last);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue(),  last);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue(),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
275	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue(),  second);  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue(),  second);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue(),  second);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue(),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
276	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  first  =  first.cloneNode();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  first  =  first.cloneNode();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneNode());    Node  first  =  first.cloneNode();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	add
277	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  first  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneNode());    Node  first  =  n.getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	add
278	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  first  =  first.cloneNode();  return  tryRemoveUnconditionalBranching(first.cloneNode());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  first  =  first.cloneNode();  return  tryRemoveUnconditionalBranching(first.cloneNode());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneNode());    Node  first  =  first.cloneNode();  return  tryRemoveUnconditionalBranching(first.cloneNode());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	add
279	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.cloneNode());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.cloneNode());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneNode());    Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.cloneNode());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	add
280	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  return  tryRemoveUnconditionalBranching(first.cloneNode());  [CE]  unreachable  statement  [FE]            RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  return  tryRemoveUnconditionalBranching(first.cloneNode());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneNode());    return  tryRemoveUnconditionalBranching(first.cloneNode());	  	non-compiled	[CE]  unreachable  statement	85	None	add
281	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  first  =  n.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  first  =  n.getFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneNode());    Node  first  =  n.getFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	add
282	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first.cloneNode());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first.cloneNode());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneNode());    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first.cloneNode());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	add
283	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneNode());  [CE]  unreachable  statement  [FE]                  RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneNode());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneNode());    Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneNode());	  	non-compiled	[CE]  unreachable  statement	85	None	add
284	[BUG]  [BUGGY]  Node  first  =  first.getLastChild();  gNode.removeChild(first);  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getLastChild();  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getLastChild();  gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.getLastChild());    gNode.removeChild(first);    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	116	None	replace
285	[BUG]  [BUGGY]  removeChild(first.getLastChild());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  removeChild(first.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	removeChild(first.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    gNode.removeChild(first);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
286	[BUG]  [BUGGY]  Node  first  =  gNode.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  gNode.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  gNode.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    gNode.removeChild(first);    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	116	None	replace
287	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  gNode.removeChild(first);  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.getLastChild();  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.getLastChild();  gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.getLastChild());    gNode.removeChild(first);    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	116	None	replace
288	[BUG]  [BUGGY]  Node  first  =  gNode.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  gNode.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  gNode.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    gNode.removeChild(first);    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	116	None	replace
289	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  n.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  n.getNext();	  Node    nextCfgNode    =    first.getNext();    	compilable	  [FE]  RuntimeException  	29	1	replace
290	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  n.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  n.getNext();	  Node    nextCfgNode    =    first.getNext();    	compilable	  [FE]  RuntimeException  	29	1	replace
291	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext()  &&  first.getChildCount()  ==  1)  {  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext()  &&  first.getChildCount()  ==  1)  {  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext()  &&  first.getChildCount()  ==  1)  {  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());	  Node    nextCfgNode    =    first.getNext();    	non-compiled	[CE]  ';'  expected	29	None	replace
292	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext()  &&  first.getChildCount()  ==  1)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext()  &&  first.getChildCount()  ==  1)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext()  &&  first.getChildCount()  ==  1)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());	  Node    nextCfgNode    =    first.getNext();    	non-compiled	[CE]  ';'  expected	29	None	replace
293	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  first.getLastChild();	  Node    nextCfgNode    =    first.getNext();    	compilable	  [FE]  RuntimeException  	29	1	replace
294	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getLastChild();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getLastChild();	  Node    nextCfgNode    =    first.getNext();    	compilable	  [FE]  RuntimeException  	29	1	replace
295	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext()  &&  first.getChildCount()  ==  1)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext()  &&  first.getChildCount()  ==  1)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext()  &&  first.getChildCount()  ==  1)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));	  Node    nextCfgNode    =    first.getNext();    	non-compiled	[CE]  ';'  expected	29	None	replace
296	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext()  :  null;  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext()  :  null;  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext()  :  null;	  Node    nextCfgNode    =    first.getNext();    	non-compiled	[CE]  ';'  expected	29	None	replace
297	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    n.getLastChild();    return    tryRemoveUnconditionalBranching(first.getLastChild());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	replace
298	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getFirstChild());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getFirstChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getFirstChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    n.getLastChild();    return    tryRemoveUnconditionalBranching(first.getLastChild());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	replace
299	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(last.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(last.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(last.getLastChild());    	compilable	  [FE]  RuntimeException  	8	8	replace
300	[BUG]  [BUGGY]  Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(last.getLastChild());  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(last.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(last.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(last.getLastChild());    	compilable	  [FE]  RuntimeException  	8	8	replace
301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(last.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  last  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(last.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(last.getLastChild());    	compilable	  [FE]  AssertionFailedError  	8	2	replace
302	[BUG]  [BUGGY]  Node  last  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(last.getLastChild());  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(last.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  last  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(last.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(last.getLastChild());    	compilable	  [FE]  AssertionFailedError  	8	2	replace
303	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  first.getFirstChild();  return  tryRemoveUnconditionalBranching(last.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  last  =  first.getFirstChild();  return  tryRemoveUnconditionalBranching(last.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(last.getLastChild());    	compilable	  [FE]  RuntimeException  	8	8	replace
304	[BUG]  [BUGGY]  Node  last  =  first.getFirstChild();  return  tryRemoveUnconditionalBranching(last.getLastChild());  [FE]  RuntimeException  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  first.getFirstChild();  return  tryRemoveUnconditionalBranching(last.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  last  =  first.getFirstChild();  return  tryRemoveUnconditionalBranching(last.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(last.getLastChild());    	compilable	  [FE]  RuntimeException  	8	8	replace
305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  last  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(last.getLastChild());    	compilable	  [FE]  AssertionFailedError  	8	2	replace
306	[BUG]  [BUGGY]  Node  last  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [FE]  AssertionFailedError  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  last  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(last.getLastChild());    	compilable	  [FE]  AssertionFailedError  	8	2	replace
307	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  n);	  return    tryRemoveUnconditionalBranching(first,    nextCfgNode,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	129	None	replace
308	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  curCfgNode,  n);  [CE]  cannot  find  symbol  curCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  curCfgNode,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  curCfgNode,  n);	  return    tryRemoveUnconditionalBranching(first,    nextCfgNode,    n);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	129	None	replace
309	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  first);	  return    tryRemoveUnconditionalBranching(first,    nextCfgNode,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	129	None	replace
310	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges,  n);  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges,  n);	  return    tryRemoveUnconditionalBranching(first,    nextCfgNode,    n);    	non-compiled	[CE]  cannot  find  symbol  outEdges	129	None	replace
311	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  root);  [CE]  cannot  find  symbol  root  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  root);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  root);	  return    tryRemoveUnconditionalBranching(first,    n,    rootEdges);    	non-compiled	[CE]  cannot  find  symbol  root	109	None	replace
312	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  	non-compiled	[CE]  unreachable  statement	87	None	add
313	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  if(first  ==  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  if(first  ==  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    if(first  ==  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  	non-compiled	[CE]  unreachable  statement	87	None	add
314	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalyzer.computeFollowNode(first));  }  [CE]  cannot  find  symbol  ControlFlowAnalyzer  [FE]        AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalyzer.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalyzer.computeFollowNode(first));  }	  	non-compiled	[CE]  cannot  find  symbol  ControlFlowAnalyzer	87	None	add
315	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  attemptRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  attemptRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  attemptRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  	non-compiled	[CE]  cannot  find  symbol	87	None	add
316	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  if(first  >=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  if(first  >=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    if(first  >=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	87	None	add
317	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    nextCfgNode    =    first.getNext();    Node  nextCfgNode  =  first.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	28	None	add
318	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getNext();  }  else  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  'else'  without  'if'  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getNext();  }  else  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    nextCfgNode    =    first.getNext();    Node  nextCfgNode  =  first.getNext();  }  else  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  	non-compiled	[CE]  'else'  without  'if'	28	None	add
319	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getNext();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getNext();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    nextCfgNode    =    first.getNext();    Node  nextCfgNode  =  first.getNext();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	28	None	add
320	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    nextCfgNode    =    first.getNext();    Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	28	None	add
321	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getNext();  }  else  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getNext();  }  else  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    nextCfgNode    =    first.getNext();    Node  nextCfgNode  =  first.getNext();  }  else  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	28	None	add
322	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getNext();  }  else  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first).getValue());  }  [CE]  'else'  without  'if'  [FE]              RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getNext();  }  else  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first).getValue());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    nextCfgNode    =    first.getNext();    Node  nextCfgNode  =  first.getNext();  }  else  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first).getValue());  }	  	non-compiled	[CE]  'else'  without  'if'	28	None	add
323	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getNext();  }  else  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  [CE]  'else'  without  'if'  [FE]                RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getNext();  }  else  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    nextCfgNode    =    first.getNext();    Node  nextCfgNode  =  first.getNext();  }  else  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }	  	non-compiled	[CE]  'else'  without  'if'	28	None	add
324	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getNext();  }  else  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  'else'  without  'if'  [FE]                  RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getNext();  }  else  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    nextCfgNode    =    first.getNext();    Node  nextCfgNode  =  first.getNext();  }  else  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	  	non-compiled	[CE]  'else'  without  'if'	28	None	add
325	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  next);  [CE]  cannot  find  symbol  next  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  next);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  next);	  return    tryRemoveUnconditionalBranching(first,    n,    rootNode);    	non-compiled	[CE]  cannot  find  symbol  next	77	None	replace
326	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  Node  first  =  first.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  Node  first  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getParent());    Node  first  =  first.getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	26	None	add
327	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  return  tryRemoveUnconditionalBranching(first.getParent());  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  return  tryRemoveUnconditionalBranching(first.getParent());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getParent());    return  tryRemoveUnconditionalBranching(first.getParent());	  	non-compiled	[CE]  unreachable  statement	26	None	add
328	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getParent());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getParent());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getParent());    Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getParent());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	26	None	add
329	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  Node  first  =  first.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  Node  first  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getParent());    Node  first  =  first.getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	26	None	add
330	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  Node  first  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getParent());    Node  first  =  n.getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	26	None	add
331	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getParent());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getParent());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getParent());    Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getParent());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	26	None	add
332	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getParent());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getParent());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getParent());    Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getParent());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	26	None	add
333	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  Node  first  =  first.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  Node  first  =  first.getFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getParent());    Node  first  =  first.getFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	26	None	add
334	[BUG]  [BUGGY]  Node  next  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());	  Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
335	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getDestination().getValue());  [CE]  cannot  find  symbol  outEdges  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getDestination().getValue());	  Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol  outEdges	35	None	replace
336	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination().getValue());	  Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
337	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  next.getValue());  [CE]  cannot  find  symbol  [FE]                        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  next.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  next.getValue());	  Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
338	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  outEdges);	  return    tryRemoveUnconditionalBranching(first,    n.getLastChild());    	non-compiled	[CE]  cannot  find  symbol  outEdges	71	None	replace
339	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  n);	  return    tryRemoveUnconditionalBranching(first,    n.getLastChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	71	None	replace
340	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  n.getType());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  n.getType());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  n.getType());	  return    tryRemoveUnconditionalBranching(first,    n.getLastChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	71	None	replace
341	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  true);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  true);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  true);	  return    tryRemoveUnconditionalBranching(first,    n.getLastChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	71	None	replace
342	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  null);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  null);	  return    tryRemoveUnconditionalBranching(first,    n.getLastChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	71	None	replace
343	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n.getLastChild());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  n.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getLastChild();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	40	None	replace
344	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(n.getNext());  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(n.getNext());  Node  first  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(n.getNext());  Node  first  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	40	None	replace
345	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  fallThrough,  first);  [CE]  cannot  find  symbol  fallThrough  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  fallThrough,  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  fallThrough,  first);	  return    tryRemoveUnconditionalBranching(first,    first);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	48	None	replace
346	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.inEdges.get(1));  [CE]  cannot  find  symbol  inEdges  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.inEdges.get(1));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.inEdges.get(1));	  return    tryRemoveUnconditionalBranching(first,    n.outEdges.get(1));    	non-compiled	[CE]  cannot  find  symbol  inEdges	101	None	replace
347	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.outEdges.get(1));  [CE]  cannot  find  symbol  outEdges  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.outEdges.get(1));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode.outEdges.get(1));	  return    tryRemoveUnconditionalBranching(first,    n.outEdges.get(1));    	non-compiled	[CE]  cannot  find  symbol  outEdges	101	None	replace
348	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  fallThrough);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	72	None	replace
349	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  gNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  gNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  gNode);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	72	None	replace
350	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  next);  [CE]  cannot  find  symbol  next  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  next);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  next);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  next	72	None	replace
351	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  null);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  null);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	72	None	replace
352	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneNode());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneNode());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.cloneNode());	  return    tryRemoveUnconditionalBranching(first.cloneNode());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	86	None	replace
353	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode(),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode(),  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneNode(),  n);	  return    tryRemoveUnconditionalBranching(first.cloneNode());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	86	None	replace
354	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.cloneNode());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.cloneNode());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.cloneNode());	  return    tryRemoveUnconditionalBranching(first.cloneNode());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	86	None	replace
355	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneFollowNode());  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneFollowNode());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneFollowNode());	  return    tryRemoveUnconditionalBranching(first.cloneNode());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
356	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.getOutEdges());  [CE]  cannot  find  symbol  outEdges  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.getOutEdges());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.getOutEdges());	  return    tryRemoveUnconditionalBranching(first,    n.getOutEdges());    	non-compiled	[CE]  cannot  find  symbol  outEdges	65	None	replace
357	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  outEdges.getOutEdges());  [CE]  cannot  find  symbol  outEdges  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  outEdges.getOutEdges());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  outEdges.getOutEdges());	  return    tryRemoveUnconditionalBranching(first,    n.getOutEdges());    	non-compiled	[CE]  cannot  find  symbol  outEdges	65	None	replace
358	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.getOutEdges());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.getOutEdges());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode.getOutEdges());	  return    tryRemoveUnconditionalBranching(first,    n.getOutEdges());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	65	None	replace
359	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getInEdges());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getInEdges());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getInEdges());	  return    tryRemoveUnconditionalBranching(first,    n.getOutEdges());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
360	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getDestination());  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getDestination());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getDestination());	  return    tryRemoveUnconditionalBranching(first,    n.getOutEdges());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
361	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getEdges());  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getEdges());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getEdges());	  return    tryRemoveUnconditionalBranching(first,    n.getOutEdges());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
362	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n.cloneTree());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  n.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    first.cloneTree();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	54	None	replace
363	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  Node  first  =  first.cloneTree();  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  Node  first  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  Node  first  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    first.cloneTree();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	54	None	replace
364	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.cloneTree());  Node  first  =  first.cloneTree();  [CE]  cannot  find  symbol  outEdges  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.cloneTree());  Node  first  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.cloneTree());  Node  first  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    first.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  outEdges	54	None	replace
365	[BUG]  [BUGGY]  Node  node  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  node  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  node  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination().getValue());	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(node.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
366	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.size()  -  1);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.size()  -  1);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.size()  -  1);	  return    tryRemoveUnconditionalBranching(first,    outEdges.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
367	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  inEdges.size()  -  1);  [CE]  cannot  find  symbol  inEdges  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  inEdges.size()  -  1);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  inEdges.size()  -  1);	  return    tryRemoveUnconditionalBranching(first,    outEdges.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  inEdges	66	None	replace
368	[BUG]  [BUGGY]  Node  next  =  n.getNext();  return  tryRemoveUnconditionalBranching(first,  next);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  n.getNext();  return  tryRemoveUnconditionalBranching(first,  next);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  n.getNext();  return  tryRemoveUnconditionalBranching(first,  next);	          Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first,    next);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	74	None	replace
369	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  next,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  next,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  next,  outEdges);	          Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first,    next);    	non-compiled	[CE]  cannot  find  symbol  outEdges	74	None	replace
370	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n);	          Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first,    next);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	74	None	replace
371	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n,  next);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n,  next);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n,  next);	          Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first,    next);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	74	None	replace
372	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode);	          Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first,    next);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	74	None	replace
373	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(n,  next);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(n,  next);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(n,  next);	          Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first,    next);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	74	None	replace
374	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  n.getFirstChild());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  n.getFirstChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  n.getFirstChild());	  return    tryRemoveBlock(first.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
375	[BUG]  [BUGGY]  return  tryRemoveBlock(n.getFirstChild());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(n.getFirstChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(n.getFirstChild());	  return    tryRemoveBlock(first.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
376	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  outEdges.getFirstChild());  [CE]  cannot  find  symbol  outEdges  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  outEdges.getFirstChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  outEdges.getFirstChild());	  return    tryRemoveBlock(first.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  outEdges	106	None	replace
377	[BUG]  [BUGGY]  return  tryRemoveBlock(first.getFirstChild(),  n);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first.getFirstChild(),  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first.getFirstChild(),  n);	  return    tryRemoveBlock(first.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
378	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  outEdges.get(0));  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  outEdges.get(0));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  outEdges.get(0));	  return    tryRemoveUnconditionalBranching(first,    n.get(0));    	non-compiled	[CE]  cannot  find  symbol  outEdges	9	None	replace
379	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getValue());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getValue());	  return    tryRemoveUnconditionalBranching(first,    n.get(0));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
380	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  outEdges.get(1));  [CE]  cannot  find  symbol  outEdges  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  outEdges.get(1));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  outEdges.get(1));	  return    tryRemoveUnconditionalBranching(first,    n.get(0));    	non-compiled	[CE]  cannot  find  symbol  outEdges	9	None	replace
381	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	compilable	  [FE]  RuntimeException  	60	1	replace
382	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	compilable	  [FE]  RuntimeException  	60	1	replace
383	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	compilable	  [FE]  RuntimeException  	60	1	replace
384	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [FE]  RuntimeException  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	compilable	  [FE]  RuntimeException  	60	1	replace
385	[BUG]  [BUGGY]  Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	60	None	replace
386	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	compilable	  [FE]  RuntimeException  	60	1	replace
387	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.cloneTree());  [FE]  RuntimeException  [FE]                          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	compilable	  [FE]  RuntimeException  	60	1	replace
388	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Node  next  =  first.getNext();  [CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Node  next  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Node  next  =  first.getNext();	  	non-compiled	[CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	add
389	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Node  first  =  first.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Node  first  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Node  first  =  first.getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	add
390	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Node  second  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node    next    =    first.getNext();    Node  second  =  first.getNext();	  	compilable	  [FE]  AssertionFailedError  	30	2	add
391	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Node  second  =  first.getNext();  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Node  second  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Node  second  =  first.getNext();	  	compilable	  [FE]  AssertionFailedError  	30	2	add
392	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Node  next  =  second.getNext();  [CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Node  next  =  second.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Node  next  =  second.getNext();	  	non-compiled	[CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	add
393	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Node  next  =  n.getNext();  [CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Node  next  =  n.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Node  next  =  n.getNext();	  	non-compiled	[CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	add
394	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Node  next  =  first.getNext();  break;  [CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Node  next  =  first.getNext();  break;  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Node  next  =  first.getNext();  break;	  	non-compiled	[CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	add
395	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  n  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node    next    =    first.getNext();    n  =  first.getNext();	  	compilable	  [FE]  AssertionFailedError  	30	2	add
396	[BUG]  [BUGGY]  Node  next  =  first.getNext();  n  =  first.getNext();  [FE]  AssertionFailedError  [FE]                RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  n  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    n  =  first.getNext();	  	compilable	  [FE]  AssertionFailedError  	30	2	add
397	[BUG]  [BUGGY]  Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first.cloneTree());  }  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first.cloneTree());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first.cloneTree());  }	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    first.cloneTree();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.cloneTree());    }    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	56	None	replace
398	[BUG]  [BUGGY]  Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  }  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  }	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    first.cloneTree();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.cloneTree());    }    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	56	None	replace
399	[BUG]  [BUGGY]  Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(1).getDestination().getValue());  }  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(1).getDestination().getValue());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(1).getDestination().getValue());  }	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    first.cloneTree();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.cloneTree());    }    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	56	None	replace
400	[BUG]  [BUGGY]  Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(second.cloneTree());  }  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(second.cloneTree());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(second.cloneTree());  }	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    first.cloneTree();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.cloneTree());    }    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	56	None	replace
401	[BUG]  [BUGGY]  Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(First.cloneTree());  }  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(First.cloneTree());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(First.cloneTree());  }	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    first.cloneTree();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.cloneTree());    }    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	56	None	replace
402	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	57	None	replace
403	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  Node  first  =  n.getLastChild();  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  Node  first  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  Node  first  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getLastChild();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	57	None	replace
404	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(n.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(n.getLastChild());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	57	3	replace
405	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(n.getLastChild());  [FE]  AssertionFailedError  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(n.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(n.getLastChild());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	57	3	replace
406	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	57	1	replace
407	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getLastChild();  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	57	1	replace
408	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  first.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  first.getFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getFirstChild());    Node  first  =  first.getFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	add
409	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  return  tryRemoveUnconditionalBranching(first.getFirstChild());  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  return  tryRemoveUnconditionalBranching(first.getFirstChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getFirstChild());    return  tryRemoveUnconditionalBranching(first.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	68	None	add
410	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getFirstChild());    Node  first  =  n.getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	add
411	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  first.getFirstChild();  return  tryRemoveUnconditionalBranching(first.getFirstChild());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  first.getFirstChild();  return  tryRemoveUnconditionalBranching(first.getFirstChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getFirstChild());    Node  first  =  first.getFirstChild();  return  tryRemoveUnconditionalBranching(first.getFirstChild());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	add
412	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getFirstChild());    Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	add
413	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getFirstChild());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getFirstChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getFirstChild());    Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getFirstChild());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	add
414	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getFirstChild());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getFirstChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getFirstChild());    Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getFirstChild());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	add
415	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  outEdges);	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  outEdges	32	None	replace
416	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  fallThrough);	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	32	None	replace
417	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  removeNoOpStatements);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  removeNoOpStatements);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  removeNoOpStatements);	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first,    nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	32	None	replace
418	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode);	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first,    nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	32	None	replace
419	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  n);	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first,    nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	32	None	replace
420	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n);	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first,    nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	32	None	replace
421	[BUG]  [BUGGY]  Node  first  =  first.getNext();  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getNext();  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getNext();  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    next    =    first.getNext();    if(next!=    null)    {    return    tryRemoveUnconditionalBranching(first.getNext());    }    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	121	None	replace
422	[BUG]  [BUGGY]  Node  next  =  first.getNext();  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(n.getDestination().getValue());  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(n.getDestination().getValue());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(n.getDestination().getValue());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    next    =    first.getNext();    if(next!=    null)    {    return    tryRemoveUnconditionalBranching(first.getNext());    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
423	[BUG]  [BUGGY]  Node  first  =  first.getNext();  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getNext();  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getNext();  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    next    =    first.getNext();    if(next!=    null)    {    return    tryRemoveUnconditionalBranching(first.getNext());    }    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	121	None	replace
424	[BUG]  [BUGGY]  Node  first  =  first.getNext();  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  }  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getNext();  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getNext();  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    next    =    first.getNext();    if(next!=    null)    {    return    tryRemoveUnconditionalBranching(first.getNext());    }    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	121	None	replace
425	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  first.getNext();  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    next    =    first.getNext();    if(next!=    null)    {    return    tryRemoveUnconditionalBranching(first.getNext());    }    	compilable	  [FE]  AssertionFailedError  	121	6	replace
426	[BUG]  [BUGGY]  Node  next  =  first.getNext();  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    next    =    first.getNext();    if(next!=    null)    {    return    tryRemoveUnconditionalBranching(first.getNext());    }    	compilable	  [FE]  AssertionFailedError  	121	6	replace
427	[BUG]  [BUGGY]  Node  first  =  first.getNext();  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  }  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getNext();  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getNext();  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    next    =    first.getNext();    if(next!=    null)    {    return    tryRemoveUnconditionalBranching(first.getNext());    }    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	121	None	replace
428	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(n.cloneTree());  Node  first  =  n.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(n.cloneTree());  Node  first  =  n.getFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(n.cloneTree());  Node  first  =  n.getFirstChild();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	61	None	replace
429	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n.getFirstChild());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n.getFirstChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  n.getFirstChild());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getFirstChild();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	61	None	replace
430	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(n.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	return  tryRemoveUnconditionalBranching(n.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	61	1	replace
431	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(n.cloneTree());  [FE]  RuntimeException  [FE]                          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(n.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(n.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	61	1	replace
432	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  first  =  n.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  first  =  n.getFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  first  =  n.getFirstChild();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	61	None	replace
433	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  n.getNext());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  n.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  n.getNext());	  return    tryRemoveBlock(first.getNext());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
434	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  outEdges.getNext());  [CE]  cannot  find  symbol  outEdges  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  outEdges.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  outEdges.getNext());	  return    tryRemoveBlock(first.getNext());    	non-compiled	[CE]  cannot  find  symbol  outEdges	52	None	replace
435	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  first.getNext());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  first.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  first.getNext());	  return    tryRemoveBlock(first.getNext());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
436	[BUG]  [BUGGY]  return  tryRemoveBlock(first.getNext(),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first.getNext(),  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first.getNext(),  outEdges);	  return    tryRemoveBlock(first.getNext());    	non-compiled	[CE]  cannot  find  symbol  outEdges	52	None	replace
437	[BUG]  [BUGGY]  return  tryRemoveBlock(first.getNext(),  n);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first.getNext(),  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first.getNext(),  n);	  return    tryRemoveBlock(first.getNext());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
438	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  node.outEdges.size());  [CE]  package  node  does  not  exist  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  node.outEdges.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  node.outEdges.size());	  return    tryRemoveUnconditionalBranching(first,    gNode.outEdges.size());    	non-compiled	[CE]  package  node  does  not  exist	111	None	replace
439	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nodes.size());  [CE]  cannot  find  symbol  nodes  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nodes.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  nodes.size());	  return    tryRemoveUnconditionalBranching(first,    gNode.outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  nodes	111	None	replace
440	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  NodeUtil.removeChild(first,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	NodeUtil.removeChild(first,  n);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    NodeUtil.removeChild(first,    n);    	compilable	  [FE]  AssertionFailedError  	120	11	replace
441	[BUG]  [BUGGY]  NodeUtil.removeChild(first,  n);  [FE]  AssertionFailedError  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  NodeUtil.removeChild(first,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	NodeUtil.removeChild(first,  n);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    NodeUtil.removeChild(first,    n);    	compilable	  [FE]  AssertionFailedError  	120	11	replace
442	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  NodeUtil.removeChild(n,  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	NodeUtil.removeChild(n,  first);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    NodeUtil.removeChild(first,    n);    	compilable	  [FE]  AssertionFailedError  	120	11	replace
443	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  first);  [FE]  AssertionFailedError  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  NodeUtil.removeChild(n,  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	NodeUtil.removeChild(n,  first);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    NodeUtil.removeChild(first,    n);    	compilable	  [FE]  AssertionFailedError  	120	11	replace
444	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(gNode,  first,  n,  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(gNode,  first,  n,  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(gNode,  first,  n,  fallThrough);	  return    tryRemoveUnconditionalBranching(gNode,    first,    n);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	78	None	replace
445	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  gNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  gNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  gNode);	  return    tryRemoveUnconditionalBranching(gNode,    first,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	78	None	replace
446	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(gNode,  first,  n,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(gNode,  first,  n,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(gNode,  first,  n,  outEdges);	  return    tryRemoveUnconditionalBranching(gNode,    first,    n);    	non-compiled	[CE]  cannot  find  symbol  outEdges	78	None	replace
447	[BUG]  [BUGGY]  Return  tryRemoveUnconditionalBranching(first,  gNode,  n);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Return  tryRemoveUnconditionalBranching(first,  gNode,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Return  tryRemoveUnconditionalBranching(first,  gNode,  n);	  return    tryRemoveUnconditionalBranching(gNode,    first,    n);    	non-compiled	[CE]  ';'  expected	78	None	replace
448	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode,  outEdges);	  return    tryRemoveUnconditionalBranching(gNode,    first,    n);    	non-compiled	[CE]  cannot  find  symbol  outEdges	78	None	replace
449	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  n,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  n,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  n,  outEdges);	  return    tryRemoveBlock(first,    n);    	non-compiled	[CE]  cannot  find  symbol  outEdges	51	None	replace
450	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  n.cloneTree());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  n.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  n.cloneTree());	  return    tryRemoveBlock(first,    n);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
451	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  n.nextChild());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  n.nextChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  n.nextChild());	  return    tryRemoveBlock(first,    n);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
452	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  n.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  n.getNext();	  Node    next    =    first.getNext();    	compilable	  [FE]  RuntimeException  	31	1	replace
453	[BUG]  [BUGGY]  Node  next  =  n.getNext();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  n.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  n.getNext();	  Node    next    =    first.getNext();    	compilable	  [FE]  RuntimeException  	31	1	replace
454	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  first.getLastChild();	  Node    next    =    first.getNext();    	compilable	  [FE]  RuntimeException  	31	1	replace
455	[BUG]  [BUGGY]  Node  next  =  first.getLastChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getLastChild();	  Node    next    =    first.getNext();    	compilable	  [FE]  RuntimeException  	31	1	replace
456	[BUG]  [BUGGY]  Node  next  =  first.getNext()  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext()  -  1;  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext()  -  1;	  Node    next    =    first.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	31	None	replace
457	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first!=  null?  first.getNext()  :  null;  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  first!=  null?  first.getNext()  :  null;	  Node    next    =    first.getNext();    	compilable	  [FE]  RuntimeException  	31	1	replace
458	[BUG]  [BUGGY]  Node  next  =  first!=  null?  first.getNext()  :  null;  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first!=  null?  first.getNext()  :  null;  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first!=  null?  first.getNext()  :  null;	  Node    next    =    first.getNext();    	compilable	  [FE]  RuntimeException  	31	1	replace
459	[BUG]  [BUGGY]  Node  next  =  first.getNext(),  n.getLastChild());  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext(),  n.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext(),  n.getLastChild());	  Node    next    =    first.getNext();    	non-compiled	[CE]  ';'  expected	31	None	replace
460	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first  ==  null?  first.getNext()  :  null;  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  first  ==  null?  first.getNext()  :  null;	  Node    next    =    first.getNext();    	compilable	  [FE]  RuntimeException  	31	1	replace
461	[BUG]  [BUGGY]  Node  next  =  first  ==  null?  first.getNext()  :  null;  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first  ==  null?  first.getNext()  :  null;  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first  ==  null?  first.getNext()  :  null;	  Node    next    =    first.getNext();    	compilable	  [FE]  RuntimeException  	31	1	replace
462	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.get(2));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.get(2));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.get(2));	  return    tryRemoveUnconditionalBranching(first,    n.get(1));    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
463	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  first  =  n.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  first  =  n.getNext();	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	41	None	replace
464	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	41	None	replace
465	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  first  =  n.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  first  =  n.getNext();	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	41	None	replace
466	[BUG]  [BUGGY]  Preconditions.checkState(first!=  null);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first!=  null);  Node  first  =  n.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first!=  null);  Node  first  =  n.getNext();	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	41	None	replace
467	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  next  =  first.getLastChild();  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  next  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  next  =  first.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    next    =    first.getLastChild();    	non-compiled	[CE]  unreachable  statement	113	None	replace
468	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    next    =    first.getLastChild();    	compilable	  [FE]  RuntimeException  	113	1	replace
469	[BUG]  [BUGGY]  Node  next  =  n.getLastChild();  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    next    =    first.getLastChild();    	compilable	  [FE]  RuntimeException  	113	1	replace
470	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  first.getFirstChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    next    =    first.getLastChild();    	compilable	  [FE]  RuntimeException  	113	1	replace
471	[BUG]  [BUGGY]  Node  next  =  first.getFirstChild();  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getFirstChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    next    =    first.getLastChild();    	compilable	  [FE]  RuntimeException  	113	1	replace
472	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  curCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  curCfgNode);	  return    tryRemoveUnconditionalBranching(first,    cfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	104	None	replace
473	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  root);  [CE]  cannot  find  symbol  root  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  root);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  root);	  return    tryRemoveUnconditionalBranching(first,    cfgNode);    	non-compiled	[CE]  cannot  find  symbol  root	104	None	replace
474	[BUG]  [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  not  a  statement	92	None	replace
475	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	compilable	  [FE]  AssertionFailedError  	92	2	replace
476	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  [FE]  AssertionFailedError  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	compilable	  [FE]  AssertionFailedError  	92	2	replace
477	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	compilable	  [FE]  AssertionFailedError  	92	2	replace
478	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  [FE]  AssertionFailedError  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	compilable	  [FE]  AssertionFailedError  	92	2	replace
479	[BUG]  [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(n.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(n.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null)  {  return  tryRemoveUnconditionalBranching(n.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  not  a  statement	92	None	replace
480	[BUG]  [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  not  a  statement	92	None	replace
481	[BUG]  [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(second));  }  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(second));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(second));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  not  a  statement	92	None	replace
482	[BUG]  [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(child));  }  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(child));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(child));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  not  a  statement	92	None	replace
483	[BUG]  [BUGGY]  Return  tryRemoveUnconditionalBranching(first,  n,  gNode);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Return  tryRemoveUnconditionalBranching(first,  n,  gNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Return  tryRemoveUnconditionalBranching(first,  n,  gNode);	  return    tryRemoveUnconditionalBranching(first,    gNode,    n);    	non-compiled	[CE]  ';'  expected	107	None	replace
484	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode,  fallThrough,  n);  [CE]  cannot  find  symbol  fallThrough  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode,  fallThrough,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode,  fallThrough,  n);	  return    tryRemoveUnconditionalBranching(first,    gNode,    n);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	107	None	replace
485	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent!=  null  &&  parent.getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  not  a  statement	91	None	replace
486	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent!=  null  &&  parent.getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  not  a  statement	91	None	replace
487	[BUG]  [BUGGY]  parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  not  a  statement	91	None	replace
488	[BUG]  [BUGGY]  parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.FUNCTION)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.FUNCTION)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.FUNCTION)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  not  a  statement	91	None	replace
489	[BUG]  [BUGGY]  parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.FUNCTION)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.FUNCTION)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.FUNCTION)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  not  a  statement	91	None	replace
490	[BUG]  [BUGGY]  parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  not  a  statement	91	None	replace
491	[BUG]  [BUGGY]  parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  not  a  statement	91	None	replace
492	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree(),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree(),  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.cloneTree(),  n);	  return    tryRemoveUnconditionalBranching(first,    n.cloneTree());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	81	None	replace
493	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree(),  first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree(),  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.cloneTree(),  first);	  return    tryRemoveUnconditionalBranching(first,    n.cloneTree());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	81	None	replace
494	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  outEdges.cloneTree());  [CE]  cannot  find  symbol  outEdges  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  outEdges.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  outEdges.cloneTree());	  return    tryRemoveUnconditionalBranching(first,    n.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  outEdges	81	None	replace
495	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  n.cloneTree());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  n.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  n.cloneTree());	  return    tryRemoveUnconditionalBranching(first,    n.cloneTree());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	81	None	replace
496	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  first.cloneTree());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  first.cloneTree());	  return    tryRemoveUnconditionalBranching(first,    n.cloneTree());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	81	None	replace
497	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree(),  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree(),  cfgStack);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.cloneTree(),  cfgStack);	  return    tryRemoveUnconditionalBranching(first,    n.cloneTree());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	81	None	replace
498	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  AssertionFailedError  	42	6	replace
499	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  AssertionFailedError  	42	6	replace
500	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.getDestination().getValue());  [CE]  cannot  find  symbol  outEdges  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.getDestination().getValue());	  return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol  outEdges	36	None	replace
501	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.getValue());  [CE]  cannot  find  symbol  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.getValue());	  return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
502	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getDestination(),  first.getValue());  [CE]  cannot  find  symbol  [FE]                        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getDestination(),  first.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getDestination(),  first.getValue());	  return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
503	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]                          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getDestination().getValue());	  return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
504	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getDestination(),  n.getValue());  [CE]  cannot  find  symbol  [FE]                            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getDestination(),  n.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getDestination(),  n.getValue());	  return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
505	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getDestination().getValue(),  outEdges);  [CE]  cannot  find  symbol  [FE]                              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getDestination().getValue(),  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getDestination().getValue(),  outEdges);	  return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
506	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    first.cloneTree();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	55	None	replace
507	[BUG]  [BUGGY]  Node  first  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree(),  first);  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree(),  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree(),  first);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    first.cloneTree();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	55	None	replace
508	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  first  =  first.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  first  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  first  =  first.getNext();	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    first.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	37	None	replace
509	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  first  =  first.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  first  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  first  =  first.getNext();	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    first.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	37	None	replace
510	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  first  =  first.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  first  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  first  =  first.getNext();	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    first.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	37	None	replace
511	[BUG]  [BUGGY]  Node  next  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());	          Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue());    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
512	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getValue());  [CE]  cannot  find  symbol  outEdges  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getValue());	          Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue());    	non-compiled	[CE]  cannot  find  symbol  outEdges	125	None	replace
513	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getValue());  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getValue());	          Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue());    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
514	[BUG]  [BUGGY]  parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollow  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollow  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollow	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	88	None	replace
515	[BUG]  [BUGGY]  parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.FUNCTION)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollow  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.FUNCTION)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollow  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.FUNCTION)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollow	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	88	None	replace
516	[BUG]  [BUGGY]  parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent!=  null  &&  parent.getFirstChild().getType()  ==  Token.BLOCK)  {  return  tryRemoveUnconditionalBranching(first);  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	88	None	replace
517	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getString(),  outEdges);	  return    tryRemoveUnconditionalBranching(first,    n.getString());    	non-compiled	[CE]  cannot  find  symbol  outEdges	16	None	replace
518	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getString(),  n);	  return    tryRemoveUnconditionalBranching(first,    n.getString());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	16	None	replace
519	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  cfgStack);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getString(),  cfgStack);	  return    tryRemoveUnconditionalBranching(first,    n.getString());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	16	None	replace
520	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  exception);  [CE]  cannot  find  symbol  exception  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  exception);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getString(),  exception);	  return    tryRemoveUnconditionalBranching(first,    n.getString());    	non-compiled	[CE]  cannot  find  symbol  exception	16	None	replace
521	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  n.getType());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  n.getType());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getString(),  n.getType());	  return    tryRemoveUnconditionalBranching(first,    n.getString());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	16	None	replace
522	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  gNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  gNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  gNode);	  return    tryRemoveUnconditionalBranching(first,    gNode);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	103	None	replace
523	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges,  gNode);  [CE]  cannot  find  symbol  outEdges  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges,  gNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges,  gNode);	  return    tryRemoveUnconditionalBranching(first,    gNode);    	non-compiled	[CE]  cannot  find  symbol  outEdges	103	None	replace
524	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nNode);  [CE]  cannot  find  symbol  nNode  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  nNode);	  return    tryRemoveUnconditionalBranching(first,    gNode);    	non-compiled	[CE]  cannot  find  symbol  nNode	103	None	replace
525	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(gNode,  first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(gNode,  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(gNode,  first);	  return    tryRemoveUnconditionalBranching(first,    gNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	103	None	replace
526	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n.getNext());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  n.getNext());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getNext();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	98	None	replace
527	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  Node  first  =  n.getNext();  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  Node  first  =  n.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  Node  first  =  n.getNext();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getNext();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	98	None	replace
528	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  outEdges);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    n);    	non-compiled	[CE]  cannot  find  symbol  outEdges	70	None	replace
529	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild(),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild(),  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getFirstChild(),  n);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	70	None	replace
530	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  first.cloneTree());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	70	None	replace
531	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  cfgStack);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  cfgStack);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	70	None	replace
532	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  rootNode);  [CE]  cannot  find  symbol  rootNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  rootNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  rootNode);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    n);    	non-compiled	[CE]  cannot  find  symbol  rootNode	70	None	replace
533	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  fallThrough);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    n);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	70	None	replace
534	[BUG]  [BUGGY]  Return  tryRemoveUnconditionalBranching(first,  n.getString());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Return  tryRemoveUnconditionalBranching(first,  n.getString());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Return  tryRemoveUnconditionalBranching(first,  n.getString());	  return    tryRemoveUnconditionalBranching(first,    outEdges.getString());    	non-compiled	[CE]  ';'  expected	21	None	replace
535	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  node.getString());  [CE]  cannot  find  symbol  node  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  node.getString());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  node.getString());	  return    tryRemoveUnconditionalBranching(first,    outEdges.getString());    	non-compiled	[CE]  cannot  find  symbol  node	21	None	replace
536	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  null.getString());  [CE]  <null>  cannot  be  dereferenced  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  null.getString());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  null.getString());	  return    tryRemoveUnconditionalBranching(first,    outEdges.getString());    	non-compiled	[CE]  <null>  cannot  be  dereferenced	21	None	replace
537	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.getFirstChild());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.getFirstChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode.getFirstChild());	  return    tryRemoveUnconditionalBranching(first,    gNode.get(0));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
538	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.outEdges.size()  -  1);  [CE]  cannot  find  symbol  outEdges  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.outEdges.size()  -  1);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.outEdges.size()  -  1);	  return    tryRemoveUnconditionalBranching(first,    first.outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  outEdges	64	None	replace
539	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.nextCfgNode.outEdges.size());  [CE]  cannot  find  symbol  nextCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.nextCfgNode.outEdges.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.nextCfgNode.outEdges.size());	  return    tryRemoveUnconditionalBranching(first,    first.outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	64	None	replace
540	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.nextCfgNode.size());  [CE]  cannot  find  symbol  nextCfgNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.nextCfgNode.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.nextCfgNode.size());	  return    tryRemoveUnconditionalBranching(first,    first.outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	64	None	replace
541	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getOutEdges().size());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getOutEdges().size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.getOutEdges().size());	  return    tryRemoveUnconditionalBranching(first,    first.outEdges.size());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
542	[BUG]  [BUGGY]  return  tryRemoveBlank(first,  n.getLastChild());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlank(first,  n.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlank(first,  n.getLastChild());	  return    tryRemoveBlank(first.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
543	[BUG]  [BUGGY]  return  tryRemoveBlank(n.getLastChild());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlank(n.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlank(n.getLastChild());	  return    tryRemoveBlank(first.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
544	[BUG]  [BUGGY]  return  tryRemoveBlank(first.getLastChild(),  n);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlank(first.getLastChild(),  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlank(first.getLastChild(),  n);	  return    tryRemoveBlank(first.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
545	[BUG]  [BUGGY]  return  tryRemoveBlank(first,  outEdges.getLastChild());  [CE]  cannot  find  symbol  outEdges  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlank(first,  outEdges.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlank(first,  outEdges.getLastChild());	  return    tryRemoveBlank(first.getLastChild());    	non-compiled	[CE]  cannot  find  symbol  outEdges	132	None	replace
546	[BUG]  [BUGGY]  return  tryRemoveBlank(first.getLastChild(),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlank(first.getLastChild(),  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlank(first.getLastChild(),  outEdges);	  return    tryRemoveBlank(first.getLastChild());    	non-compiled	[CE]  cannot  find  symbol  outEdges	132	None	replace
547	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  fallThrough);	  return    tryRemoveBlock(first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	50	None	replace
548	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  nextCfgNode);	  return    tryRemoveBlock(first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	50	None	replace
549	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  first);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  first);	  return    tryRemoveBlock(first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
550	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  first.nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  first.nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  first.nextCfgNode);	  return    tryRemoveBlock(first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	50	None	replace
551	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  null);	  return    tryRemoveBlock(first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
552	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  n.outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  n.outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  n.outEdges);	  return    tryRemoveBlock(first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  outEdges	50	None	replace
553	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getNext(),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getNext(),  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.getNext(),  outEdges);	  return    tryRemoveUnconditionalBranching(first,    first.getNext());    	non-compiled	[CE]  cannot  find  symbol  outEdges	25	None	replace
554	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  n.getNext());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  n.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first,  n.getNext());	  return    tryRemoveUnconditionalBranching(first,    first.getNext());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	25	None	replace
555	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getNext(),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getNext(),  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.getNext(),  n);	  return    tryRemoveUnconditionalBranching(first,    first.getNext());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	25	None	replace
556	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  outEdges.getNext());  [CE]  cannot  find  symbol  outEdges  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  outEdges.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first,  outEdges.getNext());	  return    tryRemoveUnconditionalBranching(first,    first.getNext());    	non-compiled	[CE]  cannot  find  symbol  outEdges	25	None	replace
557	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.getNext());  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.getNext());	  return    tryRemoveUnconditionalBranching(first,    first.getNext());    	non-compiled	[CE]  cannot  find  symbol  outEdges	25	None	replace
558	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.getNext());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode.getNext());	  return    tryRemoveUnconditionalBranching(first,    first.getNext());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
559	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  Node  last  =  first.cloneTree();  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  Node  last  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  Node  last  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    last    =    first.cloneTree();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	95	None	replace
560	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  last.cloneTree());  [CE]  cannot  find  symbol  last  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  last.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  last.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    last    =    first.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  last	95	None	replace
561	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.cloneTree());  Node  last  =  first.cloneTree();  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.cloneTree());  Node  last  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.cloneTree());  Node  last  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    last    =    first.cloneTree();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	95	None	replace
562	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  last  =  first.cloneTree();  [CE]  unreachable  statement  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  last  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  last  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    last    =    first.cloneTree();    	non-compiled	[CE]  unreachable  statement	95	None	replace
563	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	compilable	  [FE]  RuntimeException  	89	1	replace
564	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	compilable	  [FE]  RuntimeException  	89	1	replace
565	[BUG]  [BUGGY]  parent!=  null  &&  first!=  parent.getParent())  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  first!=  parent.getParent())  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent!=  null  &&  first!=  parent.getParent())  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	89	None	replace
566	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	compilable	  [FE]  AssertionFailedError  	89	6	replace
567	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [FE]  AssertionFailedError  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	compilable	  [FE]  AssertionFailedError  	89	6	replace
568	[BUG]  [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(n.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(n.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null)  {  return  tryRemoveUnconditionalBranching(n.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	89	None	replace
569	[BUG]  [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(child));  }  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(child));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(child));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	89	None	replace
570	[BUG]  [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(last));  }  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(last));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(last));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	89	None	replace
571	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  rootNode);  [CE]  cannot  find  symbol  rootNode  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  rootNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  rootNode);	  return    tryRemoveUnconditionalBranching(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  rootNode	46	None	replace
572	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild().size());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild().size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getLastChild().size());	  return    tryRemoveUnconditionalBranching(first,    n.size());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
573	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getType());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getType());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getType());	  return    tryRemoveUnconditionalBranching(first,    n.size());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	62	None	replace
574	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.cloneTree();    	compilable	  [FE]  RuntimeException  	119	1	replace
575	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.cloneTree();  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.cloneTree();    	compilable	  [FE]  RuntimeException  	119	1	replace
576	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  firstCfgNode  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.cloneTree();    	compilable	  [FE]  RuntimeException  	119	1	replace
577	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.cloneTree();  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.cloneTree();    	compilable	  [FE]  RuntimeException  	119	1	replace
578	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  Node  nextCfgNode  =  first.cloneTree();  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  Node  nextCfgNode  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  Node  nextCfgNode  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.cloneTree();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	119	None	replace
579	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	  	non-compiled	[CE]  unreachable  statement	90	None	add
580	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  if(first  ==  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  if(first  ==  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    if(first  ==  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	  	non-compiled	[CE]  unreachable  statement	90	None	add
581	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  attemptRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  attemptRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  attemptRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	  	non-compiled	[CE]  cannot  find  symbol	90	None	add
582	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  if(first  >=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  if(first  >=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    if(first  >=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	90	None	add
583	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalyzer.computeFallThrough(first));  }  [CE]  cannot  find  symbol  ControlFlowAnalyzer  [FE]            AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalyzer.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalyzer.computeFallThrough(first));  }	  	non-compiled	[CE]  cannot  find  symbol  ControlFlowAnalyzer	90	None	add
584	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  outEdges);	  return    tryRemoveUnconditionalBranching(first,    n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  outEdges	108	None	replace
585	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  n);	  return    tryRemoveUnconditionalBranching(first,    n.getFirstChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	108	None	replace
586	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  first);	  return    tryRemoveUnconditionalBranching(first,    n.getFirstChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	108	None	replace
587	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.getFirstChild());  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.getFirstChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.getFirstChild());	  return    tryRemoveUnconditionalBranching(first,    n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  outEdges	108	None	replace
588	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  n.getType());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  n.getType());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  n.getType());	  return    tryRemoveUnconditionalBranching(first,    n.getFirstChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	108	None	replace
589	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges,  null);  [CE]  cannot  find  symbol  outEdges  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges,  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges,  null);	  return    tryRemoveUnconditionalBranching(first,    null);    	non-compiled	[CE]  cannot  find  symbol  outEdges	47	None	replace
590	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  null,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  null,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  null,  outEdges);	  return    tryRemoveUnconditionalBranching(first,    null);    	non-compiled	[CE]  cannot  find  symbol  outEdges	47	None	replace
591	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  node,  null);  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  node,  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  node,  null);	  return    tryRemoveUnconditionalBranching(first,    null);    	non-compiled	[CE]  cannot  find  symbol  node	47	None	replace
592	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  outEdges.size());  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  outEdges.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first,  outEdges.size());	  return    tryRemoveUnconditionalBranching(first,    n,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  outEdges	79	None	replace
593	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  fallThrough.size());  [CE]  cannot  find  symbol  fallThrough  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  fallThrough.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  fallThrough.size());	  return    tryRemoveUnconditionalBranching(first,    n,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  fallThrough	79	None	replace
594	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  noOpStatements.size());  [CE]  cannot  find  symbol  noOpStatements  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  noOpStatements.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  noOpStatements.size());	  return    tryRemoveUnconditionalBranching(first,    n,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	79	None	replace
595	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  outputEdges.size());  [CE]  cannot  find  symbol  outputEdges  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  outputEdges.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  outputEdges.size());	  return    tryRemoveUnconditionalBranching(first,    n,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  outputEdges	79	None	replace
596	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  first.outEdges.size());  [CE]  cannot  find  symbol  outEdges  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  first.outEdges.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  first.outEdges.size());	  return    tryRemoveUnconditionalBranching(first,    n,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  outEdges	79	None	replace
597	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  inEdges.size());  [CE]  cannot  find  symbol  inEdges  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  inEdges.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  inEdges.size());	  return    tryRemoveUnconditionalBranching(first,    n,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  inEdges	79	None	replace
598	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  outEdges);	  return    tryRemoveUnconditionalBranching(first,    n.removeFirstChild());    	non-compiled	[CE]  cannot  find  symbol  outEdges	100	None	replace
599	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  n);	  return    tryRemoveUnconditionalBranching(first,    n.removeFirstChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	100	None	replace
600	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeLastChild());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.removeLastChild());	  return    tryRemoveUnconditionalBranching(first,    n.removeFirstChild());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
601	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  first);	  return    tryRemoveUnconditionalBranching(first,    n.removeFirstChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	100	None	replace
602	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  noOpStatements);  [CE]  cannot  find  symbol  noOpStatements  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  noOpStatements);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  noOpStatements);	  return    tryRemoveUnconditionalBranching(first,    n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	76	None	replace
603	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  first.nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  first.nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  first.nextCfgNode);	  return    tryRemoveUnconditionalBranching(first,    n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	76	None	replace
604	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  first.next);  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  first.next);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  first.next);	  return    tryRemoveUnconditionalBranching(first,    n,    fallThrough);    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	76	None	replace
605	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(first.getLastChild());    	compilable	  [FE]  AssertionFailedError  	7	2	replace
606	[BUG]  [BUGGY]  Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(first.getLastChild());    	compilable	  [FE]  AssertionFailedError  	7	2	replace
607	[BUG]  [BUGGY]  Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(last,  first.getLastChild());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(last,  first.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(last,  first.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(first.getLastChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	7	None	replace
608	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  outEdges);	  return    tryRemoveUnconditionalBranching(first.cloneTree(),    n);    	non-compiled	[CE]  cannot  find  symbol  outEdges	82	None	replace
609	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  rootNode);  [CE]  cannot  find  symbol  rootNode  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  rootNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  rootNode);	  return    tryRemoveUnconditionalBranching(first.cloneTree(),    n);    	non-compiled	[CE]  cannot  find  symbol  rootNode	82	None	replace
610	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  gNode,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  gNode,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  gNode,  n);	  return    tryRemoveUnconditionalBranching(first.cloneTree(),    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	82	None	replace
611	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  parent);  [CE]  cannot  find  symbol  parent  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  parent);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  parent);	  return    tryRemoveUnconditionalBranching(first.cloneTree(),    n);    	non-compiled	[CE]  cannot  find  symbol  parent	82	None	replace
612	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  first.type);  [CE]  type  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  first.type);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  first.type);	  return    tryRemoveUnconditionalBranching(first.cloneTree(),    n);    	non-compiled	[CE]  type  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	82	None	replace
613	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  root);  [CE]  cannot  find  symbol  root  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  root);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  root);	  return    tryRemoveUnconditionalBranching(first.cloneTree(),    n);    	non-compiled	[CE]  cannot  find  symbol  root	82	None	replace
614	[BUG]  [BUGGY]  Node  next  =  first.getNextChild();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNextChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNextChild();	  Node    next    =    first.getNext();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
615	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first!=  null?  first.getNext()  :  n;  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  first!=  null?  first.getNext()  :  n;	  Node    next    =    first.getNext();    	compilable	  [FE]  RuntimeException  	31	1	replace
616	[BUG]  [BUGGY]  Node  next  =  first!=  null?  first.getNext()  :  n;  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first!=  null?  first.getNext()  :  n;  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first!=  null?  first.getNext()  :  n;	  Node    next    =    first.getNext();    	compilable	  [FE]  RuntimeException  	31	1	replace
617	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  NodeUtil.newString(Token.NAME,  first.getString()));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  NodeUtil.newString(Token.NAME,  first.getString()));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  NodeUtil.newString(Token.NAME,  first.getString()));	  return    tryRemoveUnconditionalBranching(first,    outEdges.getString());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
618	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  NodeUtil.newString(Token.NAME,  n.getString()));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  NodeUtil.newString(Token.NAME,  n.getString()));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  NodeUtil.newString(Token.NAME,  n.getString()));	  return    tryRemoveUnconditionalBranching(first,    outEdges.getString());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
619	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  NodeUtil.newNumber(outEdges.getString()));  [CE]  cannot  find  symbol  outEdges  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  NodeUtil.newNumber(outEdges.getString()));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  NodeUtil.newNumber(outEdges.getString()));	  return    tryRemoveUnconditionalBranching(first,    outEdges.getString());    	non-compiled	[CE]  cannot  find  symbol  outEdges	21	None	replace
620	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  next  =  first.cloneNode();  return  tryRemoveUnconditionalBranching(first.cloneNode());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  next  =  first.cloneNode();  return  tryRemoveUnconditionalBranching(first.cloneNode());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneNode());    Node  next  =  first.cloneNode();  return  tryRemoveUnconditionalBranching(first.cloneNode());	  	non-compiled	[CE]  unreachable  statement	85	None	add
621	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first!=  null?  first.getNext()  :  null;  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  first!=  null?  first.getNext()  :  null;	  Node    nextCfgNode    =    first.getNext();    	compilable	  [FE]  RuntimeException  	29	1	replace
622	[BUG]  [BUGGY]  Node  nextCfgNode  =  first!=  null?  first.getNext()  :  null;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first!=  null?  first.getNext()  :  null;  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first!=  null?  first.getNext()  :  null;	  Node    nextCfgNode    =    first.getNext();    	compilable	  [FE]  RuntimeException  	29	1	replace
623	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first  ==  null?  first  :  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  first  ==  null?  first  :  first.getNext();	  Node    nextCfgNode    =    first.getNext();    	compilable	  [FE]  RuntimeException  	29	1	replace
624	[BUG]  [BUGGY]  Node  nextCfgNode  =  first  ==  null?  first  :  first.getNext();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first  ==  null?  first  :  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first  ==  null?  first  :  first.getNext();	  Node    nextCfgNode    =    first.getNext();    	compilable	  [FE]  RuntimeException  	29	1	replace
625	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first  ==  null?  first.getNext()  :  null;  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  first  ==  null?  first.getNext()  :  null;	  Node    nextCfgNode    =    first.getNext();    	compilable	  [FE]  RuntimeException  	29	1	replace
626	[BUG]  [BUGGY]  Node  nextCfgNode  =  first  ==  null?  first.getNext()  :  null;  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first  ==  null?  first.getNext()  :  null;  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first  ==  null?  first.getNext()  :  null;	  Node    nextCfgNode    =    first.getNext();    	compilable	  [FE]  RuntimeException  	29	1	replace
627	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getParent();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  first.getParent();	  Node    nextCfgNode    =    first.getNext();    	compilable	  [FE]  RuntimeException  	29	1	replace
628	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getParent();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getParent();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getParent();	  Node    nextCfgNode    =    first.getNext();    	compilable	  [FE]  RuntimeException  	29	1	replace
629	[BUG]  [BUGGY]  Node  next  =  n.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  n.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  n.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode);	          Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first,    next);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	74	None	replace
630	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first,  n);  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first,  n);	          Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first,    next);    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	74	None	replace
631	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  last);  [CE]  cannot  find  symbol  last  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  last);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  last);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    last    =    first.cloneTree();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  last	59	None	replace
632	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nCfgNode);  [CE]  cannot  find  symbol  nCfgNode  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nCfgNode);	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  nCfgNode	32	None	replace
633	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  root);  [CE]  cannot  find  symbol  root  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  root);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  root);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  root	72	None	replace
634	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n.removeChild(first));  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n.removeChild(first));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  n.removeChild(first));	  return    tryRemoveUnconditionalBranching(first.getNext());    gNode.removeChild(first);    	non-compiled	[CE]  'void'  type  not  allowed  here	122	None	replace
635	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  fallThrough);	  return    tryRemoveUnconditionalBranching(first,    n.removeFirstChild());    	non-compiled	[CE]  cannot  find  symbol  fallThrough	100	None	replace
636	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  next);  Node  next  =  first.cloneTree();  [CE]  cannot  find  symbol  next  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  next);  Node  next  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  next);  Node  next  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    next    =    first.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  next	94	None	replace
637	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  next  =  first.cloneTree();  [CE]  unreachable  statement  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  next  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  next  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    next    =    first.cloneTree();    	non-compiled	[CE]  unreachable  statement	94	None	replace
638	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode,  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode,  cfgStack);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode,  cfgStack);	  return    tryRemoveUnconditionalBranching(first,    cfgStack);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	105	None	replace
639	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n.removeChild(first));  [CE]  'void'  type  not  allowed  here  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n.removeChild(first));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  n.removeChild(first));	  return    tryRemoveUnconditionalBranching(first.cloneTree());    gNode.removeChild(first);    	non-compiled	[CE]  'void'  type  not  allowed  here	97	None	replace
640	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(first,  n.cloneTree());  gNode.removeChild(first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  tryRemoveUnconditionalBranching(first,  n.cloneTree());  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	tryRemoveUnconditionalBranching(first,  n.cloneTree());  gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    gNode.removeChild(first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	97	None	replace
641	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  root,  n);  [CE]  cannot  find  symbol  root  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  root,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  root,  n);	  return    tryRemoveUnconditionalBranching(first,    n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  root	128	None	replace
642	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent(),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent(),  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getParent(),  n);	  return    tryRemoveUnconditionalBranching(first.getParent());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	27	None	replace
643	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  firstCfgNode  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node    nextCfgNode    =    first.getNext();    Node  firstCfgNode  =  first.getNext();	  	compilable	  [FE]  AssertionFailedError  	28	2	add
644	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  firstCfgNode  =  first.getNext();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  firstCfgNode  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    nextCfgNode    =    first.getNext();    Node  firstCfgNode  =  first.getNext();	  	compilable	  [FE]  AssertionFailedError  	28	2	add
645	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  first  =  first.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  first  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    nextCfgNode    =    first.getNext();    Node  first  =  first.getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	28	None	add
646	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  secondCfgNode  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node    nextCfgNode    =    first.getNext();    Node  secondCfgNode  =  first.getNext();	  	compilable	  [FE]  AssertionFailedError  	28	2	add
647	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  secondCfgNode  =  first.getNext();  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  secondCfgNode  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    nextCfgNode    =    first.getNext();    Node  secondCfgNode  =  first.getNext();	  	compilable	  [FE]  AssertionFailedError  	28	2	add
648	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  n.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  n.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    nextCfgNode    =    first.getNext();    Node  nextCfgNode  =  n.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	28	None	add
649	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  lastCfgNode  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node    nextCfgNode    =    first.getNext();    Node  lastCfgNode  =  first.getNext();	  	compilable	  [FE]  AssertionFailedError  	28	2	add
650	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  lastCfgNode  =  first.getNext();  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  lastCfgNode  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    nextCfgNode    =    first.getNext();    Node  lastCfgNode  =  first.getNext();	  	compilable	  [FE]  AssertionFailedError  	28	2	add
651	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  second.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  second.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    nextCfgNode    =    first.getNext();    Node  nextCfgNode  =  second.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	28	None	add
652	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getNext();  break;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getNext();  break;  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    nextCfgNode    =    first.getNext();    Node  nextCfgNode  =  first.getNext();  break;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	28	None	add
653	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(n.getLastChild(),  first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(n.getLastChild(),  first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(n.getLastChild(),  first);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	73	None	replace
654	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  fallThrough,  gNode);  [CE]  cannot  find  symbol  fallThrough  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  fallThrough,  gNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  fallThrough,  gNode);	  return    tryRemoveUnconditionalBranching(first,    gNode);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	103	None	replace
655	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode,  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode,  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode,  fallThrough);	  return    tryRemoveUnconditionalBranching(first,    gNode);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	103	None	replace
656	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  rootNode,  gNode);  [CE]  cannot  find  symbol  rootNode  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  rootNode,  gNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  rootNode,  gNode);	  return    tryRemoveUnconditionalBranching(first,    gNode);    	non-compiled	[CE]  cannot  find  symbol  rootNode	103	None	replace
657	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.get(0).cloneTree());  [CE]  cannot  find  symbol  outEdges  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.get(0).cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.outEdges.get(0).cloneTree());	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(0).cloneTree());    	non-compiled	[CE]  cannot  find  symbol  outEdges	131	None	replace
658	[BUG]  [BUGGY]  Node  firstCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue());    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
659	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(n.getNext());  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(n.getNext());  Node  first  =  n.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(n.getNext());  Node  first  =  n.getNext();	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	41	None	replace
660	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  nextCfgNode);	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	41	None	replace
661	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  n.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	n.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.getLastChild());    return    tryRemoveUnconditionalBranching(first.getLastChild());    	compilable	  [FE]  AssertionFailedError  	2	11	replace
662	[BUG]  [BUGGY]  n.removeChild(first);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  n.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	n.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.getLastChild());    return    tryRemoveUnconditionalBranching(first.getLastChild());    	compilable	  [FE]  AssertionFailedError  	2	11	replace
663	[BUG]  [BUGGY]  Node  node  =  first.getNext();  return  tryRemoveUnconditionalBranching(node.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  node  =  first.getNext();  return  tryRemoveUnconditionalBranching(node.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  node  =  first.getNext();  return  tryRemoveUnconditionalBranching(node.getDestination().getValue());	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(node.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
664	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(First,  gNode,  fallThrough,  n);  [CE]  cannot  find  symbol  First  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(First,  gNode,  fallThrough,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(First,  gNode,  fallThrough,  n);	  return    tryRemoveUnconditionalBranching(first,    gNode,    n);    	non-compiled	[CE]  cannot  find  symbol  First	107	None	replace
665	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  root);  [CE]  cannot  find  symbol  root  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  root);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  root);	  return    tryRemoveUnconditionalBranching(first.getString(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  root	17	None	replace
666	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  nextCfgNode);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.getNext();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	118	None	replace
667	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  first);  Node  nextCfgNode  =  first.getNext();  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  first);  Node  nextCfgNode  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  first);  Node  nextCfgNode  =  first.getNext();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.getNext();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	118	None	replace
668	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  firstCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  firstCfgNode);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.getNext();    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	118	None	replace
669	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(n.cloneTree());  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(n.cloneTree());  Node  first  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(n.cloneTree());  Node  first  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	57	None	replace
670	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	126	2	replace
671	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first);  [FE]  AssertionFailedError  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	126	2	replace
672	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	126	None	replace
673	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  firstCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	126	6	replace
674	[BUG]  [BUGGY]  Node  firstCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode);  [FE]  AssertionFailedError  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	126	6	replace
675	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode.getDestination().getValue());	  return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
676	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  rootNode.getNext());  [CE]  cannot  find  symbol  rootNode  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  rootNode.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  rootNode.getNext());	  return    tryRemoveUnconditionalBranching(first,    first.getNext());    	non-compiled	[CE]  cannot  find  symbol  rootNode	25	None	replace
677	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  node.getNext());  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  node.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  node.getNext());	  return    tryRemoveUnconditionalBranching(first,    first.getNext());    	non-compiled	[CE]  cannot  find  symbol  node	25	None	replace
678	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getString(),  null);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getString(),  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.getString(),  null);	  return    tryRemoveUnconditionalBranching(first.getString(),    null);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	130	None	replace
679	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(n.getLastChild());  gNode.removeChild(first);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(n.getLastChild());  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(n.getLastChild());  gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.getLastChild());    gNode.removeChild(first);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
680	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild());  gNode.removeChild(first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild());  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getLastChild());  gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.getLastChild());    gNode.removeChild(first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	116	None	replace
681	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(first,  n.getLastChild());  gNode.removeChild(first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  tryRemoveUnconditionalBranching(first,  n.getLastChild());  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	tryRemoveUnconditionalBranching(first,  n.getLastChild());  gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.getLastChild());    gNode.removeChild(first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	116	None	replace
682	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  gNode.removeChild(first);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.getLastChild());    gNode.removeChild(first);    	non-compiled	[CE]  ')'  expected	116	None	replace
683	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  next  =  first.getNext();  [CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  next  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.NAME);  Node  next  =  first.getNext();	  	non-compiled	[CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	add
684	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  next  =  first.getNext();  [CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  next  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Node  next  =  first.getNext();	  	non-compiled	[CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	add
685	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  next  =  first.getNext();  [CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  next  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  Node  next  =  first.getNext();	  	non-compiled	[CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	add
686	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.NEW);  Node  next  =  first.getNext();  [CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.NEW);  Node  next  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.NEW);  Node  next  =  first.getNext();	  	non-compiled	[CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	add
687	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.STRING);  Node  next  =  first.getNext();  [CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.STRING);  Node  next  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.STRING);  Node  next  =  first.getNext();	  	non-compiled	[CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	add
688	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first!=  null);  Node  next  =  first.getNext();  [CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first!=  null);  Node  next  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Preconditions.checkState(first!=  null);  Node  next  =  first.getNext();	  	non-compiled	[CE]  variable  next  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	add
689	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	30	11	add
690	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.FUNCTION);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	30	11	add
691	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  this.outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  this.outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  this.outEdges);	  return    tryRemoveUnconditionalBranching(first,    n,    exceptions);    	non-compiled	[CE]  cannot  find  symbol  outEdges	80	None	replace
692	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  n.removeFirstChild());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  n.removeFirstChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  n.removeFirstChild());	  return    tryRemoveBlock(first,    n);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
693	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  n.getParent());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  n.getParent());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  n.getParent());	  return    tryRemoveBlock(first,    n);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
694	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  gNode.getNext());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  gNode.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  gNode.getNext());	  return    tryRemoveBlock(first.getNext());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
695	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  root);  [CE]  cannot  find  symbol  root  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  root);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  root);	  return    tryRemoveUnconditionalBranching(first.cloneTree(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  root	83	None	replace
696	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  null);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  null);	  return    tryRemoveUnconditionalBranching(first.cloneTree(),    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	83	None	replace
697	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode(),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode(),  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneNode(),  outEdges);	  return    tryRemoveUnconditionalBranching(first.cloneNode());    	non-compiled	[CE]  cannot  find  symbol  outEdges	86	None	replace
698	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext(),  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext(),  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getNext(),  fallThrough);	  return    tryRemoveUnconditionalBranching(first,    n.getNext());    	non-compiled	[CE]  cannot  find  symbol  fallThrough	22	None	replace
699	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(next.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(next.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getLastChild();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	compilable	  [FE]  RuntimeException  	58	1	replace
700	[BUG]  [BUGGY]  Node  next  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(next.cloneTree());  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(next.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(next.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getLastChild();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	compilable	  [FE]  RuntimeException  	58	1	replace
701	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  first.getLastChild());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  first.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  first.getLastChild());	  return    tryRemoveBlock(first.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
702	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  gNode,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  gNode,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  gNode,  n);	  return    tryRemoveUnconditionalBranching(first.getNext(),    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	24	None	replace
703	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n,  null);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n,  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  n,  null);	  return    tryRemoveUnconditionalBranching(first.getNext(),    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	24	None	replace
704	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n,  root);  [CE]  cannot  find  symbol  root  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n,  root);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  n,  root);	  return    tryRemoveUnconditionalBranching(first.getNext(),    n);    	non-compiled	[CE]  cannot  find  symbol  root	24	None	replace
705	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  fallThrough);	  return    tryRemoveUnconditionalBranching(first,    n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  fallThrough	108	None	replace
706	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  null);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  null);	  return    tryRemoveUnconditionalBranching(first,    n.getFirstChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	108	None	replace
707	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  first.getFirstChild());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  first.getFirstChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  first.getFirstChild());	  return    tryRemoveBlock(first.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
708	[BUG]  [BUGGY]  parent!=  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent!=  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent!=  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	89	None	replace
709	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  cannot  find  symbol  outEdges  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  cannot  find  symbol  outEdges	89	None	replace
710	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  cannot  find  symbol  outEdges  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  cannot  find  symbol  outEdges	89	None	replace
711	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  ')'  expected	89	None	replace
712	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  gNode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  gNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  gNode);	  return    tryRemoveBlock(first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
713	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  noOpStatements);  [CE]  cannot  find  symbol  noOpStatements  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  noOpStatements);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  noOpStatements);	  return    tryRemoveBlock(first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	50	None	replace
714	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  cfgNode);  [CE]  cannot  find  symbol  cfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  cfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  cfgNode);	  return    tryRemoveBlock(first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	50	None	replace
715	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n.getValue());  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n.getValue());	          Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue());    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
716	[BUG]  [BUGGY]  Node  first  =  gNode.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  gNode.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  gNode.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());	          Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	125	None	replace
717	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  OutEdges.size());  [CE]  cannot  find  symbol  OutEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  OutEdges.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  OutEdges.size());	  return    tryRemoveUnconditionalBranching(first,    n,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  OutEdges	79	None	replace
718	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  this.outEdges.size());  [CE]  cannot  find  symbol  outEdges  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  this.outEdges.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  this.outEdges.size());	  return    tryRemoveUnconditionalBranching(first,    n,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  outEdges	79	None	replace
719	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  cannot  find  symbol  outEdges  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  cannot  find  symbol  outEdges	92	None	replace
720	[BUG]  [BUGGY]  parent!=  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent!=  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent!=  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  not  a  statement	92	None	replace
721	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  getDestination());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  getDestination());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  getDestination());	  return    tryRemoveUnconditionalBranching(first.getNext(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
722	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  root);  [CE]  cannot  find  symbol  root  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  root);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  root);	  return    tryRemoveUnconditionalBranching(first.getNext(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  root	23	None	replace
723	[BUG]  [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(parent,  first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(parent,  first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null)  {  return  tryRemoveUnconditionalBranching(parent,  first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	88	None	replace
724	[BUG]  [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	88	None	replace
725	[BUG]  [BUGGY]  parent  ==  null  &&  first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null  &&  first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null  &&  first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	88	None	replace
726	[BUG]  [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(parent);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(parent);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null)  {  return  tryRemoveUnconditionalBranching(parent);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	88	None	replace
727	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	88	None	replace
728	[BUG]  [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(parent,  first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(parent,  first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null)  {  return  tryRemoveUnconditionalBranching(parent,  first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	88	None	replace
729	[BUG]  [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	88	None	replace
730	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  this.nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  this.nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  this.nextCfgNode);	  return    tryRemoveUnconditionalBranching(first,    n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	76	None	replace
731	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  outputEdges);  [CE]  cannot  find  symbol  outputEdges  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  outputEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  outputEdges);	  return    tryRemoveUnconditionalBranching(first,    n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  outputEdges	76	None	replace
732	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  root.outEdges.size());  [CE]  package  root  does  not  exist  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  root.outEdges.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  root.outEdges.size());	  return    tryRemoveUnconditionalBranching(first,    gNode.outEdges.size());    	non-compiled	[CE]  package  root  does  not  exist	111	None	replace
733	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  n  =  first.cloneTree();  [CE]  unreachable  statement  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  n  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneNode());  n  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    n    =    first.cloneTree();    	non-compiled	[CE]  unreachable  statement	96	None	replace
734	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  root,  outEdges);  [CE]  cannot  find  symbol  root  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  root,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  root,  outEdges);	  return    tryRemoveUnconditionalBranching(first,    n,    rootEdges);    	non-compiled	[CE]  cannot  find  symbol  root	109	None	replace
735	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination(),  outEdges.getValue());  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination(),  outEdges.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination(),  outEdges.getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(n.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
736	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination(),  next.getValue());  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination(),  next.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination(),  next.getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(n.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
737	[BUG]  [BUGGY]  removeUnconditionalBranching(first.getNext(),  n.getLastChild());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  removeUnconditionalBranching(first.getNext(),  n.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	removeUnconditionalBranching(first.getNext(),  n.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
738	[BUG]  [BUGGY]  Preconditions.checkState(first!=  null);  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first!=  null);  Node  first  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first!=  null);  Node  first  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	40	None	replace
739	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  nextCfgNode);	  return    tryRemoveUnconditionalBranching(first.getString(),    first);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	19	None	replace
740	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	compilable	  [FE]  RuntimeException  	60	10	replace
741	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode.cloneTree());  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.cloneTree());    	compilable	  [FE]  RuntimeException  	60	10	replace
742	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  nextCfgNode);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    n);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	70	None	replace
743	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  this,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  this,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  this,  outEdges);	  return    tryRemoveUnconditionalBranching(first,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  outEdges	110	None	replace
744	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.getValue());  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.getValue());	  Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
745	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  n.getValue());  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  n.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  n.getValue());	  Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
746	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n.getDestination().getValue());	  Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
747	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(next.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(next.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getLastChild();    return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  AssertionFailedError  	99	6	replace
748	[BUG]  [BUGGY]  Node  next  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(next.getNext());  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(next.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(next.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getLastChild();    return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  AssertionFailedError  	99	6	replace
749	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  fallThrough);	  return    tryRemoveUnconditionalBranching(first,    n.getLastChild());    	non-compiled	[CE]  cannot  find  symbol  fallThrough	71	None	replace
750	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  cfgStack);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  cfgStack);	  return    tryRemoveUnconditionalBranching(first,    n.getLastChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	71	None	replace
751	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  fallThrough);	  return    tryRemoveUnconditionalBranching(first.cloneTree(),    n);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	82	None	replace
752	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  true);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  true);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getString(),  true);	  return    tryRemoveUnconditionalBranching(first,    n.getString());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	16	None	replace
753	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.getValue());  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
754	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getDestination().getValue());  [CE]  cannot  find  symbol  outEdges  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getDestination().getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol  outEdges	34	None	replace
755	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.getValue());  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
756	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(n.getLastChild());  Node  next  =  first.getNext();  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(n.getLastChild());  Node  next  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(n.getLastChild());  Node  next  =  first.getNext();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    next    =    first.getNext();    	non-compiled	[CE]  unreachable  statement	115	None	replace
757	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  next);  Node  next  =  first.getNext();  [CE]  cannot  find  symbol  next  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  next);  Node  next  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  next);  Node  next  =  first.getNext();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    next    =    first.getNext();    	non-compiled	[CE]  cannot  find  symbol  next	115	None	replace
758	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.size()  -  2);  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.size()  -  2);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.outEdges.size()  -  2);	  return    tryRemoveUnconditionalBranching(first,    n.outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  outEdges	63	None	replace
759	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  first);  Node  nextCfgNode  =  first.cloneTree();  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  first);  Node  nextCfgNode  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  first);  Node  nextCfgNode  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.cloneTree();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	119	None	replace
760	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  n,  nextCfgNode);	  return    tryRemoveUnconditionalBranching(first.getString(),    n);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	15	None	replace
761	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(gNode,  first,  fallThrough,  n);  [CE]  cannot  find  symbol  fallThrough  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(gNode,  first,  fallThrough,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(gNode,  first,  fallThrough,  n);	  return    tryRemoveUnconditionalBranching(gNode,    first,    n);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	78	None	replace
762	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(t,  gNode,  first,  n);  [CE]  cannot  find  symbol  t  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(t,  gNode,  first,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(t,  gNode,  first,  n);	  return    tryRemoveUnconditionalBranching(gNode,    first,    n);    	non-compiled	[CE]  cannot  find  symbol  t	78	None	replace
763	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  last  =  n.getLastChild();  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  last  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  last  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    n.getLastChild();    	non-compiled	[CE]  unreachable  statement	114	None	replace
764	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first!=  null);  Node  last  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Preconditions.checkState(first!=  null);  Node  last  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	114	1	replace
765	[BUG]  [BUGGY]  Preconditions.checkState(first!=  null);  Node  last  =  n.getLastChild();  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first!=  null);  Node  last  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first!=  null);  Node  last  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	114	1	replace
766	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  last);  [CE]  cannot  find  symbol  last  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  last);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  last);	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  last	114	None	replace
767	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode.getValue(),  firstCfgNode);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode.getValue(),  firstCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode.getValue(),  firstCfgNode);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue(),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
768	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode.getValue(),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode.getValue(),  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode.getValue(),  nextCfgNode);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue(),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
769	[BUG]  [BUGGY]  Node  firstCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getValue(),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getValue(),  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getValue(),  nextCfgNode);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue(),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
770	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  return  tryRemoveUnconditionalBranching(first.getNext());  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getParent());    return  tryRemoveUnconditionalBranching(first.getNext());	  	non-compiled	[CE]  unreachable  statement	26	None	add
771	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getParent());  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getParent());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getParent());    Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getParent());	  	non-compiled	[CE]  unreachable  statement	26	None	add
772	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(n.hasChildren());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Preconditions.checkState(n.hasChildren());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.getLastChild());    }    	compilable	  [FE]  RuntimeException  	4	1	replace
773	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(n.hasChildren());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(n.hasChildren());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.getLastChild());    }    	compilable	  [FE]  RuntimeException  	4	1	replace
774	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  return  tryRemoveUnconditionalBranching(first.getLastChild());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  return  tryRemoveUnconditionalBranching(first.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getFirstChild());    return  tryRemoveUnconditionalBranching(first.getLastChild());	  	non-compiled	[CE]  unreachable  statement	68	None	add
775	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getFirstChild());    Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	add
776	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  next  =  n.getLastChild();  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  next  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  next  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    next    =    first.getLastChild();    	non-compiled	[CE]  unreachable  statement	113	None	replace
777	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.get(0).getDestination());  [CE]  cannot  find  symbol  outEdges  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.get(0).getDestination());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.outEdges.get(0).getDestination());	  return    tryRemoveUnconditionalBranching(first,    n.outEdges.get(0));    	non-compiled	[CE]  cannot  find  symbol  outEdges	12	None	replace
778	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.get(0);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.get(0);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.outEdges.get(0);	  return    tryRemoveUnconditionalBranching(first,    n.outEdges.get(0));    	non-compiled	[CE]  ')'  expected	12	None	replace
779	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode,  null);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode,  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode,  null);	  return    tryRemoveUnconditionalBranching(first,    null);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	47	None	replace
780	[BUG]  [BUGGY]  Node  last  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(last,  first.getLastChild());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(last,  first.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  last  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(last,  first.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(first.getLastChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	7	None	replace
781	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  	non-compiled	[CE]  unreachable  statement	90	None	add
782	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n.getLastChild());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  n.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    n.getLastChild();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	5	None	replace
783	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nodes.get(1));  [CE]  cannot  find  symbol  nodes  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nodes.get(1));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  nodes.get(1));	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(1));    	non-compiled	[CE]  cannot  find  symbol  nodes	11	None	replace
784	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n);  NodeUtil.removeChild(first,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n);  NodeUtil.removeChild(first,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  n);  NodeUtil.removeChild(first,  n);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    NodeUtil.removeChild(first,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	120	None	replace
785	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  NodeUtil.removeChild(first,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  NodeUtil.removeChild(first,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  NodeUtil.removeChild(first,  n);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    NodeUtil.removeChild(first,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	120	None	replace
786	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  outEdges);  NodeUtil.removeChild(first,  n);  [CE]  cannot  find  symbol  outEdges  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  outEdges);  NodeUtil.removeChild(first,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  outEdges);  NodeUtil.removeChild(first,  n);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    NodeUtil.removeChild(first,    n);    	non-compiled	[CE]  cannot  find  symbol  outEdges	120	None	replace
787	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  NodeUtil.removeChild(first,  n));  [CE]  'void'  type  not  allowed  here  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  NodeUtil.removeChild(first,  n));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  NodeUtil.removeChild(first,  n));	  return    tryRemoveUnconditionalBranching(first.cloneTree());    NodeUtil.removeChild(first,    n);    	non-compiled	[CE]  'void'  type  not  allowed  here	120	None	replace
788	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  first);  NodeUtil.removeChild(first,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  first);  NodeUtil.removeChild(first,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  first);  NodeUtil.removeChild(first,  n);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    NodeUtil.removeChild(first,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	120	None	replace
789	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	  	non-compiled	[CE]  unreachable  statement	87	None	add
790	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode,  outEdges.get(0));  [CE]  cannot  find  symbol  outEdges  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode,  outEdges.get(0));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode,  outEdges.get(0));	  return    tryRemoveUnconditionalBranching(first,    gNode.get(0));    	non-compiled	[CE]  cannot  find  symbol  outEdges	14	None	replace
791	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode,  outEdges.get(1));  [CE]  cannot  find  symbol  outEdges  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode,  outEdges.get(1));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode,  outEdges.get(1));	  return    tryRemoveUnconditionalBranching(first,    gNode.get(0));    	non-compiled	[CE]  cannot  find  symbol  outEdges	14	None	replace
792	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getOutEdges());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getOutEdges());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.getOutEdges());	  return    tryRemoveUnconditionalBranching(first,    first.outEdges.size());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
793	[BUG]  [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(parent,  first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null)  {  return  tryRemoveUnconditionalBranching(parent,  first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null)  {  return  tryRemoveUnconditionalBranching(parent,  first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  not  a  statement	91	None	replace
794	[BUG]  [BUGGY]  parent  ==  null  &&  first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null  &&  first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null  &&  first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  not  a  statement	91	None	replace
795	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  last  =  first.getLastChild();  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  last  =  first.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  last  =  first.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    	non-compiled	[CE]  unreachable  statement	102	None	replace
796	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  fallThrough,  outEdges);  [CE]  cannot  find  symbol  fallThrough  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  fallThrough,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  fallThrough,  outEdges);	  return    tryRemoveUnconditionalBranching(first,    n,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	75	None	replace
797	[BUG]  [BUGGY]  Return  tryRemoveUnconditionalBranching(first,  n,  fallThrough);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Return  tryRemoveUnconditionalBranching(first,  n,  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Return  tryRemoveUnconditionalBranching(first,  n,  fallThrough);	  return    tryRemoveUnconditionalBranching(first,    n,    outEdges);    	non-compiled	[CE]  ';'  expected	75	None	replace
798	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  fallingThrough);  [CE]  cannot  find  symbol  fallingThrough  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  fallingThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  fallingThrough);	  return    tryRemoveUnconditionalBranching(first,    n,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  fallingThrough	75	None	replace
799	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString()  +  1);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString()  +  1);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getString()  +  1);	  return    tryRemoveUnconditionalBranching(first.getString()    +    1);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	20	None	replace
800	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  node.get(1));  [CE]  cannot  find  symbol  node  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  node.get(1));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  node.get(1));	  return    tryRemoveUnconditionalBranching(first,    n.get(1));    	non-compiled	[CE]  cannot  find  symbol  node	10	None	replace
801	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  nextCfgNode,  null);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  nextCfgNode,  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  nextCfgNode,  null);	  return    tryRemoveUnconditionalBranching(first,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	110	None	replace
802	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  this,  null);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  this,  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  this,  null);	  return    tryRemoveUnconditionalBranching(first,    n,    null);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	110	None	replace
803	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  n.getLastChild());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  n.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  n.getLastChild());	  return    tryRemoveUnconditionalBranching(first,    n.removeFirstChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	100	None	replace
804	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  nextCfgNode);	  return    tryRemoveUnconditionalBranching(first,    n.removeFirstChild());    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	100	None	replace
805	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  next);  [CE]  cannot  find  symbol  next  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  next);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  next);	  return    tryRemoveUnconditionalBranching(first,    n.removeFirstChild());    	non-compiled	[CE]  cannot  find  symbol  next	100	None	replace
806	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  n.cloneTree());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  n.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild(),  n.cloneTree());	  return    tryRemoveUnconditionalBranching(first,    n.removeFirstChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	100	None	replace
807	[BUG]  [BUGGY]  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  else  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  else  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  else  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  cannot  find  symbol  outEdges	44	None	replace
808	[BUG]  [BUGGY]  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  else  {  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());  }  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  else  {  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  else  {  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	44	None	replace
809	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  AssertionFailedError  	44	6	replace
810	[BUG]  [BUGGY]  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getNext());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  AssertionFailedError  	44	6	replace
811	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(gNode.cloneTree());  Node  first  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(gNode.cloneTree());  Node  first  =  n.getFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(gNode.cloneTree());  Node  first  =  n.getFirstChild();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
812	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(gNode.cloneTree());  [CE]  cannot  find  symbol  [FE]                        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(gNode.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(gNode.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
813	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  breakThrough);  [CE]  cannot  find  symbol  breakThrough  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  breakThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  breakThrough);	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  breakThrough	32	None	replace
814	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  [CE]  cannot  find  symbol  outEdges  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(0).cloneTree());    	non-compiled	[CE]  cannot  find  symbol  outEdges	131	None	replace
815	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().cloneTree());  [CE]  cannot  find  symbol  outEdges  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().cloneTree());	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(0).cloneTree());    	non-compiled	[CE]  cannot  find  symbol  outEdges	131	None	replace
816	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  next.getNext());  [CE]  cannot  find  symbol  next  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  next.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  next.getNext());	  return    tryRemoveUnconditionalBranching(first,    first.getNext());    	non-compiled	[CE]  cannot  find  symbol  next	25	None	replace
817	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(gNode,  first.getNext());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(gNode,  first.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(gNode,  first.getNext());	  return    tryRemoveUnconditionalBranching(first,    first.getNext());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	25	None	replace
818	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(0).getValue());  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(0).getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(0).getValue());	  Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
819	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(1).getValue());  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(1).getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(1).getValue());	  Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
820	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  outEdges.get(0).cloneTree());  [CE]  cannot  find  symbol  outEdges  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  outEdges.get(0).cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first,  outEdges.get(0).cloneTree());	  return    tryRemoveUnconditionalBranching(first,    first.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  outEdges	84	None	replace
821	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getParent(),  n.cloneTree());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getParent(),  n.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getParent(),  n.cloneTree());	  return    tryRemoveUnconditionalBranching(first,    n.cloneTree());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	81	None	replace
822	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree(),  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree(),  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.cloneTree(),  nextCfgNode);	  return    tryRemoveUnconditionalBranching(first,    n.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	81	None	replace
823	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getSize());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getSize());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getSize());	  return    tryRemoveUnconditionalBranching(first,    n.size());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
824	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  next,  outEdges.size());  [CE]  cannot  find  symbol  next  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  next,  outEdges.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  next,  outEdges.size());	  return    tryRemoveUnconditionalBranching(first,    n,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  next	79	None	replace
825	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  outEdges.size());  [CE]  cannot  find  symbol  outEdges  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  outEdges.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  outEdges.size());	  return    tryRemoveUnconditionalBranching(first,    n,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  outEdges	79	None	replace
826	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  nextCfgNode  =  first.getNext();  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  nextCfgNode  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneNode());    Node  nextCfgNode  =  first.getNext();	  	non-compiled	[CE]  unreachable  statement	85	None	add
827	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  next  =  first.getNext();  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  Node  next  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneNode());    Node  next  =  first.getNext();	  	non-compiled	[CE]  unreachable  statement	85	None	add
828	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  gNode.removeChild(first);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneNode());    gNode.removeChild(first);	  	non-compiled	[CE]  cannot  find  symbol	85	None	add
829	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext(),  n.getValue());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext(),  n.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getNext(),  n.getValue());	  return    tryRemoveUnconditionalBranching(first,    n.getNext());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
830	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext(),  n.getChildCount());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext(),  n.getChildCount());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getNext(),  n.getChildCount());	  return    tryRemoveUnconditionalBranching(first,    n.getNext());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	22	None	replace
831	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  first.getFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  last  =  first.getFirstChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(first.getLastChild());    	compilable	  [FE]  RuntimeException  	7	1	replace
832	[BUG]  [BUGGY]  Node  last  =  first.getFirstChild();  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  last  =  first.getFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  last  =  first.getFirstChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(first.getLastChild());    	compilable	  [FE]  RuntimeException  	7	1	replace
833	[BUG]  [BUGGY]  parent  ==  null  ||  first!=  parent.getParent())  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null  ||  first!=  parent.getParent())  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null  ||  first!=  parent.getParent())  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	88	None	replace
834	[BUG]  [BUGGY]  parent  ==  first  ||(n.hasChildren()  &&  first.getFirstChild().getType()  ==  Token.FUNCTION))  {  return  tryRemoveUnconditionalBranching(first);  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  first  ||(n.hasChildren()  &&  first.getFirstChild().getType()  ==  Token.FUNCTION))  {  return  tryRemoveUnconditionalBranching(first);  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  first  ||(n.hasChildren()  &&  first.getFirstChild().getType()  ==  Token.FUNCTION))  {  return  tryRemoveUnconditionalBranching(first);  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	88	None	replace
835	[BUG]  [BUGGY]  parent  ==  first  ||(n.hasChildren()  &&  first.getFirstChild().getType()  ==  Token.BLOCK))  {  return  tryRemoveUnconditionalBranching(first);  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  first  ||(n.hasChildren()  &&  first.getFirstChild().getType()  ==  Token.BLOCK))  {  return  tryRemoveUnconditionalBranching(first);  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  first  ||(n.hasChildren()  &&  first.getFirstChild().getType()  ==  Token.BLOCK))  {  return  tryRemoveUnconditionalBranching(first);  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	88	None	replace
836	[BUG]  [BUGGY]  parent  ==  null  ||  first!=  parent.getParent())  {  return  tryRemoveUnconditionalBranching(first);  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null  ||  first!=  parent.getParent())  {  return  tryRemoveUnconditionalBranching(first);  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null  ||  first!=  parent.getParent())  {  return  tryRemoveUnconditionalBranching(first);  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	88	None	replace
837	[BUG]  [BUGGY]  parent  ==  first  ||(n.hasChildren()  &&  first.getFirstChild().getType()  ==  Token.NEW))  {  return  tryRemoveUnconditionalBranching(first);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  first  ||(n.hasChildren()  &&  first.getFirstChild().getType()  ==  Token.NEW))  {  return  tryRemoveUnconditionalBranching(first);  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  first  ||(n.hasChildren()  &&  first.getFirstChild().getType()  ==  Token.NEW))  {  return  tryRemoveUnconditionalBranching(first);  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	88	None	replace
838	[BUG]  [BUGGY]  parent  ==  first  ||(n.hasChildren()  &&  first.getFirstChild().getType()  ==  Token.THIS))  {  return  tryRemoveUnconditionalBranching(first);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  first  ||(n.hasChildren()  &&  first.getFirstChild().getType()  ==  Token.THIS))  {  return  tryRemoveUnconditionalBranching(first);  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  first  ||(n.hasChildren()  &&  first.getFirstChild().getType()  ==  Token.THIS))  {  return  tryRemoveUnconditionalBranching(first);  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	88	None	replace
839	[BUG]  [BUGGY]  parent  ==  first  ||(n.hasChildren()  &&  first.getFirstChild().getType()  ==  Token.CATCH))  {  return  tryRemoveUnconditionalBranching(first);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  first  ||(n.hasChildren()  &&  first.getFirstChild().getType()  ==  Token.CATCH))  {  return  tryRemoveUnconditionalBranching(first);  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  first  ||(n.hasChildren()  &&  first.getFirstChild().getType()  ==  Token.CATCH))  {  return  tryRemoveUnconditionalBranching(first);  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	88	None	replace
840	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first,  n.getLastChild());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first,  n.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first,  n.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    return    tryRemoveUnconditionalBranching(first.getLastChild());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	replace
841	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  last  =  first.cloneTree();  [CE]  unreachable  statement  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  last  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext());  Node  last  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    last    =    first.cloneTree();    	non-compiled	[CE]  unreachable  statement	95	None	replace
842	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  first.getOutEdges());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  first.getOutEdges());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  first.getOutEdges());	  return    tryRemoveUnconditionalBranching(first,    n.getOutEdges());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
843	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getParent();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Node  nextCfgNode  =  first.getParent();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    nextCfgNode    =    first.getNext();    Node  nextCfgNode  =  first.getParent();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	28	None	add
844	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  Token  nextCfgNode  =  first.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  Token  nextCfgNode  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    nextCfgNode    =    first.getNext();    Token  nextCfgNode  =  first.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	28	None	add
845	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges,  first.size());  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges,  first.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(outEdges,  first.size());	  return    tryRemoveUnconditionalBranching(first,    OutEdges.size());    	non-compiled	[CE]  cannot  find  symbol  outEdges	112	None	replace
846	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  next.getString());  [CE]  cannot  find  symbol  next  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  next.getString());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  next.getString());	  return    tryRemoveUnconditionalBranching(first,    outEdges.getString());    	non-compiled	[CE]  cannot  find  symbol  next	21	None	replace
847	[BUG]  [BUGGY]  return  tryRemoveBlank(first.getFirstChild());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlank(first.getFirstChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlank(first.getFirstChild());	  return    tryRemoveUnconditionalBranching(first.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
848	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  first.getFirstChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.getLastChild());    }    	compilable	  [FE]  RuntimeException  	4	1	replace
849	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getFirstChild();  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getFirstChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.getLastChild());    }    	compilable	  [FE]  RuntimeException  	4	1	replace
850	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  n.getFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  n.getFirstChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.getLastChild());    }    	compilable	  [FE]  RuntimeException  	4	1	replace
851	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getFirstChild();  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  n.getFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  n.getFirstChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.getLastChild());    }    	compilable	  [FE]  RuntimeException  	4	1	replace
852	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  n  =  first.getFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	n  =  first.getFirstChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.getLastChild());    }    	compilable	  [FE]  RuntimeException  	4	8	replace
853	[BUG]  [BUGGY]  n  =  first.getFirstChild();  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  n  =  first.getFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	n  =  first.getFirstChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.getLastChild());    }    	compilable	  [FE]  RuntimeException  	4	8	replace
854	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  next  =  first.getFirstChild();  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  next  =  first.getFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  next  =  first.getFirstChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    next    =    first.getLastChild();    	non-compiled	[CE]  unreachable  statement	113	None	replace
855	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Preconditions.checkState(last!=  n.getLastChild());  [CE]  cannot  find  symbol  last  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Preconditions.checkState(last!=  n.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.BLOCK);  Preconditions.checkState(last!=  n.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  last	114	None	replace
856	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  last  =  n.getLastChild();  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  last  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext());  Node  last  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    n.getLastChild();    	non-compiled	[CE]  unreachable  statement	114	None	replace
857	[BUG]  [BUGGY]  parent  ==  first)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  first)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  first)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	89	None	replace
858	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(1).getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  cannot  find  symbol  outEdges  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(1).getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(1).getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  cannot  find  symbol  outEdges	89	None	replace
859	[BUG]  [BUGGY]  parent!=  null  &&  first!=  first.getNext())  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  first!=  first.getNext())  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent!=  null  &&  first!=  first.getNext())  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  not  a  statement	89	None	replace
860	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  cannot  find  symbol  outEdges  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    }    	non-compiled	[CE]  cannot  find  symbol  outEdges	89	None	replace
861	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.cloneTree());  Node  nextCfgNode  =  first.getNext();  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.cloneTree());  Node  nextCfgNode  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.cloneTree());  Node  nextCfgNode  =  first.getNext();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.getNext();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	118	None	replace
862	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  next);  [CE]  cannot  find  symbol  next  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveBlock(first,  next);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  next);	  return    tryRemoveBlock(first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  next	50	None	replace
863	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  first.removeFirstChild());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  first.removeFirstChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  n,  first.removeFirstChild());	  return    tryRemoveUnconditionalBranching(first.getString(),    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	15	None	replace
864	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  first.removeNoOpStatements);  [CE]  cannot  find  symbol  removeNoOpStatements  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n,  first.removeNoOpStatements);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  n,  first.removeNoOpStatements);	  return    tryRemoveUnconditionalBranching(first.getString(),    n);    	non-compiled	[CE]  cannot  find  symbol  removeNoOpStatements	15	None	replace
865	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.get(1).getValue());  [CE]  cannot  find  symbol  outEdges  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.get(1).getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.get(1).getValue());	          Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue());    	non-compiled	[CE]  cannot  find  symbol  outEdges	125	None	replace
866	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getValue());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.getValue());	          Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	125	None	replace
867	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.cloneTree());  gNode.removeChild(first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.cloneTree());  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.cloneTree());  gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    gNode.removeChild(first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	97	None	replace
868	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(1).getValue());  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(1).getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(1).getValue());	  return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
869	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(0).getValue());  [CE]  cannot  find  symbol  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(0).getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(0).getValue());	  return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
870	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.outEdges.size()  +  1);  [CE]  cannot  find  symbol  outEdges  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.outEdges.size()  +  1);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.outEdges.size()  +  1);	  return    tryRemoveUnconditionalBranching(first,    first.outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  outEdges	64	None	replace
871	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  next.outEdges.size());  [CE]  package  next  does  not  exist  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  next.outEdges.size());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  next.outEdges.size());	  return    tryRemoveUnconditionalBranching(first,    first.outEdges.size());    	non-compiled	[CE]  package  next  does  not  exist	64	None	replace
872	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.cloneTree());  Node  nextCfgNode  =  first.cloneTree();  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.cloneTree());  Node  nextCfgNode  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.cloneTree());  Node  nextCfgNode  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    nextCfgNode    =    first.cloneTree();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	119	None	replace
873	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    next    =    first.getNext();    if(next!=    null)    {    return    tryRemoveUnconditionalBranching(first.getNext());    }    	compilable	  [FE]  AssertionFailedError  	121	6	replace
874	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    next    =    first.getNext();    if(next!=    null)    {    return    tryRemoveUnconditionalBranching(first.getNext());    }    	compilable	  [FE]  AssertionFailedError  	121	6	replace
875	[BUG]  [BUGGY]  Node  first  =  first.getNext();  if(next!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.getNext();  if(next!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.getNext();  if(next!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    next    =    first.getNext();    if(next!=    null)    {    return    tryRemoveUnconditionalBranching(first.getNext());    }    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	121	None	replace
876	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  if(next!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  first.getNext();  if(next!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    next    =    first.getNext();    if(next!=    null)    {    return    tryRemoveUnconditionalBranching(first.getNext());    }    	compilable	  [FE]  RuntimeException  	121	1	replace
877	[BUG]  [BUGGY]  Node  next  =  first.getNext();  if(next!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  if(next!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  if(next!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    next    =    first.getNext();    if(next!=    null)    {    return    tryRemoveUnconditionalBranching(first.getNext());    }    	compilable	  [FE]  RuntimeException  	121	1	replace
878	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  next,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  next,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  next,  n);	          Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first,    next);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	74	None	replace
879	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  next);  [CE]  cannot  find  symbol  nextCfgNode  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  next);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  next);	          Node    next    =    first.getNext();    return    tryRemoveUnconditionalBranching(first,    next);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	74	None	replace
880	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(gNode.getNext());  Node  first  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(gNode.getNext());  Node  first  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(gNode.getNext());  Node  first  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
881	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(gNode.getNext());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(gNode.getNext());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(gNode.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
882	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	30	11	add
883	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	30	11	add
884	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.NAME);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	30	11	add
885	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.NAME);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	30	11	add
886	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.CALL);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	30	11	add
887	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.CALL);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	30	11	add
888	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.NEW);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.NEW);	  	compilable	  [FE]  RuntimeException  	30	11	add
889	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.NEW);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.NEW);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.NEW);	  	compilable	  [FE]  RuntimeException  	30	11	add
890	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.VAR);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	30	11	add
891	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.VAR);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	30	11	add
892	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.STRING);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	30	11	add
893	[BUG]  [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.STRING);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.getNext();  Preconditions.checkState(first.getType()  ==  Token.STRING);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node    next    =    first.getNext();    Preconditions.checkState(first.getType()  ==  Token.STRING);	  	compilable	  [FE]  RuntimeException  	30	11	add
894	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(0).getValue());  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(0).getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(0).getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
895	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(1).getValue());  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(1).getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(1).getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
896	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(1).getValue());  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(1).getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination(),  outEdges.get(1).getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
897	[BUG]  [BUGGY]  Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first,  first.cloneTree());  }  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first,  first.cloneTree());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first,  first.cloneTree());  }	  return    tryRemoveUnconditionalBranching(first.cloneTree());    Node    first    =    first.cloneTree();    if(removeNoOpStatements)    {    return    tryRemoveUnconditionalBranching(first.cloneTree());    }    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	56	None	replace
898	[BUG]  [BUGGY]  parent  ==  null  ||  first!=  parent.getParent())  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  null  ||  first!=  parent.getParent())  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  null  ||  first!=  parent.getParent())  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  not  a  statement	91	None	replace
899	[BUG]  [BUGGY]  parent  ==  first  ||(n.hasChildren()  &&  first.getFirstChild().getType()  ==  Token.FUNCTION))  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  first  ||(n.hasChildren()  &&  first.getFirstChild().getType()  ==  Token.FUNCTION))  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  first  ||(n.hasChildren()  &&  first.getFirstChild().getType()  ==  Token.FUNCTION))  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first);    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  not  a  statement	91	None	replace
900	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.removeFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  first.removeFirstChild();	  Node    next    =    first.getNext();    	compilable	  [FE]  NullPointerException  	31	10	replace
901	[BUG]  [BUGGY]  Node  next  =  first.removeFirstChild();  [FE]  NullPointerException  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first.removeFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.removeFirstChild();	  Node    next    =    first.getNext();    	compilable	  [FE]  NullPointerException  	31	10	replace
902	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first!=  null?  first.getNext()  :  n.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  first!=  null?  first.getNext()  :  n.getNext();	  Node    next    =    first.getNext();    	compilable	  [FE]  RuntimeException  	31	1	replace
903	[BUG]  [BUGGY]  Node  next  =  first!=  null?  first.getNext()  :  n.getNext();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first!=  null?  first.getNext()  :  n.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first!=  null?  first.getNext()  :  n.getNext();	  Node    next    =    first.getNext();    	compilable	  [FE]  RuntimeException  	31	1	replace
904	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first  ==  null?  first.getNext()  :  n.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  first  ==  null?  first.getNext()  :  n.getNext();	  Node    next    =    first.getNext();    	compilable	  [FE]  RuntimeException  	31	1	replace
905	[BUG]  [BUGGY]  Node  next  =  first  ==  null?  first.getNext()  :  n.getNext();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  next  =  first  ==  null?  first.getNext()  :  n.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first  ==  null?  first.getNext()  :  n.getNext();	  Node    next    =    first.getNext();    	compilable	  [FE]  RuntimeException  	31	1	replace
906	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  second);  [CE]  cannot  find  symbol  second  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  second);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  n,  second);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    n);    	non-compiled	[CE]  cannot  find  symbol  second	70	None	replace
907	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  first.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  first  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getFirstChild());    Node  first  =  first.getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	add
908	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  nextCfgNode  =  first.getNext();  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  Node  nextCfgNode  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getFirstChild());    Node  nextCfgNode  =  first.getNext();	  	non-compiled	[CE]  unreachable  statement	68	None	add
909	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  n  =  first.cloneTree();  [CE]  unreachable  statement  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  n  =  first.cloneTree();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext());  n  =  first.cloneTree();	  return    tryRemoveUnconditionalBranching(first.cloneTree());    n    =    first.cloneTree();    	non-compiled	[CE]  unreachable  statement	96	None	replace
910	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getString());  [CE]  cannot  find  symbol  outEdges  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getString());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getString());	  return    tryRemoveUnconditionalBranching(first,    first.getString());    	non-compiled	[CE]  cannot  find  symbol  outEdges	18	None	replace
911	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  nextCfgNode);	  return    tryRemoveUnconditionalBranching(first.getLastChild(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	72	None	replace
912	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }	  return    tryRemoveUnconditionalBranching(first.getLastChild());    return    tryRemoveUnconditionalBranching(first.getLastChild());    	compilable	  [FE]  AssertionFailedError  	2	2	replace
913	[BUG]  [BUGGY]  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }	  return    tryRemoveUnconditionalBranching(first.getLastChild());    return    tryRemoveUnconditionalBranching(first.getLastChild());    	compilable	  [FE]  AssertionFailedError  	2	2	replace
914	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }	  return    tryRemoveUnconditionalBranching(first.getLastChild());    return    tryRemoveUnconditionalBranching(first.getLastChild());    	compilable	  [FE]  AssertionFailedError  	2	2	replace
915	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }	  return    tryRemoveUnconditionalBranching(first.getLastChild());    return    tryRemoveUnconditionalBranching(first.getLastChild());    	compilable	  [FE]  AssertionFailedError  	2	2	replace
916	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  else  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  else  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }	  return    tryRemoveUnconditionalBranching(first.getLastChild());    return    tryRemoveUnconditionalBranching(first.getLastChild());    	compilable	  [FE]  AssertionFailedError  	2	2	replace
917	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  else  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  else  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  else  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }	  return    tryRemoveUnconditionalBranching(first.getLastChild());    return    tryRemoveUnconditionalBranching(first.getLastChild());    	compilable	  [FE]  AssertionFailedError  	2	2	replace
918	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  else  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  else  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }	  return    tryRemoveUnconditionalBranching(first.getLastChild());    return    tryRemoveUnconditionalBranching(first.getLastChild());    	compilable	  [FE]  AssertionFailedError  	2	2	replace
919	[BUG]  [BUGGY]  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  else  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  else  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  else  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }	  return    tryRemoveUnconditionalBranching(first.getLastChild());    return    tryRemoveUnconditionalBranching(first.getLastChild());    	compilable	  [FE]  AssertionFailedError  	2	2	replace
920	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  n.getLastChild());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  n.getLastChild());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  n.getLastChild());	  return    tryRemoveUnconditionalBranching(first,    n.getFirstChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	108	None	replace
921	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  n.getValue());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  n.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  n.getValue());	  return    tryRemoveUnconditionalBranching(first,    n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
922	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getFirstChild(),  nextCfgNode);	  return    tryRemoveUnconditionalBranching(first,    n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	108	None	replace
923	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(secondCfgNode);  [CE]  cannot  find  symbol  secondCfgNode  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(secondCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(secondCfgNode);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	126	None	replace
924	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  gNode.removeChild(first);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getParent());    gNode.removeChild(first);	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
925	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  gNode.removeChild(first);  return  tryRemoveUnconditionalBranching(first.getParent());  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  gNode.removeChild(first);  return  tryRemoveUnconditionalBranching(first.getParent());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getParent());    gNode.removeChild(first);  return  tryRemoveUnconditionalBranching(first.getParent());	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
926	[BUG]  [BUGGY]  parent  ==  first)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  parent  ==  first)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	parent  ==  first)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  not  a  statement	92	None	replace
927	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(1).getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  cannot  find  symbol  outEdges  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(1).getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(1).getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  cannot  find  symbol  outEdges	92	None	replace
928	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  cannot  find  symbol  outEdges  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).getDestination().getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	  if(first!=    null)    {    return    tryRemoveUnconditionalBranching(first.getValue());    }    else    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));    }    	non-compiled	[CE]  cannot  find  symbol  outEdges	92	None	replace
929	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  null);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  null);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  null);	  return    tryRemoveUnconditionalBranching(first,    null);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	47	None	replace
930	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n.removeChild(first));  [CE]  'void'  type  not  allowed  here  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n.removeChild(first));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  n.removeChild(first));	  return    tryRemoveUnconditionalBranching(first.getLastChild());    gNode.removeChild(first);    	non-compiled	[CE]  'void'  type  not  allowed  here	116	None	replace
931	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  root,  cfgStack);  [CE]  cannot  find  symbol  root  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  root,  cfgStack);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  root,  cfgStack);	  return    tryRemoveUnconditionalBranching(first,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  root	105	None	replace
932	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  this);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  this);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  this);	  return    tryRemoveUnconditionalBranching(first.getString(),    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	17	None	replace
933	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  first.get(1));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  first.get(1));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  first.get(1));	  return    tryRemoveUnconditionalBranching(first,    n.get(1));    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
934	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.clone());  [CE]  cannot  find  symbol  outEdges  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.clone());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.clone());	  return    tryRemoveUnconditionalBranching(first.cloneNode());    	non-compiled	[CE]  cannot  find  symbol  outEdges	86	None	replace
935	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  nextCfgNode);	  return    tryRemoveUnconditionalBranching(first.cloneTree(),    n);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	82	None	replace
936	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.cloneTree(),  n,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.cloneTree(),  n,  outEdges);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.cloneTree(),  n,  outEdges);	  return    tryRemoveUnconditionalBranching(first.cloneTree(),    n);    	non-compiled	[CE]  cannot  find  symbol  outEdges	82	None	replace
937	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  first.cloneTree());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  first.cloneTree());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  n,  first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree(),    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	82	None	replace
938	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  n,  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first,  n,  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first,  n,  nextCfgNode);	  return    tryRemoveUnconditionalBranching(first,    gNode,    n);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	107	None	replace
939	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  getCfgNode());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  getCfgNode());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  getCfgNode());	  return    tryRemoveUnconditionalBranching(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
940	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  next);  Node  next  =  first.getNext();  [CE]  cannot  find  symbol  next  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  next);  Node  next  =  first.getNext();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  next);  Node  next  =  first.getNext();	  return    tryRemoveUnconditionalBranching(first.getNext());    Node    next    =    first.getNext();    	non-compiled	[CE]  cannot  find  symbol  next	43	None	replace
941	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  first.getValue(),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  first.getValue(),  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  first.getValue(),  nextCfgNode);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue(),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
942	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  root.getValue(),  nextCfgNode);  [CE]  cannot  find  symbol  root  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  root.getValue(),  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  root.getValue(),  nextCfgNode);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue(),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  root	124	None	replace
943	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  last.getValue(),  nextCfgNode);  [CE]  cannot  find  symbol  last  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  last.getValue(),  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  last.getValue(),  nextCfgNode);	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue(),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  last	124	None	replace
944	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  node);  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  node);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  node);	  return    tryRemoveUnconditionalBranching(first,    next);    	non-compiled	[CE]  cannot  find  symbol  node	117	None	replace
945	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Preconditions.checkState(first.getType()  ==  Token.BLOCK);	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    	compilable	  [FE]  RuntimeException  	1	11	replace
946	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Preconditions.checkState(first.getType()  ==  Token.BLOCK);	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    first    =    first.getLastChild();    	compilable	  [FE]  RuntimeException  	1	11	replace
947	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  n.getValue());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  n.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getString(),  n.getValue());	  return    tryRemoveUnconditionalBranching(first,    n.getString());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
948	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  BLOCK);  [CE]  cannot  find  symbol  BLOCK  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString(),  BLOCK);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getString(),  BLOCK);	  return    tryRemoveUnconditionalBranching(first,    n.getString());    	non-compiled	[CE]  cannot  find  symbol  BLOCK	16	None	replace
949	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.removeFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  first.removeFirstChild();	  Node    nextCfgNode    =    first.getNext();    	compilable	  [FE]  NullPointerException  	29	10	replace
950	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.removeFirstChild();  [FE]  NullPointerException  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.removeFirstChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.removeFirstChild();	  Node    nextCfgNode    =    first.getNext();    	compilable	  [FE]  NullPointerException  	29	10	replace
951	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  else  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  else  {  return  tryRemoveUnconditionalBranching(first.getNext());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  AssertionFailedError  	38	6	replace
952	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  else  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  else  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  else  {  return  tryRemoveUnconditionalBranching(first.getNext());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  AssertionFailedError  	38	6	replace
953	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  else  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  else  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  else  {  return  tryRemoveUnconditionalBranching(first.getValue());  }	  return    tryRemoveUnconditionalBranching(first.getNext());    return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
954	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n,  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n,  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  n,  nextCfgNode);	  return    tryRemoveUnconditionalBranching(first.getNext(),    n);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	24	None	replace
955	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(first,  n.getNext());  gNode.removeChild(first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  tryRemoveUnconditionalBranching(first,  n.getNext());  gNode.removeChild(first);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	tryRemoveUnconditionalBranching(first,  n.getNext());  gNode.removeChild(first);	  return    tryRemoveUnconditionalBranching(first.getNext());    gNode.removeChild(first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	122	None	replace
956	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  last);  [CE]  cannot  find  symbol  last  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  last);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  last);	  return    tryRemoveUnconditionalBranching(first,    n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  last	76	None	replace
957	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  next,  n);  [CE]  cannot  find  symbol  next  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  next,  n);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  next,  n);	  return    tryRemoveUnconditionalBranching(first,    nextCfgNode,    n);    	non-compiled	[CE]  cannot  find  symbol  next	129	None	replace
958	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  n.getParent());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  n.getParent());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  n.getParent());	  return    tryRemoveUnconditionalBranching(first,    n.getLastChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	71	None	replace
959	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  n.getValue());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  n.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getLastChild(),  n.getValue());	  return    tryRemoveUnconditionalBranching(first,    n.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
960	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination(),  first.getValue());  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination(),  first.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination(),  first.getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(n.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
961	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  n.getDestination().getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(n.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
962	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n,  outEdges.getDestination().getValue());  [CE]  cannot  find  symbol  outEdges  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n,  outEdges.getDestination().getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n,  outEdges.getDestination().getValue());	  Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(n.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol  outEdges	33	None	replace
963	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.get(first.getValue()));  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.get(first.getValue()));  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  outEdges.get(first.getValue()));	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue());    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
964	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode.getValue());  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode.getValue());  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  firstCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(firstCfgNode.getValue());	          Node    nextCfgNode    =    first.getNext();    return    tryRemoveUnconditionalBranching(first.getValue());    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
965	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(gNode,  first,  n,  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(gNode,  first,  n,  nextCfgNode);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(gNode,  first,  n,  nextCfgNode);	  return    tryRemoveUnconditionalBranching(gNode,    first,    n);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	78	None	replace
966	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  next,  fallThrough);  [CE]  cannot  find  symbol  next  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first,  next,  fallThrough);  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  next,  fallThrough);	  return    tryRemoveUnconditionalBranching(first,    n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  next	128	None	replace
967	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  last  =  n.getLastChild();  [CE]  cannot  find  symbol  last  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();      [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  last  =  n.getLastChild();  [BUGGY]      }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getFirstChild());  last  =  n.getLastChild();	  return    tryRemoveUnconditionalBranching(first.getLastChild());    Node    last    =    first.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  last	102	None	replace
