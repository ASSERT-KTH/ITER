bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  first  =  first.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  first  =  first.getLastChild();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getLastChild());    Node  first  =  first.getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	5	None	add
2	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  return  tryRemoveUnconditionalBranching(first.getLastChild());  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  return  tryRemoveUnconditionalBranching(first.getLastChild());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getLastChild());    return  tryRemoveUnconditionalBranching(first.getLastChild());	  	non-compiled	[CE]  unreachable  statement	5	None	add
3	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getLastChild());    Node  first  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	5	None	add
4	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  first  =  first.getLastChild();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  first  =  first.getLastChild();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getLastChild());    Node  first  =  first.getLastChild();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first.getLastChild());  }	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	5	None	add
5	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  first  =  n.getLastChild();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getLastChild());    Node  first  =  n.getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	5	None	add
6	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getLastChild());    Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	5	None	add
7	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [CE]  unreachable  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getLastChild());    Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(first.getLastChild());	  	non-compiled	[CE]  unreachable  statement	5	None	add
8	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(last.getLastChild());  [CE]  unreachable  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(last.getLastChild());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getLastChild());    Node  last  =  first.getLastChild();  return  tryRemoveUnconditionalBranching(last.getLastChild());	  	non-compiled	[CE]  unreachable  statement	5	None	add
9	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.get(0));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.get(0));  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.get(0));	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(0));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
10	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.get(1));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.get(1));  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.get(1));	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(0));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
11	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.get(1));  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.get(1));  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.get(1));	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(0));    	non-compiled	[CE]  cannot  find  symbol  outEdges	8	None	replace
12	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.get(0));  [CE]  cannot  find  symbol  outEdges  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.get(0));  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.outEdges.get(0));	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(0));    	non-compiled	[CE]  cannot  find  symbol  outEdges	8	None	replace
13	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.get(0));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.get(0));  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.get(0));	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(0));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
14	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.get(0));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.get(0));  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode.get(0));	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(0));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
15	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  n);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  n);	  return    tryRemoveUnconditionalBranching(first.getString());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
16	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getString());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getString());	  return    tryRemoveUnconditionalBranching(first.getString());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
17	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]              AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  outEdges);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  outEdges);	  return    tryRemoveUnconditionalBranching(first.getString());    	non-compiled	[CE]  cannot  find  symbol  outEdges	14	None	replace
18	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getString());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getString());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.getString());	  return    tryRemoveUnconditionalBranching(first.getString());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
19	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  first);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  first);	  return    tryRemoveUnconditionalBranching(first.getString());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
20	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString()  +  1);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString()  +  1);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString()  +  1);	  return    tryRemoveUnconditionalBranching(first.getString());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
21	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.getString());  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.getString());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.getString());	  return    tryRemoveUnconditionalBranching(first.getString());    	non-compiled	[CE]  cannot  find  symbol  outEdges	14	None	replace
22	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getNext());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	4	None	replace
23	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  outEdges);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  outEdges);	  return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  cannot  find  symbol  outEdges	4	None	replace
24	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext(),  n);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext(),  n);	  return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	4	None	replace
25	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getNext());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.getNext());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.getNext());	  return    tryRemoveUnconditionalBranching(first.getNext());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	4	None	replace
26	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	return  tryRemoveUnconditionalBranching(first.getParent());	  return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  StackOverflowError  	4	11	replace
27	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  [FE]  StackOverflowError  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getParent());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getParent());	  return    tryRemoveUnconditionalBranching(first.getNext());    	compilable	  [FE]  StackOverflowError  	4	11	replace
28	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  Node  nextCfgNode  =  first.getNext();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  nextCfgNode  =  first.getNext();	      	compilable	  [FE]  RuntimeException  	10	1	replace
29	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  Node  nextCfgNode  =  first.getNext();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();	      	compilable	  [FE]  RuntimeException  	10	1	replace
30	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  Node  next  =  first.getNext();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	Node  next  =  first.getNext();	      	compilable	  [FE]  RuntimeException  	10	1	replace
31	[BUG]  [BUGGY]  Node  next  =  first.getNext();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  Node  next  =  first.getNext();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();	      	compilable	  [FE]  RuntimeException  	10	1	replace
32	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  nextCfgNode);	      	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	10	None	replace
33	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination().getValue());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(n.getDestination().getValue());	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
34	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
35	[BUG]  [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
36	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]                RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getDestination().getValue());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getDestination().getValue());	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
37	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  first  =  first.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  first  =  first.getNext();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getNext());    Node  first  =  first.getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
38	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  return  tryRemoveUnconditionalBranching(first.getNext());  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getNext());    return  tryRemoveUnconditionalBranching(first.getNext());	  	non-compiled	[CE]  unreachable  statement	3	None	add
39	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getNext());    Node  first  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
40	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  first  =  n.getLastChild();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getNext());    Node  first  =  n.getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
41	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  first  =  n.getNext();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getNext());    Node  first  =  n.getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
42	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getNext());    Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());	  	non-compiled	[CE]  unreachable  statement	3	None	add
43	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  next  =  first.getNext();  [CE]  unreachable  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  next  =  first.getNext();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getNext());    Node  next  =  first.getNext();	  	non-compiled	[CE]  unreachable  statement	3	None	add
44	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getNext());    Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(first.getNext());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
45	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  fallThrough);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  fallThrough);	  return    tryRemoveUnconditionalBranching(first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	1	None	replace
46	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nextCfgNode);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  nextCfgNode);	  return    tryRemoveUnconditionalBranching(first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	1	None	replace
47	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  null);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  null);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  null);	  return    tryRemoveUnconditionalBranching(first,    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	1	None	replace
48	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first);	  return    tryRemoveUnconditionalBranching(first,    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	1	None	replace
49	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.outEdges);	  return    tryRemoveUnconditionalBranching(first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  outEdges	1	None	replace
50	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveBlock(first,  outEdges);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  outEdges);	  return    tryRemoveBlock(first);    	non-compiled	[CE]  cannot  find  symbol  outEdges	13	None	replace
51	[BUG]  [BUGGY]  return  tryRemoveBlock(first,  n);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveBlock(first,  n);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first,  n);	  return    tryRemoveBlock(first);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
52	[BUG]  [BUGGY]  return  tryRemoveBlock(first.getNext());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveBlock(first.getNext());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first.getNext());	  return    tryRemoveBlock(first);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
53	[BUG]  [BUGGY]  return  tryRemoveBlock(first.getLastChild());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveBlock(first.getLastChild());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first.getLastChild());	  return    tryRemoveBlock(first);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
54	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  first  =  first.cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  first  =  first.cloneTree();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneTree());    Node  first  =  first.cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
55	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  first  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  first  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneTree());    Node  first  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
56	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first.cloneTree());  }  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first.cloneTree());  }  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneTree());    Node  first  =  first.cloneTree();  if(removeNoOpStatements)  {  return  tryRemoveUnconditionalBranching(first.cloneTree());  }	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
57	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  first  =  n.getLastChild();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneTree());    Node  first  =  n.getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
58	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneTree());    Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.cloneTree());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
59	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  last  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [CE]  unreachable  statement  [FE]              RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  last  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneTree());    Node  last  =  first.cloneTree();  return  tryRemoveUnconditionalBranching(first.cloneTree());	  	non-compiled	[CE]  unreachable  statement	11	None	add
60	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [CE]  unreachable  statement  [FE]                RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneTree());    Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.cloneTree());	  	non-compiled	[CE]  unreachable  statement	11	None	add
61	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  first  =  n.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  first  =  n.getFirstChild();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneTree());    Node  first  =  n.getFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
62	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.size());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.size());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.size());	  return    tryRemoveUnconditionalBranching(first,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
63	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.size());  [CE]  cannot  find  symbol  outEdges  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.size());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.outEdges.size());	  return    tryRemoveUnconditionalBranching(first,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  outEdges	7	None	replace
64	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.outEdges.size());  [CE]  cannot  find  symbol  outEdges  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.outEdges.size());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.outEdges.size());	  return    tryRemoveUnconditionalBranching(first,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  outEdges	7	None	replace
65	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getOutEdges());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getOutEdges());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getOutEdges());	  return    tryRemoveUnconditionalBranching(first,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
66	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.size()  -  1);  [CE]  cannot  find  symbol  outEdges  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.size()  -  1);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.size()  -  1);	  return    tryRemoveUnconditionalBranching(first,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  outEdges	7	None	replace
67	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  inEdges.size());  [CE]  cannot  find  symbol  inEdges  [FE]                          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  inEdges.size());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  inEdges.size());	  return    tryRemoveUnconditionalBranching(first,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  inEdges	7	None	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	return  tryRemoveUnconditionalBranching(first.getFirstChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    	compilable	  [FE]  AssertionFailedError  	6	2	replace
69	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getFirstChild());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getFirstChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    	compilable	  [FE]  AssertionFailedError  	6	2	replace
70	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  n);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  n);	  return    tryRemoveUnconditionalBranching(first.getLastChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	6	None	replace
71	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getLastChild());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	6	None	replace
72	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  outEdges);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  outEdges);	  return    tryRemoveUnconditionalBranching(first.getLastChild());    	non-compiled	[CE]  cannot  find  symbol  outEdges	6	None	replace
73	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  first);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild(),  first);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild(),  first);	  return    tryRemoveUnconditionalBranching(first.getLastChild());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	6	None	replace
74	[BUG]  [BUGGY]      Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  next);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]      Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  next);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	        Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first,  next);	  	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	9	None	add
75	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  outEdges);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  outEdges);	  return    tryRemoveUnconditionalBranching(first,    n);    	non-compiled	[CE]  cannot  find  symbol  outEdges	2	None	replace
76	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  fallThrough);  [CE]  cannot  find  symbol  fallThrough  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  fallThrough);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  fallThrough);	  return    tryRemoveUnconditionalBranching(first,    n);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	2	None	replace
77	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  rootNode);  [CE]  cannot  find  symbol  rootNode  [FE]              AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  rootNode);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  rootNode);	  return    tryRemoveUnconditionalBranching(first,    n);    	non-compiled	[CE]  cannot  find  symbol  rootNode	2	None	replace
78	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(gNode,  first,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(gNode,  first,  n);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(gNode,  first,  n);	  return    tryRemoveUnconditionalBranching(first,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	2	None	replace
79	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  outEdges.size());  [CE]  cannot  find  symbol  outEdges  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  outEdges.size());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  outEdges.size());	  return    tryRemoveUnconditionalBranching(first,    n);    	non-compiled	[CE]  cannot  find  symbol  outEdges	2	None	replace
80	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  exceptions);  [CE]  cannot  find  symbol  exceptions  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  exceptions);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  exceptions);	  return    tryRemoveUnconditionalBranching(first,    n);    	non-compiled	[CE]  cannot  find  symbol  exceptions	2	None	replace
81	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.cloneTree());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	12	None	replace
82	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  n);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  n);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	12	None	replace
83	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]        RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree(),  outEdges);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree(),  outEdges);	  return    tryRemoveUnconditionalBranching(first.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  outEdges	12	None	replace
84	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.cloneTree());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  first.cloneTree());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  first.cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	12	None	replace
85	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	return  tryRemoveUnconditionalBranching(first.cloneNode());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    	compilable	  [FE]  RuntimeException  	12	1	replace
86	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneNode());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneNode());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    	compilable	  [FE]  RuntimeException  	12	1	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	      	compilable	  [FE]  AssertionFailedError  	10	2	replace
88	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	      	compilable	  [FE]  AssertionFailedError  	10	2	replace
89	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	      	compilable	  [FE]  AssertionFailedError  	10	2	replace
91	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	      	compilable	  [FE]  AssertionFailedError  	10	2	replace
92	[BUG]  [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	if(first!=  null)  {  return  tryRemoveUnconditionalBranching(first.getValue());  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  }	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
93	[BUG]  [BUGGY]      Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]      Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	        Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
94	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  next  =  first.cloneTree();  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  next  =  first.cloneTree();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneTree());    Node  next  =  first.cloneTree();	  	non-compiled	[CE]  unreachable  statement	11	None	add
95	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  last  =  first.cloneTree();  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  last  =  first.cloneTree();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneTree());    Node  last  =  first.cloneTree();	  	non-compiled	[CE]  unreachable  statement	11	None	add
96	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  n  =  first.cloneTree();  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  n  =  first.cloneTree();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneTree());    n  =  first.cloneTree();	  	non-compiled	[CE]  unreachable  statement	11	None	add
97	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  gNode.removeChild(first);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  gNode.removeChild(first);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneTree());    gNode.removeChild(first);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
98	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  first  =  n.getNext();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneTree());    Node  first  =  n.getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
99	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getNext());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getNext());    Node  first  =  n.getLastChild();  return  tryRemoveUnconditionalBranching(first.getNext());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
100	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.removeFirstChild());	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(0));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	8	None	replace
101	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.get(1));  [CE]  cannot  find  symbol  outEdges  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.outEdges.get(1));  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.outEdges.get(1));	  return    tryRemoveUnconditionalBranching(first,    outEdges.get(0));    	non-compiled	[CE]  cannot  find  symbol  outEdges	8	None	replace
102	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  last  =  first.getLastChild();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  last  =  first.getLastChild();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getLastChild());    Node  last  =  first.getLastChild();	  	non-compiled	[CE]  unreachable  statement	5	None	add
103	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode);	  return    tryRemoveUnconditionalBranching(first,    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	1	None	replace
104	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  cfgNode);  [CE]  cannot  find  symbol  cfgNode  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  cfgNode);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  cfgNode);	  return    tryRemoveUnconditionalBranching(first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	1	None	replace
105	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  cfgStack);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  cfgStack);	  return    tryRemoveUnconditionalBranching(first,    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	1	None	replace
106	[BUG]  [BUGGY]  return  tryRemoveBlock(first.getFirstChild());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveBlock(first.getFirstChild());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first.getFirstChild());	  return    tryRemoveBlock(first);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
107	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode,  n);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode,  n);	  return    tryRemoveUnconditionalBranching(first,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	2	None	replace
108	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n.getFirstChild());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n.getFirstChild());	  return    tryRemoveUnconditionalBranching(first,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	2	None	replace
109	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  rootEdges);  [CE]  cannot  find  symbol  rootEdges  [FE]              AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  rootEdges);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  rootEdges);	  return    tryRemoveUnconditionalBranching(first,    n);    	non-compiled	[CE]  cannot  find  symbol  rootEdges	2	None	replace
110	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  null);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  null);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  null);	  return    tryRemoveUnconditionalBranching(first,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	2	None	replace
111	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.outEdges.size());  [CE]  cannot  find  symbol  outEdges  [FE]                AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  gNode.outEdges.size());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  gNode.outEdges.size());	  return    tryRemoveUnconditionalBranching(first,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  outEdges	7	None	replace
112	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  OutEdges.size());  [CE]  cannot  find  symbol  OutEdges  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  OutEdges.size());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  OutEdges.size());	  return    tryRemoveUnconditionalBranching(first,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  OutEdges	7	None	replace
113	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  next  =  first.getLastChild();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  next  =  first.getLastChild();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getLastChild());    Node  next  =  first.getLastChild();	  	non-compiled	[CE]  unreachable  statement	5	None	add
114	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  last  =  n.getLastChild();  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  last  =  n.getLastChild();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getLastChild());    Node  last  =  n.getLastChild();	  	non-compiled	[CE]  unreachable  statement	5	None	add
115	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  next  =  first.getNext();  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  Node  next  =  first.getNext();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getLastChild());    Node  next  =  first.getNext();	  	non-compiled	[CE]  unreachable  statement	5	None	add
116	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  gNode.removeChild(first);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  gNode.removeChild(first);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getLastChild());    gNode.removeChild(first);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
117	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  next);  [CE]  cannot  find  symbol  next  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  next);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  next);	  return    tryRemoveUnconditionalBranching(first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  next	1	None	replace
118	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  nextCfgNode  =  first.getNext();  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  nextCfgNode  =  first.getNext();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneTree());    Node  nextCfgNode  =  first.getNext();	  	non-compiled	[CE]  unreachable  statement	11	None	add
119	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  nextCfgNode  =  first.cloneTree();  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  Node  nextCfgNode  =  first.cloneTree();  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneTree());    Node  nextCfgNode  =  first.cloneTree();	  	non-compiled	[CE]  unreachable  statement	11	None	add
120	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  NodeUtil.removeChild(first,  n);  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  NodeUtil.removeChild(first,  n);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.cloneTree());    NodeUtil.removeChild(first,  n);	  	non-compiled	[CE]  unreachable  statement	11	None	add
121	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  next  =  first.getNext();  if(next!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  Node  next  =  first.getNext();  if(next!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getNext());    Node  next  =  first.getNext();  if(next!=  null)  {  return  tryRemoveUnconditionalBranching(first.getNext());  }	  	non-compiled	[CE]  unreachable  statement	3	None	add
122	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  gNode.removeChild(first);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  gNode.removeChild(first);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getNext());    gNode.removeChild(first);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
123	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  gNode.removeChild(first);  return  tryRemoveUnconditionalBranching(first.getNext());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  gNode.removeChild(first);  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return    tryRemoveUnconditionalBranching(first.getNext());    gNode.removeChild(first);  return  tryRemoveUnconditionalBranching(first.getNext());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
124	[BUG]  [BUGGY]      Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue(),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]      Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue(),  nextCfgNode);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	        Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue(),  nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
125	[BUG]  [BUGGY]      Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]      Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	        Node  next  =  first.getNext();  return  tryRemoveUnconditionalBranching(first.getValue());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
126	[BUG]  [BUGGY]      Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(nextCfgNode);  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]      Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	        Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(nextCfgNode);	  	non-compiled	[CE]  unreachable  statement	9	None	add
127	[BUG]  [BUGGY]      Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(node.getDestination().getValue());  [CE]  cannot  find  symbol  node  [FE]          RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]      Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(node.getDestination().getValue());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	        Node  nextCfgNode  =  first.getNext();  return  tryRemoveUnconditionalBranching(node.getDestination().getValue());	  	non-compiled	[CE]  cannot  find  symbol  node	9	None	add
128	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n,  nextCfgNode);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n,  nextCfgNode);	  return    tryRemoveUnconditionalBranching(first,    n);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	2	None	replace
129	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  n);  [CE]  cannot  find  symbol  nextCfgNode  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  n);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  nextCfgNode,  n);	  return    tryRemoveUnconditionalBranching(first,    n);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	2	None	replace
130	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  null);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString(),  null);  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString(),  null);	  return    tryRemoveUnconditionalBranching(first.getString());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
131	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).cloneTree());  [CE]  cannot  find  symbol  outEdges  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).cloneTree());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.get(0).cloneTree());	  return    tryRemoveUnconditionalBranching(first.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  outEdges	12	None	replace
132	[BUG]  [BUGGY]  return  tryRemoveBlank(first.getLastChild());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();    [BUGGY]  return  tryRemoveBlank(first.getLastChild());  [BUGGY]    }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlank(first.getLastChild());	  return    tryRemoveUnconditionalBranching(first.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
