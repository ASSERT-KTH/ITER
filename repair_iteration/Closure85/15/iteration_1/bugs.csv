bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]    AssertionFailedError  [CONTEXT]  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges);  [BUGGY]  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges);	return  tryRemoveUnconditionalBranching(first);  	non-compiled	[CE]  cannot  find  symbol  outEdges	29	None	replace
2	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  n);  [BUGGY]  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  n);	return  tryRemoveUnconditionalBranching(first);  	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	29	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	return  tryRemoveUnconditionalBranching(first.getNext());	return  tryRemoveUnconditionalBranching(first);  	compilable	  [FE]  AssertionFailedError  	29	6	replace
4	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getNext());  [BUGGY]  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getNext());	return  tryRemoveUnconditionalBranching(first);  	compilable	  [FE]  AssertionFailedError  	29	6	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  [BUGGY]  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	return  tryRemoveUnconditionalBranching(first.getLastChild());	return  tryRemoveUnconditionalBranching(first);  	compilable	  [FE]  AssertionFailedError  	29	2	replace
6	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getLastChild());  [BUGGY]  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getLastChild());	return  tryRemoveUnconditionalBranching(first);  	compilable	  [FE]  AssertionFailedError  	29	2	replace
7	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.size());  [CE]  cannot  find  symbol  outEdges  [FE]            AssertionFailedError  [CONTEXT]  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.size());  [BUGGY]  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.size());	return  tryRemoveUnconditionalBranching(first);  	non-compiled	[CE]  cannot  find  symbol  outEdges	29	None	replace
8	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0));  [CE]  cannot  find  symbol  outEdges  [FE]              AssertionFailedError  [CONTEXT]  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();  [BUGGY]  return  tryRemoveUnconditionalBranching(first,  outEdges.get(0));  [BUGGY]  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first,  outEdges.get(0));	return  tryRemoveUnconditionalBranching(first);  	non-compiled	[CE]  cannot  find  symbol  outEdges	29	None	replace
9	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError  [CONTEXT]  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();  [BUGGY]    [BUGGY]  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	  	return  tryRemoveUnconditionalBranching(first);  	compilable	  [FE]  RuntimeException  	29	1	replace
10	[BUG]  [BUGGY]    [FE]  RuntimeException  [FE]                AssertionFailedError  [CONTEXT]  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();  [BUGGY]    [BUGGY]  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	  	return  tryRemoveUnconditionalBranching(first);  	compilable	  [FE]  RuntimeException  	29	1	replace
11	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	return  tryRemoveUnconditionalBranching(first.cloneTree());	return  tryRemoveUnconditionalBranching(first);  	compilable	  [FE]  RuntimeException  	29	1	replace
12	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();  [BUGGY]  return  tryRemoveUnconditionalBranching(first.cloneTree());  [BUGGY]  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.cloneTree());	return  tryRemoveUnconditionalBranching(first);  	compilable	  [FE]  RuntimeException  	29	1	replace
13	[BUG]  [BUGGY]  return  tryRemoveBlock(first);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();  [BUGGY]  return  tryRemoveBlock(first);  [BUGGY]  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveBlock(first);	return  tryRemoveUnconditionalBranching(first);  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
14	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {  Node  first  =  n.getFirstChild();  [BUGGY]  return  tryRemoveUnconditionalBranching(first.getString());  [BUGGY]  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	return  tryRemoveUnconditionalBranching(first.getString());	return  tryRemoveUnconditionalBranching(first);  	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	29	None	replace
