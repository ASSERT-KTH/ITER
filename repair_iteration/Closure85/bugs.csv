bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return n; [FE] AssertionFailedError [CONTEXT]         if (n == null) { [BUGGY] return n; [BUGGY] } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { return n; } if (n.getParent() == null) { List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5773502691896258	144	144	2	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]         if (n == null) { [BUGGY] [BUGGY] return n; } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { return n; } if (n.getParent() == null) { List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5773502691896258	144	144	2	add	
3	[BUG] [BUGGY] removeDeadExprStatementSafely(n); [FE] AssertionFailedError [CONTEXT] if (outEdges.size() == 1 &&  (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) { Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); Node nextCfgNode = outEdges.get(0).getDestination().getValue(); if (nextCfgNode == fallThrough) { [BUGGY] removeDeadExprStatementSafely(n); [BUGGY] return fallThrough; } } [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (outEdges.size() == 1 &&  (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) { Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); Node nextCfgNode = outEdges.get(0).getDestination().getValue(); if (nextCfgNode == fallThrough) { [BUGGY] [BUGGY] removeDeadExprStatementSafely(n); return fallThrough; } } [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	
5	[BUG] [BUGGY] return fallThrough; [FE] AssertionFailedError [CONTEXT] if (outEdges.size() == 1 &&  (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) { Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); Node nextCfgNode = outEdges.get(0).getDestination().getValue(); if (nextCfgNode == fallThrough) { removeDeadExprStatementSafely(n); [BUGGY] return fallThrough; [BUGGY] } } [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (outEdges.size() == 1 &&  (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) { Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); Node nextCfgNode = outEdges.get(0).getDestination().getValue(); if (nextCfgNode == fallThrough) { removeDeadExprStatementSafely(n); [BUGGY] [BUGGY] return fallThrough; } } [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	
7	[BUG] [BUGGY] List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); [FE] AssertionFailedError [CONTEXT] case Token.RETURN: if (n.hasChildren()) { break; } case Token.BREAK: case Token.CONTINUE:    [BUGGY] List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); [BUGGY] if (outEdges.size() == 1 &&  (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) { Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); Node nextCfgNode = outEdges.get(0).getDestination().getValue(); if (nextCfgNode == fallThrough) { removeDeadExprStatementSafely(n); return fallThrough; [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.RETURN: if (n.hasChildren()) { break; } case Token.BREAK: case Token.CONTINUE:    [BUGGY] [BUGGY] List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1 &&  (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) { Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); Node nextCfgNode = outEdges.get(0).getDestination().getValue(); if (nextCfgNode == fallThrough) { removeDeadExprStatementSafely(n); return fallThrough; [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	add	
9	[BUG] [BUGGY] if (outEdges.size() == 1 && // If there is a next node, there is no chance this jump is useless.  (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) { [FE] AssertionFailedError [CONTEXT] if (n.hasChildren()) { break; } case Token.BREAK: case Token.CONTINUE:    List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); [BUGGY] if (outEdges.size() == 1 &&   // If there is a next node, there is no chance this jump is useless.      (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) { [BUGGY]  (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) { Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); Node nextCfgNode = outEdges.get(0).getDestination().getValue(); if (nextCfgNode == fallThrough) { removeDeadExprStatementSafely(n); return fallThrough; } [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (n.hasChildren()) { break; } case Token.BREAK: case Token.CONTINUE:    List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); [BUGGY] [BUGGY] if (outEdges.size() == 1 &&   // If there is a next node, there is no chance this jump is useless.      (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {  (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) { Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); Node nextCfgNode = outEdges.get(0).getDestination().getValue(); if (nextCfgNode == fallThrough) { removeDeadExprStatementSafely(n); return fallThrough; } [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	
11	[BUG] [BUGGY] Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); [FE] AssertionFailedError [CONTEXT] if (outEdges.size() == 1 &&  (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) { [BUGGY] Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); [BUGGY] Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); Node nextCfgNode = outEdges.get(0).getDestination().getValue(); if (nextCfgNode == fallThrough) { removeDeadExprStatementSafely(n); return fallThrough; } } [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (outEdges.size() == 1 &&  (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) { [BUGGY] [BUGGY] Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); Node nextCfgNode = outEdges.get(0).getDestination().getValue(); if (nextCfgNode == fallThrough) { removeDeadExprStatementSafely(n); return fallThrough; } } [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	182	182	2	add	
13	[BUG] [BUGGY] Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); [FE] AssertionFailedError [CONTEXT] if (outEdges.size() == 1 &&  (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) { Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); [BUGGY] Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); [BUGGY] Node nextCfgNode = outEdges.get(0).getDestination().getValue(); if (nextCfgNode == fallThrough) { removeDeadExprStatementSafely(n); return fallThrough; } } [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (outEdges.size() == 1 &&  (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) { Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); [BUGGY] [BUGGY] Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); Node nextCfgNode = outEdges.get(0).getDestination().getValue(); if (nextCfgNode == fallThrough) { removeDeadExprStatementSafely(n); return fallThrough; } } [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	add	
15	[BUG] [BUGGY] Node nextCfgNode = outEdges.get(0).getDestination().getValue(); [FE] AssertionFailedError [CONTEXT] if (outEdges.size() == 1 &&  (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) { Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); [BUGGY] Node nextCfgNode = outEdges.get(0).getDestination().getValue(); [BUGGY] if (nextCfgNode == fallThrough) { removeDeadExprStatementSafely(n); return fallThrough; } } [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (outEdges.size() == 1 &&  (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) { Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); [BUGGY] [BUGGY] Node nextCfgNode = outEdges.get(0).getDestination().getValue(); if (nextCfgNode == fallThrough) { removeDeadExprStatementSafely(n); return fallThrough; } } [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	
17	[BUG] [BUGGY] if (nextCfgNode == fallThrough) { [FE] AssertionFailedError [CONTEXT] if (outEdges.size() == 1 &&  (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) { Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); Node nextCfgNode = outEdges.get(0).getDestination().getValue(); [BUGGY] if (nextCfgNode == fallThrough) { [BUGGY] removeDeadExprStatementSafely(n); return fallThrough; } } [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (outEdges.size() == 1 &&  (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) { Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); Node nextCfgNode = outEdges.get(0).getDestination().getValue(); [BUGGY] [BUGGY] if (nextCfgNode == fallThrough) { removeDeadExprStatementSafely(n); return fallThrough; } } [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	
19	[BUG] [BUGGY] Node next = ControlFlowAnalysis.computeFollowNode(n); [FE] AssertionFailedError [CONTEXT] private Node computeFollowing(Node n) { [BUGGY] Node next = ControlFlowAnalysis.computeFollowNode(n); [BUGGY] return next; } [CLASS] UnreachableCodeElimination [METHOD] computeFollowing [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n next  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	195	195	2	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Node computeFollowing(Node n) { [BUGGY] [BUGGY] Node next = ControlFlowAnalysis.computeFollowNode(n); return next; } [CLASS] UnreachableCodeElimination [METHOD] computeFollowing [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n next  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	195	195	2	add	
21	[BUG] [BUGGY] return next; [FE] AssertionFailedError [CONTEXT] private Node computeFollowing(Node n) { Node next = ControlFlowAnalysis.computeFollowNode(n); [BUGGY] return next; [BUGGY] } [CLASS] UnreachableCodeElimination [METHOD] computeFollowing [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n next  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	196	196	2	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Node computeFollowing(Node n) { Node next = ControlFlowAnalysis.computeFollowNode(n); [BUGGY] [BUGGY] return next; } [CLASS] UnreachableCodeElimination [METHOD] computeFollowing [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n next  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	196	196	2	add	
23	[BUG] [BUGGY] return; [FE] AssertionFailedError [CONTEXT] if (n.getType() == Token.EMPTY || (n.getType() == Token.BLOCK && !n.hasChildren())) {  [BUGGY] return; [BUGGY] } [CLASS] UnreachableCodeElimination [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n parent tryNode  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	204	204	2	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (n.getType() == Token.EMPTY || (n.getType() == Token.BLOCK && !n.hasChildren())) {  [BUGGY] [BUGGY] return; } [CLASS] UnreachableCodeElimination [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n parent tryNode  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	204	204	2	add	
25	[BUG] [BUGGY] if (n.hasChildren()) { [FE] AssertionFailedError [CONTEXT] } if (n.getParent() == null) { List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) { return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); } } switch (n.getType()) { case Token.BLOCK: [BUGGY] if (n.hasChildren()) { [BUGGY] Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); } else { return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n)); } case Token.RETURN: if (n.hasChildren()) { break; } case Token.BREAK: [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (n.getParent() == null) { List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) { return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); } } switch (n.getType()) { case Token.BLOCK: [BUGGY] [BUGGY] if (n.hasChildren()) { Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); } else { return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n)); } case Token.RETURN: if (n.hasChildren()) { break; } case Token.BREAK: [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	
27	[BUG] [BUGGY] Node first = n.getFirstChild(); [FE] AssertionFailedError [CONTEXT] if (n.getParent() == null) { List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) { return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); } } switch (n.getType()) { case Token.BLOCK: if (n.hasChildren()) { [BUGGY] Node first = n.getFirstChild(); [BUGGY] return tryRemoveUnconditionalBranching(first); } else { return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n)); } case Token.RETURN: if (n.hasChildren()) { break; } case Token.BREAK: case Token.CONTINUE: [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (n.getParent() == null) { List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) { return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); } } switch (n.getType()) { case Token.BLOCK: if (n.hasChildren()) { [BUGGY] [BUGGY] Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); } else { return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n)); } case Token.RETURN: if (n.hasChildren()) { break; } case Token.BREAK: case Token.CONTINUE: [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	
29	[BUG] [BUGGY] return tryRemoveUnconditionalBranching(first); [FE] AssertionFailedError [CONTEXT] if (n.getParent() == null) { List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) { return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); } } switch (n.getType()) { case Token.BLOCK: if (n.hasChildren()) { Node first = n.getFirstChild(); [BUGGY] return tryRemoveUnconditionalBranching(first); [BUGGY] } else { return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n)); } case Token.RETURN: if (n.hasChildren()) { break; } case Token.BREAK: case Token.CONTINUE:  [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (n.getParent() == null) { List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) { return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); } } switch (n.getType()) { case Token.BLOCK: if (n.hasChildren()) { Node first = n.getFirstChild(); [BUGGY] [BUGGY] return tryRemoveUnconditionalBranching(first); } else { return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n)); } case Token.RETURN: if (n.hasChildren()) { break; } case Token.BREAK: case Token.CONTINUE:  [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	163	163	2	add	
31	[BUG] [BUGGY] tryRemoveUnconditionalBranching(n); [FE] AssertionFailedError [CONTEXT] DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { // Not in CFG. return; } if (gNode.getAnnotation() != GraphReachability.REACHABLE || (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { removeDeadExprStatementSafely(n); return; } [BUGGY] tryRemoveUnconditionalBranching(n); [BUGGY] } [CLASS] UnreachableCodeElimination [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements NodeTraversal t ControlFlowGraph curCfg Node n parent Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { // Not in CFG. return; } if (gNode.getAnnotation() != GraphReachability.REACHABLE || (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { removeDeadExprStatementSafely(n); return; } [BUGGY] [BUGGY] tryRemoveUnconditionalBranching(n); } [CLASS] UnreachableCodeElimination [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements NodeTraversal t ControlFlowGraph curCfg Node n parent Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	
33	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] if (gNode == null) { // Not in CFG. return; } if (gNode.getAnnotation() != GraphReachability.REACHABLE || (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { removeDeadExprStatementSafely(n); return; } tryRemoveUnconditionalBranching(n); [BUGGY] } [BUGGY]  [CLASS] UnreachableCodeElimination [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements NodeTraversal t ControlFlowGraph curCfg Node n parent Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	110	110	2	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (gNode == null) { // Not in CFG. return; } if (gNode.getAnnotation() != GraphReachability.REACHABLE || (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { removeDeadExprStatementSafely(n); return; } tryRemoveUnconditionalBranching(n); [BUGGY] [BUGGY] } [CLASS] UnreachableCodeElimination [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements NodeTraversal t ControlFlowGraph curCfg Node n parent Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	110	110	2	add	
35	[BUG] [BUGGY] if (n == null) { [FE] AssertionFailedError [CONTEXT]          [BUGGY] if (n == null) { [BUGGY] return n; } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { return n; } if (n.getParent() == null) { [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	143	143	2	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]          [BUGGY] [BUGGY] if (n == null) { return n; } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { return n; } if (n.getParent() == null) { [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	143	143	2	add	
37	[BUG] [BUGGY] DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); [FE] AssertionFailedError [CONTEXT]      if (n == null) { return n; } [BUGGY] DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); [BUGGY]  if (gNode == null) { return n; } if (n.getParent() == null) { List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) { return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); } [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	147	147	2	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]      if (n == null) { return n; } [BUGGY] [BUGGY] DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { return n; } if (n.getParent() == null) { List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) { return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); } [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	147	147	2	add	
39	[BUG] [BUGGY] if (gNode == null) { [FE] AssertionFailedError [CONTEXT]    if (n == null) { return n; } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); [BUGGY] if (gNode == null) { [BUGGY] return n; } if (n.getParent() == null) { List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) { return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); } } switch (n.getType()) { [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	149	149	2	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]    if (n == null) { return n; } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); [BUGGY] [BUGGY] if (gNode == null) { return n; } if (n.getParent() == null) { List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) { return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); } } switch (n.getType()) { [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	149	149	2	add	
41	[BUG] [BUGGY] if (n.getParent() == null) { [FE] AssertionFailedError [CONTEXT] if (n == null) { return n; } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { return n; } [BUGGY] if (n.getParent() == null) { [BUGGY] List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) { return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); } } switch (n.getType()) { case Token.BLOCK: if (n.hasChildren()) { Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	153	153	2	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (n == null) { return n; } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { return n; } [BUGGY] [BUGGY] if (n.getParent() == null) { List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) { return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); } } switch (n.getType()) { case Token.BLOCK: if (n.hasChildren()) { Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	153	153	2	add	
43	[BUG] [BUGGY] switch (n.getType()) { [FE] AssertionFailedError [CONTEXT] if (gNode == null) { return n; } if (n.getParent() == null) { List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) { return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); } } [BUGGY] switch (n.getType()) { [BUGGY] case Token.BLOCK: if (n.hasChildren()) { Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); } else { return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n)); } case Token.RETURN: if (n.hasChildren()) { break; [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	159	159	2	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (gNode == null) { return n; } if (n.getParent() == null) { List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) { return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); } } [BUGGY] [BUGGY] switch (n.getType()) { case Token.BLOCK: if (n.hasChildren()) { Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); } else { return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n)); } case Token.RETURN: if (n.hasChildren()) { break; [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	159	159	2	add	
45	[BUG] [BUGGY] return n; [FE] AssertionFailedError [CONTEXT] Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); Node nextCfgNode = outEdges.get(0).getDestination().getValue(); if (nextCfgNode == fallThrough) { removeDeadExprStatementSafely(n); return fallThrough; } } } [BUGGY] return n; [BUGGY] } [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	191	191	2	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND); Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n)); Node nextCfgNode = outEdges.get(0).getDestination().getValue(); if (nextCfgNode == fallThrough) { removeDeadExprStatementSafely(n); return fallThrough; } } } [BUGGY] [BUGGY] return n; } [CLASS] UnreachableCodeElimination [METHOD] tryRemoveUnconditionalBranching [RETURN_TYPE] Node  Node n [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements ControlFlowGraph curCfg Node fallThrough first n nextCfgNode List outEdges Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	191	191	2	add	
47	[BUG] [BUGGY] removeDeadExprStatementSafely(n); [FE] AssertionFailedError [CONTEXT] if (n.getType() == Token.FUNCTION || n.getType() == Token.SCRIPT) { return; } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { // Not in CFG. return; } if (gNode.getAnnotation() != GraphReachability.REACHABLE || (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { [BUGGY] removeDeadExprStatementSafely(n); [BUGGY] return; } tryRemoveUnconditionalBranching(n); } [CLASS] UnreachableCodeElimination [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements NodeTraversal t ControlFlowGraph curCfg Node n parent Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	105	105	2	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (n.getType() == Token.FUNCTION || n.getType() == Token.SCRIPT) { return; } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { // Not in CFG. return; } if (gNode.getAnnotation() != GraphReachability.REACHABLE || (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { [BUGGY] [BUGGY] removeDeadExprStatementSafely(n); return; } tryRemoveUnconditionalBranching(n); } [CLASS] UnreachableCodeElimination [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements NodeTraversal t ControlFlowGraph curCfg Node n parent Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	105	105	2	add	
49	[BUG] [BUGGY] return; [FE] AssertionFailedError [CONTEXT] return; } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { // Not in CFG. return; } if (gNode.getAnnotation() != GraphReachability.REACHABLE || (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { removeDeadExprStatementSafely(n); [BUGGY] return; [BUGGY] } tryRemoveUnconditionalBranching(n); } [CLASS] UnreachableCodeElimination [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements NodeTraversal t ControlFlowGraph curCfg Node n parent Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	106	106	2	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return; } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { // Not in CFG. return; } if (gNode.getAnnotation() != GraphReachability.REACHABLE || (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { removeDeadExprStatementSafely(n); [BUGGY] [BUGGY] return; } tryRemoveUnconditionalBranching(n); } [CLASS] UnreachableCodeElimination [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements NodeTraversal t ControlFlowGraph curCfg Node n parent Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	106	106	2	add	
51	[BUG] [BUGGY] Node parent = n.getParent(); [FE] AssertionFailedError [CONTEXT] private void removeDeadExprStatementSafely(Node n) { [BUGGY] Node parent = n.getParent(); [BUGGY] if (n.getType() == Token.EMPTY || (n.getType() == Token.BLOCK && !n.hasChildren())) {  return; } switch (n.getType()) {    [CLASS] UnreachableCodeElimination [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n parent tryNode  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	200	200	2	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void removeDeadExprStatementSafely(Node n) { [BUGGY] [BUGGY] Node parent = n.getParent(); if (n.getType() == Token.EMPTY || (n.getType() == Token.BLOCK && !n.hasChildren())) {  return; } switch (n.getType()) {    [CLASS] UnreachableCodeElimination [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n parent tryNode  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	200	200	2	add	
53	[BUG] [BUGGY] if (n.getType() == Token.EMPTY || (n.getType() == Token.BLOCK && !n.hasChildren())) { [FE] AssertionFailedError [CONTEXT] private void removeDeadExprStatementSafely(Node n) { Node parent = n.getParent(); [BUGGY] if (n.getType() == Token.EMPTY ||  (n.getType() == Token.BLOCK && !n.hasChildren())) { [BUGGY] (n.getType() == Token.BLOCK && !n.hasChildren())) {  return; } switch (n.getType()) {    case Token.DO: [CLASS] UnreachableCodeElimination [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n parent tryNode  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	201	202	2	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void removeDeadExprStatementSafely(Node n) { Node parent = n.getParent(); [BUGGY] [BUGGY] if (n.getType() == Token.EMPTY ||  (n.getType() == Token.BLOCK && !n.hasChildren())) { (n.getType() == Token.BLOCK && !n.hasChildren())) {  return; } switch (n.getType()) {    case Token.DO: [CLASS] UnreachableCodeElimination [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n parent tryNode  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	201	202	2	add	
55	[BUG] [BUGGY] switch (n.getType()) { [FE] AssertionFailedError [CONTEXT] private void removeDeadExprStatementSafely(Node n) { Node parent = n.getParent(); if (n.getType() == Token.EMPTY || (n.getType() == Token.BLOCK && !n.hasChildren())) {  return; } [BUGGY] switch (n.getType()) { [BUGGY]    case Token.DO: return; case Token.BLOCK:  if (parent.getType() == Token.TRY) { if (NodeUtil.isTryCatchNodeContainer(n)) { [CLASS] UnreachableCodeElimination [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n parent tryNode  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	207	207	2	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void removeDeadExprStatementSafely(Node n) { Node parent = n.getParent(); if (n.getType() == Token.EMPTY || (n.getType() == Token.BLOCK && !n.hasChildren())) {  return; } [BUGGY] [BUGGY] switch (n.getType()) {    case Token.DO: return; case Token.BLOCK:  if (parent.getType() == Token.TRY) { if (NodeUtil.isTryCatchNodeContainer(n)) { [CLASS] UnreachableCodeElimination [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n parent tryNode  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	207	207	2	add	
57	[BUG] [BUGGY] NodeUtil.redeclareVarsInsideBranch(n); [FE] AssertionFailedError [CONTEXT] } } break; case Token.CATCH: Node tryNode = parent.getParent(); NodeUtil.maybeAddFinally(tryNode); break; } [BUGGY] NodeUtil.redeclareVarsInsideBranch(n); [BUGGY] compiler.reportCodeChange(); if (logger.isLoggable(Level.FINE)) { logger.fine("Removing " + n.toString()); } NodeUtil.removeChild(n.getParent(), n); } [CLASS] UnreachableCodeElimination [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n parent tryNode  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	229	229	2	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } } break; case Token.CATCH: Node tryNode = parent.getParent(); NodeUtil.maybeAddFinally(tryNode); break; } [BUGGY] [BUGGY] NodeUtil.redeclareVarsInsideBranch(n); compiler.reportCodeChange(); if (logger.isLoggable(Level.FINE)) { logger.fine("Removing " + n.toString()); } NodeUtil.removeChild(n.getParent(), n); } [CLASS] UnreachableCodeElimination [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n parent tryNode  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	229	229	2	add	
59	[BUG] [BUGGY] compiler.reportCodeChange(); [FE] AssertionFailedError [CONTEXT] } break; case Token.CATCH: Node tryNode = parent.getParent(); NodeUtil.maybeAddFinally(tryNode); break; } NodeUtil.redeclareVarsInsideBranch(n); [BUGGY] compiler.reportCodeChange(); [BUGGY] if (logger.isLoggable(Level.FINE)) { logger.fine("Removing " + n.toString()); } NodeUtil.removeChild(n.getParent(), n); } [CLASS] UnreachableCodeElimination [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n parent tryNode  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	230	230	2	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } break; case Token.CATCH: Node tryNode = parent.getParent(); NodeUtil.maybeAddFinally(tryNode); break; } NodeUtil.redeclareVarsInsideBranch(n); [BUGGY] [BUGGY] compiler.reportCodeChange(); if (logger.isLoggable(Level.FINE)) { logger.fine("Removing " + n.toString()); } NodeUtil.removeChild(n.getParent(), n); } [CLASS] UnreachableCodeElimination [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n parent tryNode  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	230	230	2	add	
61	[BUG] [BUGGY] if (logger.isLoggable(Level.FINE)) { [FE] AssertionFailedError [CONTEXT] break; case Token.CATCH: Node tryNode = parent.getParent(); NodeUtil.maybeAddFinally(tryNode); break; } NodeUtil.redeclareVarsInsideBranch(n); compiler.reportCodeChange(); [BUGGY] if (logger.isLoggable(Level.FINE)) { [BUGGY] logger.fine("Removing " + n.toString()); } NodeUtil.removeChild(n.getParent(), n); } [CLASS] UnreachableCodeElimination [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n parent tryNode  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	231	231	2	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] break; case Token.CATCH: Node tryNode = parent.getParent(); NodeUtil.maybeAddFinally(tryNode); break; } NodeUtil.redeclareVarsInsideBranch(n); compiler.reportCodeChange(); [BUGGY] [BUGGY] if (logger.isLoggable(Level.FINE)) { logger.fine("Removing " + n.toString()); } NodeUtil.removeChild(n.getParent(), n); } [CLASS] UnreachableCodeElimination [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n parent tryNode  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	231	231	2	add	
63	[BUG] [BUGGY] NodeUtil.removeChild(n.getParent(), n); [FE] AssertionFailedError [CONTEXT] Node tryNode = parent.getParent(); NodeUtil.maybeAddFinally(tryNode); break; } NodeUtil.redeclareVarsInsideBranch(n); compiler.reportCodeChange(); if (logger.isLoggable(Level.FINE)) { logger.fine("Removing " + n.toString()); } [BUGGY] NodeUtil.removeChild(n.getParent(), n); [BUGGY] } [CLASS] UnreachableCodeElimination [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n parent tryNode  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	234	234	2	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node tryNode = parent.getParent(); NodeUtil.maybeAddFinally(tryNode); break; } NodeUtil.redeclareVarsInsideBranch(n); compiler.reportCodeChange(); if (logger.isLoggable(Level.FINE)) { logger.fine("Removing " + n.toString()); } [BUGGY] [BUGGY] NodeUtil.removeChild(n.getParent(), n); } [CLASS] UnreachableCodeElimination [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n parent tryNode  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	234	234	2	add	
65	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] NodeUtil.maybeAddFinally(tryNode); break; } NodeUtil.redeclareVarsInsideBranch(n); compiler.reportCodeChange(); if (logger.isLoggable(Level.FINE)) { logger.fine("Removing " + n.toString()); } NodeUtil.removeChild(n.getParent(), n); [BUGGY] } [BUGGY]  [CLASS] UnreachableCodeElimination [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n parent tryNode  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	235	235	2	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] NodeUtil.maybeAddFinally(tryNode); break; } NodeUtil.redeclareVarsInsideBranch(n); compiler.reportCodeChange(); if (logger.isLoggable(Level.FINE)) { logger.fine("Removing " + n.toString()); } NodeUtil.removeChild(n.getParent(), n); [BUGGY] [BUGGY] } [CLASS] UnreachableCodeElimination [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void  Node n [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg Node n parent tryNode  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3651483716701107	235	235	2	add	
67	[BUG] [BUGGY] DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { if (parent == null) { return; } if (n.getType() == Token.FUNCTION || n.getType() == Token.SCRIPT) { return; } [BUGGY] DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); [BUGGY] if (gNode == null) { // Not in CFG. return; } if (gNode.getAnnotation() != GraphReachability.REACHABLE || (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { removeDeadExprStatementSafely(n); return; } tryRemoveUnconditionalBranching(n); [CLASS] UnreachableCodeElimination [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements NodeTraversal t ControlFlowGraph curCfg Node n parent Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.35355339059327373	99	99	2	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { if (parent == null) { return; } if (n.getType() == Token.FUNCTION || n.getType() == Token.SCRIPT) { return; } [BUGGY] [BUGGY] DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { // Not in CFG. return; } if (gNode.getAnnotation() != GraphReachability.REACHABLE || (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { removeDeadExprStatementSafely(n); return; } tryRemoveUnconditionalBranching(n); [CLASS] UnreachableCodeElimination [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements NodeTraversal t ControlFlowGraph curCfg Node n parent Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.35355339059327373	99	99	2	add	
69	[BUG] [BUGGY] if (gNode == null) { // Not in CFG. return; [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { if (parent == null) { return; } if (n.getType() == Token.FUNCTION || n.getType() == Token.SCRIPT) { return; } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); [BUGGY] if (gNode == null) { // Not in CFG.  return; [BUGGY] return; } if (gNode.getAnnotation() != GraphReachability.REACHABLE || (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { removeDeadExprStatementSafely(n); return; } tryRemoveUnconditionalBranching(n); } [CLASS] UnreachableCodeElimination [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements NodeTraversal t ControlFlowGraph curCfg Node n parent Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.35355339059327373	100	101	2	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { if (parent == null) { return; } if (n.getType() == Token.FUNCTION || n.getType() == Token.SCRIPT) { return; } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); [BUGGY] [BUGGY] if (gNode == null) { // Not in CFG.  return; return; } if (gNode.getAnnotation() != GraphReachability.REACHABLE || (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { removeDeadExprStatementSafely(n); return; } tryRemoveUnconditionalBranching(n); } [CLASS] UnreachableCodeElimination [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements NodeTraversal t ControlFlowGraph curCfg Node n parent Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.35355339059327373	100	101	2	add	
71	[BUG] [BUGGY] return; [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { if (parent == null) { return; } if (n.getType() == Token.FUNCTION || n.getType() == Token.SCRIPT) { return; } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { // Not in CFG. [BUGGY] return; [BUGGY] } if (gNode.getAnnotation() != GraphReachability.REACHABLE || (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { removeDeadExprStatementSafely(n); return; } tryRemoveUnconditionalBranching(n); } [CLASS] UnreachableCodeElimination [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements NodeTraversal t ControlFlowGraph curCfg Node n parent Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.35355339059327373	101	101	2	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { if (parent == null) { return; } if (n.getType() == Token.FUNCTION || n.getType() == Token.SCRIPT) { return; } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { // Not in CFG. [BUGGY] [BUGGY] return; } if (gNode.getAnnotation() != GraphReachability.REACHABLE || (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { removeDeadExprStatementSafely(n); return; } tryRemoveUnconditionalBranching(n); } [CLASS] UnreachableCodeElimination [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements NodeTraversal t ControlFlowGraph curCfg Node n parent Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.35355339059327373	101	101	2	add	
73	[BUG] [BUGGY] if (gNode.getAnnotation() != GraphReachability.REACHABLE || (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { [FE] AssertionFailedError [CONTEXT] return; } if (n.getType() == Token.FUNCTION || n.getType() == Token.SCRIPT) { return; } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { // Not in CFG. return; } [BUGGY] if (gNode.getAnnotation() != GraphReachability.REACHABLE ||  (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { [BUGGY] (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { removeDeadExprStatementSafely(n); return; } tryRemoveUnconditionalBranching(n); } [CLASS] UnreachableCodeElimination [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements NodeTraversal t ControlFlowGraph curCfg Node n parent Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.35355339059327373	103	104	2	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return; } if (n.getType() == Token.FUNCTION || n.getType() == Token.SCRIPT) { return; } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { // Not in CFG. return; } [BUGGY] [BUGGY] if (gNode.getAnnotation() != GraphReachability.REACHABLE ||  (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { removeDeadExprStatementSafely(n); return; } tryRemoveUnconditionalBranching(n); } [CLASS] UnreachableCodeElimination [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler DiGraphNode gNode boolean removeNoOpStatements NodeTraversal t ControlFlowGraph curCfg Node n parent Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.35355339059327373	103	104	2	add	
75	[BUG] [BUGGY] boolean removeNoOpStatements) { [FE] AssertionFailedError [CONTEXT] UnreachableCodeElimination(AbstractCompiler compiler, [BUGGY] boolean removeNoOpStatements) { [BUGGY] this.compiler = compiler; this.removeNoOpStatements = removeNoOpStatements; } [CLASS] UnreachableCodeElimination [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean removeNoOpStatements [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	61	61	2	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] UnreachableCodeElimination(AbstractCompiler compiler, [BUGGY] [BUGGY] boolean removeNoOpStatements) { this.compiler = compiler; this.removeNoOpStatements = removeNoOpStatements; } [CLASS] UnreachableCodeElimination [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean removeNoOpStatements [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	61	61	2	add	
77	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final boolean removeNoOpStatements; [CLASS] UnreachableCodeElimination  [VARIABLES] 	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	55	55	2	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final boolean removeNoOpStatements; [CLASS] UnreachableCodeElimination  [VARIABLES] 	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	55	55	2	add	
79	[BUG] [BUGGY] ControlFlowGraph<Node> curCfg = null; [FE] AssertionFailedError [CONTEXT] [BUGGY] ControlFlowGraph<Node> curCfg = null; [BUGGY]  [CLASS] UnreachableCodeElimination  [VARIABLES] 	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	58	58	2	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] ControlFlowGraph<Node> curCfg = null; [CLASS] UnreachableCodeElimination  [VARIABLES] 	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	58	58	2	add	
81	[BUG] [BUGGY] this.compiler = compiler; [FE] AssertionFailedError [CONTEXT] UnreachableCodeElimination(AbstractCompiler compiler, boolean removeNoOpStatements) { [BUGGY] this.compiler = compiler; [BUGGY] this.removeNoOpStatements = removeNoOpStatements; } [CLASS] UnreachableCodeElimination [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean removeNoOpStatements [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	62	62	2	replace	
82	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] UnreachableCodeElimination(AbstractCompiler compiler, boolean removeNoOpStatements) { [BUGGY] [BUGGY] this.compiler = compiler; this.removeNoOpStatements = removeNoOpStatements; } [CLASS] UnreachableCodeElimination [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean removeNoOpStatements [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	62	62	2	add	
83	[BUG] [BUGGY] this.removeNoOpStatements = removeNoOpStatements; [FE] AssertionFailedError [CONTEXT] UnreachableCodeElimination(AbstractCompiler compiler, boolean removeNoOpStatements) { this.compiler = compiler; [BUGGY] this.removeNoOpStatements = removeNoOpStatements; [BUGGY] } [CLASS] UnreachableCodeElimination [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean removeNoOpStatements [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	63	63	2	replace	
84	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] UnreachableCodeElimination(AbstractCompiler compiler, boolean removeNoOpStatements) { this.compiler = compiler; [BUGGY] [BUGGY] this.removeNoOpStatements = removeNoOpStatements; } [CLASS] UnreachableCodeElimination [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean removeNoOpStatements [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	63	63	2	add	
85	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] UnreachableCodeElimination(AbstractCompiler compiler, boolean removeNoOpStatements) { this.compiler = compiler; this.removeNoOpStatements = removeNoOpStatements; [BUGGY] } [BUGGY]  [CLASS] UnreachableCodeElimination [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean removeNoOpStatements [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	64	64	2	replace	
86	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] UnreachableCodeElimination(AbstractCompiler compiler, boolean removeNoOpStatements) { this.compiler = compiler; this.removeNoOpStatements = removeNoOpStatements; [BUGGY] [BUGGY] } [CLASS] UnreachableCodeElimination [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean removeNoOpStatements [VARIABLES] AbstractCompiler compiler boolean removeNoOpStatements Logger logger Deque cfgStack ControlFlowGraph curCfg  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	64	64	2	add	
87	[BUG] [BUGGY] private static final Logger logger = Logger.getLogger(UnreachableCodeElimination.class.getName()); [FE] AssertionFailedError [CONTEXT] [BUGGY] private static final Logger logger = Logger.getLogger(UnreachableCodeElimination.class.getName()); [BUGGY] Logger.getLogger(UnreachableCodeElimination.class.getName()); [CLASS] UnreachableCodeElimination  [VARIABLES] 	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	49	50	2	replace	
88	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] private static final Logger logger = Logger.getLogger(UnreachableCodeElimination.class.getName()); Logger.getLogger(UnreachableCodeElimination.class.getName()); [CLASS] UnreachableCodeElimination  [VARIABLES] 	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	49	50	2	add	
89	[BUG] [BUGGY] Scope scope = t.getScope(); [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { [BUGGY] Scope scope = t.getScope(); [BUGGY]   ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false); cfa.process(null, scope.getRootNode()); cfgStack.push(curCfg); curCfg = cfa.getCfg(); new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg) .compute(curCfg.getEntry().getValue()); } [CLASS] UnreachableCodeElimination [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler ControlFlowAnalysis cfa boolean removeNoOpStatements Scope scope NodeTraversal t ControlFlowGraph curCfg Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	68	68	2	replace	
90	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { [BUGGY] [BUGGY] Scope scope = t.getScope();  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false); cfa.process(null, scope.getRootNode()); cfgStack.push(curCfg); curCfg = cfa.getCfg(); new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg) .compute(curCfg.getEntry().getValue()); } [CLASS] UnreachableCodeElimination [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler ControlFlowAnalysis cfa boolean removeNoOpStatements Scope scope NodeTraversal t ControlFlowGraph curCfg Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	68	68	2	add	
91	[BUG] [BUGGY] ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false); [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { Scope scope = t.getScope();  [BUGGY] ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false); [BUGGY] cfa.process(null, scope.getRootNode()); cfgStack.push(curCfg); curCfg = cfa.getCfg(); new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg) .compute(curCfg.getEntry().getValue()); } [CLASS] UnreachableCodeElimination [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler ControlFlowAnalysis cfa boolean removeNoOpStatements Scope scope NodeTraversal t ControlFlowGraph curCfg Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	71	71	2	replace	
92	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { Scope scope = t.getScope();  [BUGGY] [BUGGY] ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false); cfa.process(null, scope.getRootNode()); cfgStack.push(curCfg); curCfg = cfa.getCfg(); new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg) .compute(curCfg.getEntry().getValue()); } [CLASS] UnreachableCodeElimination [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler ControlFlowAnalysis cfa boolean removeNoOpStatements Scope scope NodeTraversal t ControlFlowGraph curCfg Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	71	71	2	add	
93	[BUG] [BUGGY] cfa.process(null, scope.getRootNode()); [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { Scope scope = t.getScope();  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false); [BUGGY] cfa.process(null, scope.getRootNode()); [BUGGY] cfgStack.push(curCfg); curCfg = cfa.getCfg(); new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg) .compute(curCfg.getEntry().getValue()); } [CLASS] UnreachableCodeElimination [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler ControlFlowAnalysis cfa boolean removeNoOpStatements Scope scope NodeTraversal t ControlFlowGraph curCfg Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	72	72	2	replace	
94	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { Scope scope = t.getScope();  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false); [BUGGY] [BUGGY] cfa.process(null, scope.getRootNode()); cfgStack.push(curCfg); curCfg = cfa.getCfg(); new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg) .compute(curCfg.getEntry().getValue()); } [CLASS] UnreachableCodeElimination [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler ControlFlowAnalysis cfa boolean removeNoOpStatements Scope scope NodeTraversal t ControlFlowGraph curCfg Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	72	72	2	add	
95	[BUG] [BUGGY] cfgStack.push(curCfg); [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { Scope scope = t.getScope();  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false); cfa.process(null, scope.getRootNode()); [BUGGY] cfgStack.push(curCfg); [BUGGY] curCfg = cfa.getCfg(); new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg) .compute(curCfg.getEntry().getValue()); } [CLASS] UnreachableCodeElimination [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler ControlFlowAnalysis cfa boolean removeNoOpStatements Scope scope NodeTraversal t ControlFlowGraph curCfg Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	73	73	2	replace	
96	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { Scope scope = t.getScope();  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false); cfa.process(null, scope.getRootNode()); [BUGGY] [BUGGY] cfgStack.push(curCfg); curCfg = cfa.getCfg(); new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg) .compute(curCfg.getEntry().getValue()); } [CLASS] UnreachableCodeElimination [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler ControlFlowAnalysis cfa boolean removeNoOpStatements Scope scope NodeTraversal t ControlFlowGraph curCfg Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	73	73	2	add	
97	[BUG] [BUGGY] curCfg = cfa.getCfg(); [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { Scope scope = t.getScope();  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false); cfa.process(null, scope.getRootNode()); cfgStack.push(curCfg); [BUGGY] curCfg = cfa.getCfg(); [BUGGY]  new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg) .compute(curCfg.getEntry().getValue()); } [CLASS] UnreachableCodeElimination [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler ControlFlowAnalysis cfa boolean removeNoOpStatements Scope scope NodeTraversal t ControlFlowGraph curCfg Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	74	74	2	replace	
98	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { Scope scope = t.getScope();  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false); cfa.process(null, scope.getRootNode()); cfgStack.push(curCfg); [BUGGY] [BUGGY] curCfg = cfa.getCfg(); new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg) .compute(curCfg.getEntry().getValue()); } [CLASS] UnreachableCodeElimination [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler ControlFlowAnalysis cfa boolean removeNoOpStatements Scope scope NodeTraversal t ControlFlowGraph curCfg Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	74	74	2	add	
99	[BUG] [BUGGY] new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg) .compute(curCfg.getEntry().getValue()); [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { Scope scope = t.getScope();  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false); cfa.process(null, scope.getRootNode()); cfgStack.push(curCfg); curCfg = cfa.getCfg(); [BUGGY] new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg)  .compute(curCfg.getEntry().getValue()); [BUGGY] .compute(curCfg.getEntry().getValue()); } [CLASS] UnreachableCodeElimination [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler ControlFlowAnalysis cfa boolean removeNoOpStatements Scope scope NodeTraversal t ControlFlowGraph curCfg Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	76	77	2	replace	
100	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { Scope scope = t.getScope();  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false); cfa.process(null, scope.getRootNode()); cfgStack.push(curCfg); curCfg = cfa.getCfg(); [BUGGY] [BUGGY] new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg)  .compute(curCfg.getEntry().getValue()); .compute(curCfg.getEntry().getValue()); } [CLASS] UnreachableCodeElimination [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler ControlFlowAnalysis cfa boolean removeNoOpStatements Scope scope NodeTraversal t ControlFlowGraph curCfg Logger logger Deque cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.34299717028501764	76	77	2	add	
