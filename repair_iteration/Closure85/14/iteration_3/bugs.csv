bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    }    else    if(n.hasChildren())    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    }    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	27	None	replace
2	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Node  first  =  n.getFirstChild();	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    }    else    if(n.hasChildren())    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    }    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	27	None	replace
3	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    }    else    if(n.hasChildren())    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    }    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	27	None	replace
4	[BUG]  [BUGGY]  Node  first  =  gNode.getNext();  Node  first  =  n.getNext();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getNext();  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getNext();  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    }    else    if(n.hasChildren())    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
5	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Node  first  =  n.getLastChild();	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    }    else    if(n.hasChildren())    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    }    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	27	None	replace
6	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild();  Node  first  =  n.getNext();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild();  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild();  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    }    else    if(n.hasChildren())    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  last  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Node  last  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    last    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	13	2	replace
8	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  last  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  last  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  last  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    last    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	13	2	replace
9	[BUG]  [BUGGY]  Node  first  =  gNode.getLastChild();  Node  last  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getLastChild();  Node  last  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getLastChild();  Node  last  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    last    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  last  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild();  Node  last  =  n.getFirstChild();	  Node    first    =    n.getLastChild();    Node    last    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	13	3	replace
11	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  last  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  last  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Node  last  =  n.getFirstChild();	  Node    first    =    n.getLastChild();    Node    last    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	13	3	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Node  last  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext();  Node  last  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    last    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	13	6	replace
13	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  last  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Node  last  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Node  last  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    last    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	13	6	replace
14	[BUG]  [BUGGY]  Node  first  =  node.getLastChild();  Node  last  =  n.getLastChild();  [CE]  cannot  find  symbol  node  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getLastChild();  Node  last  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getLastChild();  Node  last  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    last    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	13	None	replace
15	[BUG]  [BUGGY]  Node  first  =  n.getfirstChild();  Node  last  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getfirstChild();  Node  last  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getfirstChild();  Node  last  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    last    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Preconditions.checkState(n.hasChildren());  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	26	6	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getNext();  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.hasChildren());  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	26	6	replace
18	[BUG]  [BUGGY]  Node  first  =  n.getParent();  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getParent();  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getParent();  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	26	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.hasChildren());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext();  Preconditions.checkState(n.hasChildren());	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	26	6	replace
20	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.hasChildren());  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.hasChildren());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(n.hasChildren());	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	26	6	replace
21	[BUG]  [BUGGY]  Node  first  =  gNode.getNextChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getNextChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getNextChild();	  Node    first    =    n.getNextChild();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
22	[BUG]  [BUGGY]  Node  first  =  n,  outEdges.getNextChild();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  outEdges.getNextChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  outEdges.getNextChild();	  Node    first    =    n.getNextChild();    	non-compiled	[CE]  ';'  expected	17	None	replace
23	[BUG]  [BUGGY]  Node  first  =  node.getNextChild();  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getNextChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getNextChild();	  Node    first    =    n.getNextChild();    	non-compiled	[CE]  cannot  find  symbol  node	17	None	replace
24	[BUG]  [BUGGY]  Name  first  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Name  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Name  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Name    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
25	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Name  first  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Name  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Name  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Name    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
26	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Name  first  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Name  first  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Name  first  =  n.getFirstChild();	  Node    first    =    n.getLastChild();    Name    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
27	[BUG]  [BUGGY]  Node  first  =  gNode.getLastChild();  Name  first  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getLastChild();  Name  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getLastChild();  Name  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Name    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
28	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Name  first  =  gNode.getLastChild();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Name  first  =  gNode.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Name  first  =  gNode.getLastChild();	  Node    first    =    n.getLastChild();    Name    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
29	[BUG]  [BUGGY]  Node  first  =  node.getLastChild();  Name  first  =  n.getLastChild();  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getLastChild();  Name  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getLastChild();  Name  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Name    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	97	None	replace
30	[BUG]  [BUGGY]  Node  first  =  no.removeFirstChild();  [CE]  cannot  find  symbol  no  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  no.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  no.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    no.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  no	114	None	replace
31	[BUG]  [BUGGY]  Node  first  =  nodes.get(0).removeFirstChild();  [CE]  cannot  find  symbol  nodes  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  nodes.get(0).removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nodes.get(0).removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    no.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nodes	114	None	replace
32	[BUG]  [BUGGY]  Node  first  =  no.getFirstChild();  [CE]  cannot  find  symbol  no  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  no.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  no.getFirstChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    no.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  no	114	None	replace
33	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().cloneBlock();  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().cloneBlock();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().cloneBlock();	  Node    first    =    n.getFirstChild().cloneBlock();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
34	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneBlock();  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneBlock();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().cloneBlock();	  Node    first    =    n.getFirstChild().cloneBlock();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
35	[BUG]  [BUGGY]  Node  first  =  n,  outEdges.getFirstChild().cloneBlock();  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  outEdges.getFirstChild().cloneBlock();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  outEdges.getFirstChild().cloneBlock();	  Node    first    =    n.getFirstChild().cloneBlock();    	non-compiled	[CE]  ';'  expected	47	None	replace
36	[BUG]  [BUGGY]  Node  first  =  node.getFirstChild().cloneBlock();  [CE]  cannot  find  symbol  node  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getFirstChild().cloneBlock();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getFirstChild().cloneBlock();	  Node    first    =    n.getFirstChild().cloneBlock();    	non-compiled	[CE]  cannot  find  symbol  node	47	None	replace
37	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    first    =    n.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	7	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Preconditions.checkState(n.hasChildren());  Node  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    first    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	7	3	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.hasChildren());  Node  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    first    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	7	3	replace
40	[BUG]  [BUGGY]  Node  first  =  gNode.getLastChild();  Node  first  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getLastChild();  Node  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getLastChild();  Node  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
41	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  node  =  n.getLastChild();  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  node  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  node  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	7	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.hasChildren());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Preconditions.checkState(n.hasChildren());	  Node    first    =    n.getLastChild();    Node    first    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	7	2	replace
43	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.hasChildren());  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.hasChildren());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Preconditions.checkState(n.hasChildren());	  Node    first    =    n.getLastChild();    Node    first    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	7	2	replace
44	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild().removeFirstChild();	  Node    first    =    n.getFirstChild().removeFirstChild();    	compilable	  [FE]  NullPointerException  	107	10	replace
45	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().removeFirstChild();  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().removeFirstChild();	  Node    first    =    n.getFirstChild().removeFirstChild();    	compilable	  [FE]  NullPointerException  	107	10	replace
46	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().removeLastChild();  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().removeLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().removeLastChild();	  Node    first    =    n.getFirstChild().removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
47	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        NullPointerException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext().removeFirstChild();	  Node    first    =    n.getFirstChild().removeFirstChild();    	compilable	  [FE]  RuntimeException  	107	11	replace
48	[BUG]  [BUGGY]  Node  first  =  n.getNext().removeFirstChild();  [FE]  RuntimeException  [FE]        NullPointerException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext().removeFirstChild();	  Node    first    =    n.getFirstChild().removeFirstChild();    	compilable	  [FE]  RuntimeException  	107	11	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  second  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild().getNext();  Node  second  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    second    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	61	6	replace
50	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  second  =  n.getFirstChild().getNext();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  second  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().getNext();  Node  second  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    second    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	61	6	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  second  =  n.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getNext();  Node  second  =  n.getLastChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    second    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	61	6	replace
52	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  second  =  n.getLastChild().getNext();  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  second  =  n.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Node  second  =  n.getLastChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    second    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	61	6	replace
53	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  second  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Node  second  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    second    =    n.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	61	2	replace
54	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  second  =  n.getFirstChild().getNext();  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  second  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  second  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    second    =    n.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	61	2	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild().getNext();  Node  second  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getLastChild().getNext();  Node  second  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    second    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	61	8	replace
56	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getLastChild().getNext();  Node  second  =  n.getFirstChild().getNext();  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild().getNext();  Node  second  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getLastChild().getNext();  Node  second  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    second    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	61	8	replace
57	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().getNext();  Node  second  =  n.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().getNext();  Node  second  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().getNext();  Node  second  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    second    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
58	[BUG]  [BUGGY]  Node  first  =  node.getFirstChild().getNext();  Node  second  =  n.getFirstChild().getNext();  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getFirstChild().getNext();  Node  second  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getFirstChild().getNext();  Node  second  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    second    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  node	61	None	replace
59	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	19	None	replace
60	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Node  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	19	None	replace
61	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Preconditions.checkState(n.hasChildren());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.removeFirstChild();  Preconditions.checkState(n.hasChildren());	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	19	11	replace
62	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Preconditions.checkState(n.hasChildren());  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Preconditions.checkState(n.hasChildren());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Preconditions.checkState(n.hasChildren());	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	19	11	replace
63	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  node  =  n.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  node  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  node  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	19	None	replace
64	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.getFirstChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	19	None	replace
65	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  return  tryRemoveUnconditionalBranching(first);  [CE]  cannot  find  symbol  first  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  return  tryRemoveUnconditionalBranching(first);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  return  tryRemoveUnconditionalBranching(first);	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    return    tryRemoveUnconditionalBranching(outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	78	None	replace
66	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(first,ControlFlowAnalysis.computeFollowNode(n));  return  tryRemoveUnconditionalBranching(outEdges);  [CE]  cannot  find  symbol  first  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(first,ControlFlowAnalysis.computeFollowNode(n));  return  tryRemoveUnconditionalBranching(outEdges);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(first,ControlFlowAnalysis.computeFollowNode(n));  return  tryRemoveUnconditionalBranching(outEdges);	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    return    tryRemoveUnconditionalBranching(outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	78	None	replace
67	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(gNode,ControlFlowAnalysis.computeFollowNode(n));  return  tryRemoveUnconditionalBranching(outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(gNode,ControlFlowAnalysis.computeFollowNode(n));  return  tryRemoveUnconditionalBranching(outEdges);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(gNode,ControlFlowAnalysis.computeFollowNode(n));  return  tryRemoveUnconditionalBranching(outEdges);	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    return    tryRemoveUnconditionalBranching(outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	78	None	replace
68	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  first));  return  tryRemoveUnconditionalBranching(outEdges);  [CE]  cannot  find  symbol  first  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  first));  return  tryRemoveUnconditionalBranching(outEdges);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  first));  return  tryRemoveUnconditionalBranching(outEdges);	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    return    tryRemoveUnconditionalBranching(outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	78	None	replace
69	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [CE]  cannot  find  symbol  first  [FE]                                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    return    tryRemoveUnconditionalBranching(outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	78	None	replace
70	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNextChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNextChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.getNextChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getNextChild().cloneTree();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	71	None	replace
71	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getNextChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getNextChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getNextChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getNextChild().cloneTree();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	71	None	replace
72	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  first  =  n.getNextChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  first  =  n.getNextChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().cloneTree();  Node  first  =  n.getNextChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getNextChild().cloneTree();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	71	None	replace
73	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneBlock();  Node  first  =  n.getNextChild().cloneTree();  [CE]  cannot  find  symbol  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneBlock();  Node  first  =  n.getNextChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneBlock();  Node  first  =  n.getNextChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getNextChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
74	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().cloneTree();  Node  first  =  n.getNextChild().cloneTree();  [CE]  cannot  find  symbol  [FE]                        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().cloneTree();  Node  first  =  n.getNextChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().cloneTree();  Node  first  =  n.getNextChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getNextChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
75	[BUG]  [BUGGY]  Node  first  =  node.getFirstChild().cloneTree();  Node  first  =  n.getNextChild().cloneTree();  [CE]  cannot  find  symbol  node  [FE]                          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getFirstChild().cloneTree();  Node  first  =  n.getNextChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getFirstChild().cloneTree();  Node  first  =  n.getNextChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getNextChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol  node	71	None	replace
76	[BUG]  [BUGGY]  Node  first  =  gNode.getLastChild().cloneTree();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getLastChild().cloneTree();	  Node    first    =    n.getLastChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
77	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild().getNext().cloneTree();	  Node    first    =    n.getLastChild().cloneTree();    	compilable	  [FE]  RuntimeException  	44	11	replace
78	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext().cloneTree();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().getNext().cloneTree();	  Node    first    =    n.getLastChild().cloneTree();    	compilable	  [FE]  RuntimeException  	44	11	replace
79	[BUG]  [BUGGY]  Node  first  =  node.getLastChild().cloneTree();  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getLastChild().cloneTree();	  Node    first    =    n.getLastChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol  node	44	None	replace
80	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(gNode));  [CE]  no  suitable  method  found  for  computeFollowNode(DiGraphNode<Node,Branch>)  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(gNode));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(gNode));	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(DiGraphNode<Node,Branch>)	75	None	replace
81	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  outEdges));  [CE]  cannot  find  symbol  outEdges  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  outEdges));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  outEdges));	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  cannot  find  symbol  outEdges	75	None	replace
82	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n),  outEdges);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n),  outEdges);	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  cannot  find  symbol  outEdges	75	None	replace
83	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  gNode));  [CE]  no  suitable  method  found  for  computeFollowNode(Node,DiGraphNode<Node,Branch>)  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  gNode));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  gNode));	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,DiGraphNode<Node,Branch>)	75	None	replace
84	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n),  gNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n),  gNode);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n),  gNode);	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	75	None	replace
85	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  first));  [CE]  cannot  find  symbol  first  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  first));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  first));	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  cannot  find  symbol  first	75	None	replace
86	[BUG]  [BUGGY]  Node  first  =  gNode.nextChild();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.nextChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.nextChild();	  Node    first    =    n.nextChild();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
87	[BUG]  [BUGGY]  Node  first  =  n.nextCfgNode();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.nextCfgNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.nextCfgNode();	  Node    first    =    n.nextChild();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
88	[BUG]  [BUGGY]  Node  first  =  n.nextElement();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.nextElement();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.nextElement();	  Node    first    =    n.nextChild();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
89	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Token  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Token  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Token  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Token    first    =    n.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	12	None	replace
90	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Token  first  =  n.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Token  first  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Token  first  =  n.getFirstChild();	  Node    first    =    n.getLastChild();    Token    first    =    n.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	12	None	replace
91	[BUG]  [BUGGY]  Token  first  =  n.getLastChild();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Token  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Token  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Token    first    =    n.getLastChild();    	non-compiled	[CE]  incompatible  types	12	None	replace
92	[BUG]  [BUGGY]  Node  first  =  gNode.getLastChild();  Token  first  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getLastChild();  Token  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getLastChild();  Token  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Token    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
93	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Token  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Token  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Token  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Token    first    =    n.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	12	None	replace
94	[BUG]  [BUGGY]  Node  first  =  nodes.getFirstChild();  [CE]  cannot  find  symbol  nodes  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  nodes.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nodes.getFirstChild();	  Node    first    =    outEdges.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nodes	41	None	replace
95	[BUG]  [BUGGY]  Node  first  =  n.getNext()  &&  n.hasChildren();  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext()  &&  n.hasChildren();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext()  &&  n.hasChildren();	  Node    first    =    n.getNext()    ||    n.hasChildren();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	57	None	replace
96	[BUG]  [BUGGY]  Node  first  =  gNode.getNext()  ||  n.hasChildren();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getNext()  ||  n.hasChildren();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getNext()  ||  n.hasChildren();	  Node    first    =    n.getNext()    ||    n.hasChildren();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
97	[BUG]  [BUGGY]  Node  first  =  n.getNext()  /  ||  n.hasChildren();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext()  /  ||  n.hasChildren();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext()  /  ||  n.hasChildren();	  Node    first    =    n.getNext()    ||    n.hasChildren();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
98	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild()  ||  n.hasChildren();  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild()  ||  n.hasChildren();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild()  ||  n.hasChildren();	  Node    first    =    n.getNext()    ||    n.hasChildren();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	57	None	replace
99	[BUG]  [BUGGY]  Node  first  =  n.getNext()  /|  n.hasChildren();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext()  /|  n.hasChildren();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext()  /|  n.hasChildren();	  Node    first    =    n.getNext()    ||    n.hasChildren();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
100	[BUG]  [BUGGY]  Node  first  =  n.getNext()  -  1  ||  n.hasChildren();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext()  -  1  ||  n.hasChildren();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext()  -  1  ||  n.hasChildren();	  Node    first    =    n.getNext()    ||    n.hasChildren();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	57	None	replace
101	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getNext()  ==  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext();  Preconditions.checkState(first.getNext()  ==  null);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    null);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	121	11	replace
102	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getNext()  ==  null);  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getNext()  ==  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(first.getNext()  ==  null);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    null);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	121	11	replace
103	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getNext()!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext();  Preconditions.checkState(first.getNext()!=  null);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    null);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	121	11	replace
104	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getNext()!=  null);  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getNext()!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(first.getNext()!=  null);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    null);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	121	11	replace
105	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getNext()!=  null);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getNext()!=  null);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(n.getNext()!=  null);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    null);    Node    first    =    n.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	121	None	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  null);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Preconditions.checkState(n.getNext()  ==  null);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    null);    Node    first    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	121	9	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  null);  Node  first  =  n.getNext();  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  null);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.getNext()  ==  null);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    null);    Node    first    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	121	9	replace
108	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getNext()  ==  null);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getNext()  ==  null);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(first.getNext()  ==  null);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    null);    Node    first    =    n.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	121	None	replace
109	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  last  =  n.removeLastChild();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  last  =  n.removeLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Node  last  =  n.removeLastChild();	  Node    first    =    n.removeFirstChild();    Node    last    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  last  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Node  last  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    last    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	25	11	replace
111	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  last  =  n.removeFirstChild();  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  last  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  last  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    last    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	25	11	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  last  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Node  last  =  n.getFirstChild();	  Node    first    =    n.removeFirstChild();    Node    last    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	25	2	replace
113	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  last  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  last  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  last  =  n.getFirstChild();	  Node    first    =    n.removeFirstChild();    Node    last    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	25	2	replace
114	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  last  =  n.removeLastChild();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  last  =  n.removeLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  last  =  n.removeLastChild();	  Node    first    =    n.removeFirstChild();    Node    last    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  last  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild();  Node  last  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    last    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	25	11	replace
116	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  last  =  n.removeFirstChild();  [FE]  AssertionFailedError  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  last  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Node  last  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    last    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	25	11	replace
117	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getFirstChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	67	None	replace
118	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  first  =  n.getFirstChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  first  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().cloneTree();  Node  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	67	None	replace
119	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  node  =  n.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  node  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  node  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol  node	67	None	replace
120	[BUG]  [BUGGY]  Node  first  =  n.getNext().cloneTree();  Node  first  =  n.getFirstChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().cloneTree();  Node  first  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext().cloneTree();  Node  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	67	None	replace
121	[BUG]  [BUGGY]  Node  first  =  n.getNext().cloneBlock();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().cloneBlock();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext().cloneBlock();	  Node    first    =    n.getNext().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
122	[BUG]  [BUGGY]  Node  first  =  gNode.getNext().cloneTree();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getNext().cloneTree();	  Node    first    =    n.getNext().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
123	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().cloneNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext().cloneNode();	  Node    first    =    n.getNext().cloneTree();    	compilable	  [FE]  RuntimeException  	52	11	replace
124	[BUG]  [BUGGY]  Node  first  =  n.getNext().cloneNode();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().cloneNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext().cloneNode();	  Node    first    =    n.getNext().cloneTree();    	compilable	  [FE]  RuntimeException  	52	11	replace
125	[BUG]  [BUGGY]  Node  first  =  n.getNext().cloneFollowNode();  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().cloneFollowNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext().cloneFollowNode();	  Node    first    =    n.getNext().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
126	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.hasChildren());    Node    first    =    n.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	replace
127	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getFirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    gNode.getFirstChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	62	None	replace
128	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    gNode.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	62	11	replace
129	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    gNode.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	62	11	replace
130	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.FUNCTION);	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    gNode.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	62	11	replace
131	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.FUNCTION);	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    gNode.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	62	11	replace
132	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  node  =  n.getFirstChild().getNext();  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  node  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  node  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    gNode.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  node	62	None	replace
133	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  first  =  n.getLastChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  first  =  n.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().getNext();    Node  first  =  n.getLastChild().getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
134	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  second  =  n.getLastChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  second  =  n.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().getNext();    Node  second  =  n.getLastChild().getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
135	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  first  =  gNode.getLastChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  first  =  gNode.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().getNext();    Node  first  =  gNode.getLastChild().getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
136	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  first  =  n.getFirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  first  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().getNext();    Node  first  =  n.getFirstChild().getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
137	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  next  =  n.getLastChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  next  =  n.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().getNext();    Node  next  =  n.getLastChild().getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
138	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  last  =  n.getLastChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  last  =  n.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().getNext();    Node  last  =  n.getLastChild().getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
139	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  Token  first  =  n.getLastChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext();  Token  first  =  n.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().getNext();    Token  first  =  n.getLastChild().getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
140	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  first  =  n.getLastChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  first  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().cloneTree();    Node  first  =  n.getLastChild().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	43	None	add
141	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  second  =  n.getLastChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  second  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().cloneTree();    Node  second  =  n.getLastChild().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	43	None	add
142	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  first  =  gNode.getLastChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  first  =  gNode.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().cloneTree();    Node  first  =  gNode.getLastChild().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	43	None	add
143	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  next  =  n.getLastChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  next  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().cloneTree();    Node  next  =  n.getLastChild().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	43	None	add
144	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  first  =  n.getLastChild().cloneTree());  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  first  =  n.getLastChild().cloneTree());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().cloneTree();    Node  first  =  n.getLastChild().cloneTree());	  	non-compiled	[CE]  ';'  expected	43	None	add
145	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  last  =  n.getLastChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  last  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().cloneTree();    Node  last  =  n.getLastChild().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	43	None	add
146	[BUG]  [BUGGY]  Node  first  =  outEdges.getLastChild();  [CE]  cannot  find  symbol  outEdges  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  outEdges.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  outEdges.getLastChild();	  Node    first    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  outEdges	42	None	replace
147	[BUG]  [BUGGY]  Node  first  =  mNode.getLastChild();  [CE]  cannot  find  symbol  mNode  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  mNode.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  mNode.getLastChild();	  Node    first    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  mNode	42	None	replace
148	[BUG]  [BUGGY]  Node  second  =  n.getLastChild();  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  second  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  second  =  n.getLastChild();	  Node    first    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  first	42	None	replace
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  second  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Node  second  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    second    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	8	2	replace
150	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  second  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  second  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  second  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    second    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	8	2	replace
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  second  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild();  Node  second  =  n.getFirstChild();	  Node    first    =    n.getLastChild();    Node    second    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	8	3	replace
152	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  second  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  second  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Node  second  =  n.getFirstChild();	  Node    first    =    n.getLastChild();    Node    second    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	8	3	replace
153	[BUG]  [BUGGY]  Node  first  =  gNode.getLastChild();  Node  second  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getLastChild();  Node  second  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getLastChild();  Node  second  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    second    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Node  second  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext();  Node  second  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    second    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	8	6	replace
155	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  second  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Node  second  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Node  second  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    second    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	8	6	replace
156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  second  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild();  Node  second  =  n.getNext();	  Node    first    =    n.getLastChild();    Node    second    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	8	3	replace
157	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  second  =  n.getNext();  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  second  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Node  second  =  n.getNext();	  Node    first    =    n.getLastChild();    Node    second    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	8	3	replace
158	[BUG]  [BUGGY]  Node  first  =  n.getfirstChild();  Node  second  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getfirstChild();  Node  second  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getfirstChild();  Node  second  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    second    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
159	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	replace
160	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  unreachable  statement	30	None	replace
161	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	replace
162	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	replace
163	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  unreachable  statement	30	None	replace
164	[BUG]  [BUGGY]  Node  first  =  node.getFirstChild().getNext();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    node.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  node	109	None	replace
165	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  node.getFirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  node.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  node.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    node.getFirstChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	109	None	replace
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.hasChildren());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.hasChildren());	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    node.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	109	6	replace
167	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.hasChildren());  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.hasChildren());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.hasChildren());	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    node.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	109	6	replace
168	[BUG]  [BUGGY]  gNode.removeChild(first);  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  gNode.removeChild(first);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	gNode.removeChild(first);	  gNode.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  first	111	None	replace
169	[BUG]  [BUGGY]  gNode.removeChild(n,  first);  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  gNode.removeChild(n,  first);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	gNode.removeChild(n,  first);	  gNode.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  first	111	None	replace
170	[BUG]  [BUGGY]  gNode.replaceChild(n,  first);  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  gNode.replaceChild(n,  first);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	gNode.replaceChild(n,  first);	  gNode.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  first	111	None	replace
171	[BUG]  [BUGGY]  gNode.removeChild(last);  [CE]  cannot  find  symbol  last  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  gNode.removeChild(last);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	gNode.removeChild(last);	  gNode.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  last	111	None	replace
172	[BUG]  [BUGGY]  gNode.removeChild(first,  n);  [CE]  cannot  find  symbol  first  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  gNode.removeChild(first,  n);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	gNode.removeChild(first,  n);	  gNode.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  first	111	None	replace
173	[BUG]  [BUGGY]  n.removeChild(gNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  n.removeChild(gNode);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	n.removeChild(gNode);	  gNode.removeChild(n);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	111	None	replace
174	[BUG]  [BUGGY]  Node  first  =  n.getParent();  Node  first  =  n.getParent();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getParent();  Node  first  =  n.getParent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getParent();    Node  first  =  n.getParent();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	98	None	add
175	[BUG]  [BUGGY]  Node  first  =  n.getParent();  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getParent();  Node  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getParent();    Node  first  =  n.getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	98	None	add
176	[BUG]  [BUGGY]  Node  first  =  n.getParent();  Node  first  =  n.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getParent();  Node  first  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getParent();    Node  first  =  n.getFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	98	None	add
177	[BUG]  [BUGGY]  Node  first  =  n.getParent();  Node  first  =  n.getPrevious();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getParent();  Node  first  =  n.getPrevious();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getParent();    Node  first  =  n.getPrevious();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	98	None	add
178	[BUG]  [BUGGY]  Node  first  =  n.getParent();  Node  first  =  gNode.getParent();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getParent();  Node  first  =  gNode.getParent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getParent();    Node  first  =  gNode.getParent();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	98	None	add
179	[BUG]  [BUGGY]  Node  first  =  n.getParent();  Node  first  =  n.getGrandparent();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getParent();  Node  first  =  n.getGrandparent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getParent();    Node  first  =  n.getGrandparent();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	98	None	add
180	[BUG]  [BUGGY]  Node  first  =  n.getParent();  Node  first  =  n.getName();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getParent();  Node  first  =  n.getName();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getParent();    Node  first  =  n.getName();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	98	None	add
181	[BUG]  [BUGGY]  Tode  first  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Tode  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Tode  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Tode    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
182	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Tode  first  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Tode  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Tode  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Tode    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
183	[BUG]  [BUGGY]  Node  first  =  gNode.removeFirstChild();  Tode  first  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.removeFirstChild();  Tode  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.removeFirstChild();  Tode  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Tode    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
184	[BUG]  [BUGGY]  Node  first  =  node.removeFirstChild();  Tode  first  =  n.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.removeFirstChild();  Tode  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.removeFirstChild();  Tode  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Tode    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	91	None	replace
185	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Tode  first  =  gNode.removeFirstChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Tode  first  =  gNode.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Tode  first  =  gNode.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Tode    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
186	[BUG]  [BUGGY]  Node  first  =  n.removeLastChild();  Tode  first  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeLastChild();  Tode  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeLastChild();  Tode  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Tode    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
187	[BUG]  [BUGGY]  Node  first  =  n,  gNode.removeFirstChild();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  gNode.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  gNode.removeFirstChild();	  Node    first    =    gNode.removeFirstChild();    	non-compiled	[CE]  ';'  expected	15	None	replace
188	[BUG]  [BUGGY]  Node  first  =  node.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.removeFirstChild();	  Node    first    =    gNode.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	15	None	replace
189	[BUG]  [BUGGY]  Node  first  =  nNode.removeFirstChild();  [CE]  cannot  find  symbol  nNode  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  nNode.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nNode.removeFirstChild();	  Node    first    =    gNode.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nNode	15	None	replace
190	[BUG]  [BUGGY]  Node  first  =  outEdges.removeFirstChild();  [CE]  cannot  find  symbol  outEdges  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  outEdges.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  outEdges.removeFirstChild();	  Node    first    =    gNode.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  outEdges	15	None	replace
191	[BUG]  [BUGGY]  Node  second  =  gNode.getFirstChild();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  second  =  gNode.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  second  =  gNode.getFirstChild();	  Node    second    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
192	[BUG]  [BUGGY]  Node  second  =  n.getNext();  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  second  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  second  =  n.getNext();	  Node    second    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  first	54	None	replace
193	[BUG]  [BUGGY]  Node  second  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  second  =  node.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  second  =  node.getFirstChild();	  Node    second    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	54	None	replace
194	[BUG]  [BUGGY]  Node  last  =  gNode.getLastChild();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  last  =  gNode.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  last  =  gNode.getLastChild();	  Node    last    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
195	[BUG]  [BUGGY]  Node  last  =  node.getLastChild();  [CE]  cannot  find  symbol  node  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  last  =  node.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  last  =  node.getLastChild();	  Node    last    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	66	None	replace
196	[BUG]  [BUGGY]  Node  last  =  outEdges.getLastChild();  [CE]  cannot  find  symbol  outEdges  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  last  =  outEdges.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  last  =  outEdges.getLastChild();	  Node    last    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  outEdges	66	None	replace
197	[BUG]  [BUGGY]  Node  last  =  n.getLastChild()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  last  =  n.getLastChild()  +  1;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  last  =  n.getLastChild()  +  1;	  Node    last    =    n.getLastChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	66	None	replace
198	[BUG]  [BUGGY]  Node  first  =  n.getNext().cloneTree();  Node  first  =  n.getNext().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().cloneTree();  Node  first  =  n.getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext().cloneTree();    Node  first  =  n.getNext().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	51	None	add
199	[BUG]  [BUGGY]  Node  first  =  n.getNext().cloneTree();  Node  second  =  n.getNext().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().cloneTree();  Node  second  =  n.getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext().cloneTree();    Node  second  =  n.getNext().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	51	None	add
200	[BUG]  [BUGGY]  Node  first  =  n.getNext().cloneTree();  Node  first  =  gNode.getNext().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().cloneTree();  Node  first  =  gNode.getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext().cloneTree();    Node  first  =  gNode.getNext().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	51	None	add
201	[BUG]  [BUGGY]  Node  first  =  n.getNext().cloneTree();  Node  next  =  n.getNext().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().cloneTree();  Node  next  =  n.getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext().cloneTree();    Node  next  =  n.getNext().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	51	None	add
202	[BUG]  [BUGGY]  Node  first  =  n.getNext().cloneTree();  Node  last  =  n.getNext().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().cloneTree();  Node  last  =  n.getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext().cloneTree();    Node  last  =  n.getNext().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	51	None	add
203	[BUG]  [BUGGY]  Node  first  =  n.getNext().cloneTree();  Node  first  =  n.getNext().cloneTree());  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().cloneTree();  Node  first  =  n.getNext().cloneTree());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext().cloneTree();    Node  first  =  n.getNext().cloneTree());	  	non-compiled	[CE]  ';'  expected	51	None	add
204	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  Node  first  =  n.cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneTree();  Node  first  =  n.cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.cloneTree();    Node  first  =  n.cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	79	None	add
205	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  Node  second  =  n.cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneTree();  Node  second  =  n.cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.cloneTree();    Node  second  =  n.cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	79	None	add
206	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  Node  first  =  gNode.cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneTree();  Node  first  =  gNode.cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.cloneTree();    Node  first  =  gNode.cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	79	None	add
207	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  Node  next  =  n.cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneTree();  Node  next  =  n.cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.cloneTree();    Node  next  =  n.cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	79	None	add
208	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  Node  last  =  n.cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneTree();  Node  last  =  n.cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.cloneTree();    Node  last  =  n.cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	79	None	add
209	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  Tode  first  =  n.cloneTree();  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneTree();  Tode  first  =  n.cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.cloneTree();    Tode  first  =  n.cloneTree();	  	non-compiled	[CE]  cannot  find  symbol	79	None	add
210	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  n.getFirstChild().removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    NullPointerException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  n.getFirstChild().removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().removeFirstChild();    Node  first  =  n.getFirstChild().removeFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	106	None	add
211	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  n.getLastChild().removeLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      NullPointerException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  n.getLastChild().removeLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().removeFirstChild();    Node  first  =  n.getLastChild().removeLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	106	None	add
212	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  n.getLastChild().removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        NullPointerException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  n.getLastChild().removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().removeFirstChild();    Node  first  =  n.getLastChild().removeFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	106	None	add
213	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  n.getFirstChild().removeLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          NullPointerException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  n.getFirstChild().removeLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().removeFirstChild();    Node  first  =  n.getFirstChild().removeLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	106	None	add
214	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  second  =  n.getFirstChild().removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            NullPointerException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  second  =  n.getFirstChild().removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().removeFirstChild();    Node  second  =  n.getFirstChild().removeFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	106	None	add
215	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  n.getNext().removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              NullPointerException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  n.getNext().removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().removeFirstChild();    Node  first  =  n.getNext().removeFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	106	None	add
216	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  gNode.getFirstChild().removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                NullPointerException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  gNode.getFirstChild().removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().removeFirstChild();    Node  first  =  gNode.getFirstChild().removeFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	106	None	add
217	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  n.getNext().removeLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  NullPointerException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  n.getNext().removeLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().removeFirstChild();    Node  first  =  n.getNext().removeLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	106	None	add
218	[BUG]  [BUGGY]  Node  first  =  n,  gNode.firstChild();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  gNode.firstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  gNode.firstChild();	  Node    first    =    gNode.firstChild();    	non-compiled	[CE]  ';'  expected	35	None	replace
219	[BUG]  [BUGGY]  Node  first  =  node.firstChild();  [CE]  cannot  find  symbol  node  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.firstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.firstChild();	  Node    first    =    gNode.firstChild();    	non-compiled	[CE]  cannot  find  symbol  node	35	None	replace
220	[BUG]  [BUGGY]  Node  first  =  nNode.firstChild();  [CE]  cannot  find  symbol  nNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  nNode.firstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nNode.firstChild();	  Node    first    =    gNode.firstChild();    	non-compiled	[CE]  cannot  find  symbol  nNode	35	None	replace
221	[BUG]  [BUGGY]  Node  first  =  outEdges.firstChild();  [CE]  cannot  find  symbol  outEdges  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  outEdges.firstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  outEdges.firstChild();	  Node    first    =    gNode.firstChild();    	non-compiled	[CE]  cannot  find  symbol  outEdges	35	None	replace
222	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getParent()  ==  null);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getParent()  ==  null);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getParent()  ==  null);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()    ==    null);    Node    first    =    n.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	117	None	replace
223	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getParent()  ==  null);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Preconditions.checkState(n.getParent()  ==  null);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()    ==    null);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	117	11	replace
224	[BUG]  [BUGGY]  Preconditions.checkState(n.getParent()  ==  null);  Node  first  =  n.getNext();  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getParent()  ==  null);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.getParent()  ==  null);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()    ==    null);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	117	11	replace
225	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getParent()  ==  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext();  Preconditions.checkState(first.getParent()  ==  null);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()    ==    null);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	117	11	replace
226	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getParent()  ==  null);  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getParent()  ==  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(first.getParent()  ==  null);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()    ==    null);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	117	11	replace
227	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getParent()  ==  null);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getParent()  ==  null);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(first.getParent()  ==  null);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()    ==    null);    Node    first    =    n.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	117	None	replace
228	[BUG]  [BUGGY]  Node  first  =  gNode.secondChild();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.secondChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.secondChild();	  Node    first    =    n.secondChild();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
229	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild().cloneNode();	  Node    first    =    n.getFirstChild().cloneNode();    	compilable	  [FE]  RuntimeException  	50	1	replace
230	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneNode();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().cloneNode();	  Node    first    =    n.getFirstChild().cloneNode();    	compilable	  [FE]  RuntimeException  	50	1	replace
231	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().cloneNode();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().cloneNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().cloneNode();	  Node    first    =    n.getFirstChild().cloneNode();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
232	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneNode(Token.BLOCK);  [CE]  method  cloneNode  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneNode(Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneNode(Token.BLOCK);	  Node    first    =    n.getFirstChild().cloneNode();    	non-compiled	[CE]  method  cloneNode  in  class  Node  cannot  be  applied  to  given  types;	50	None	replace
233	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getNext().cloneNode();	  Node    first    =    n.getFirstChild().cloneNode();    	compilable	  [FE]  RuntimeException  	50	10	replace
234	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneNode();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext().cloneNode();	  Node    first    =    n.getFirstChild().cloneNode();    	compilable	  [FE]  RuntimeException  	50	10	replace
235	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getLastChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.getLastChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getLastChild().cloneTree();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	replace
236	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getLastChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getLastChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getLastChild().cloneTree();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	replace
237	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().cloneTree();  Node  first  =  n.getLastChild().cloneTree();  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().cloneTree();  Node  first  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().cloneTree();  Node  first  =  n.getLastChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getLastChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
238	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneBlock();  Node  first  =  n.getLastChild().cloneTree();  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneBlock();  Node  first  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneBlock();  Node  first  =  n.getLastChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getLastChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
239	[BUG]  [BUGGY]  Node  first  =  gNode.getNext()  +  1;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getNext()  +  1;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getNext()  +  1;	  Node    first    =    n.getNext()    +    1;    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
240	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild()  +  1;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild()  +  1;	  Node    first    =    n.getNext()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	56	None	replace
241	[BUG]  [BUGGY]  Node  first  =  n,  n.getNext()  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  n.getNext()  +  1;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  n.getNext()  +  1;	  Node    first    =    n.getNext()    +    1;    	non-compiled	[CE]  ';'  expected	56	None	replace
242	[BUG]  [BUGGY]  Node  first  =  node.getNext()  +  1;  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getNext()  +  1;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getNext()  +  1;	  Node    first    =    n.getNext()    +    1;    	non-compiled	[CE]  cannot  find  symbol  node	56	None	replace
243	[BUG]  [BUGGY]  Node  first  =  n.getNext()  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext()  *  1;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext()  *  1;	  Node    first    =    n.getNext()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	56	None	replace
244	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	replace
245	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));  [CE]  cannot  find  symbol  t  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));    	non-compiled	[CE]  cannot  find  symbol  t	85	None	replace
246	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	replace
247	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t,  first));  [CE]  cannot  find  symbol  t  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t,  first));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t,  first));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));    	non-compiled	[CE]  cannot  find  symbol  t	85	None	replace
248	[BUG]  [BUGGY]  Node  first  =  n,  n.getFirstChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  n.getFirstChild();	  Node    first    =    n,    gNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	38	None	replace
249	[BUG]  [BUGGY]  Node  first  =  n,  n.getLastChild();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  n.getLastChild();	  Node    first    =    n,    gNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	38	None	replace
250	[BUG]  [BUGGY]  Node  first  =  n,  outEdges.getFirstChild();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  outEdges.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  outEdges.getFirstChild();	  Node    first    =    n,    gNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	38	None	replace
251	[BUG]  [BUGGY]  Node  first  =  n,  nextCfgNode.getFirstChild();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  nextCfgNode.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  nextCfgNode.getFirstChild();	  Node    first    =    n,    gNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	38	None	replace
252	[BUG]  [BUGGY]  Node  first  =  n,  node.getFirstChild();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  node.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  node.getFirstChild();	  Node    first    =    n,    gNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	38	None	replace
253	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNextChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNextChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.getNextChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getNextChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	64	None	replace
254	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().getNext();  Node  first  =  n.getNextChild().getNext();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().getNext();  Node  first  =  n.getNextChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().getNext();  Node  first  =  n.getNextChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getNextChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
255	[BUG]  [BUGGY]  Node  first  =  node.getFirstChild().getNext();  Node  first  =  n.getNextChild().getNext();  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getFirstChild().getNext();  Node  first  =  n.getNextChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getFirstChild().getNext();  Node  first  =  n.getNextChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getNextChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  node	64	None	replace
256	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  first  =  n.getNextChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  first  =  n.getNextChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().getNext();  Node  first  =  n.getNextChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getNextChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	64	None	replace
257	[BUG]  [BUGGY]  Name  first  =  n.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Name  first  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Name  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Name    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
258	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Name  first  =  gNode.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Name  first  =  gNode.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Name  first  =  gNode.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Name    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
259	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Name  first  =  n,  n.getFirstChild().getNext();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Name  first  =  n,  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Name  first  =  n,  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Name    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	88	None	replace
260	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Name  first  =  n.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Name  first  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Name  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Name    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
261	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Name  first  =  n.getLastChild().getNext();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Name  first  =  n.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Name  first  =  n.getLastChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Name    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
262	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Name  first  =  node.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Name  first  =  node.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Name  first  =  node.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Name    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
263	[BUG]  [BUGGY]  Node  first  =  gNode.removeLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.removeLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.removeLastChild();	  Node    first    =    n.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
264	[BUG]  [BUGGY]  Node  first  =  node.removeLastChild();  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.removeLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.removeLastChild();	  Node    first    =    n.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	14	None	replace
265	[BUG]  [BUGGY]  Node  first  =  n.removeLastChild()  +  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeLastChild()  +  1;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeLastChild()  +  1;	  Node    first    =    n.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
266	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getFirstChild();	  Node    first    =    n.getFirstChild().getLastChild();    	compilable	  [FE]  AssertionFailedError  	5	2	replace
267	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getFirstChild();	  Node    first    =    n.getFirstChild().getLastChild();    	compilable	  [FE]  AssertionFailedError  	5	2	replace
268	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().getLastChild();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().getLastChild();	  Node    first    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
269	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext().getLastChild();	  Node    first    =    n.getFirstChild().getLastChild();    	compilable	  [FE]  RuntimeException  	5	11	replace
270	[BUG]  [BUGGY]  Node  first  =  n.getNext().getLastChild();  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext().getLastChild();	  Node    first    =    n.getFirstChild().getLastChild();    	compilable	  [FE]  RuntimeException  	5	11	replace
271	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getLastChild()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild()  +  1;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getLastChild()  +  1;	  Node    first    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	5	None	replace
272	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getFirstChild().getParent();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getFirstChild().getParent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getParent();    Node  first  =  n.getFirstChild().getParent();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	89	None	add
273	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getFirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getParent();    Node  first  =  n.getFirstChild().getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	89	None	add
274	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getLastChild().getParent();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getLastChild().getParent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getParent();    Node  first  =  n.getLastChild().getParent();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	89	None	add
275	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getFirstChild().getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getFirstChild().getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getParent();    Node  first  =  n.getFirstChild().getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	89	None	add
276	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  second  =  n.getFirstChild().getParent();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  second  =  n.getFirstChild().getParent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getParent();    Node  second  =  n.getFirstChild().getParent();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	89	None	add
277	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  gNode.getFirstChild().getParent();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  gNode.getFirstChild().getParent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getParent();    Node  first  =  gNode.getFirstChild().getParent();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	89	None	add
278	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getNextChild().getParent();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getNextChild().getParent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getParent();    Node  first  =  n.getNextChild().getParent();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	89	None	add
279	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  next  =  n.getFirstChild().getParent();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  next  =  n.getFirstChild().getParent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getParent();    Node  next  =  n.getFirstChild().getParent();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	89	None	add
280	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getFirstChild().cloneNode();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getFirstChild().cloneNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneNode();    Node  first  =  n.getFirstChild().cloneNode();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	49	None	add
281	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getLastChild().cloneNode();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getLastChild().cloneNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneNode();    Node  first  =  n.getLastChild().cloneNode();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	49	None	add
282	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  second  =  n.getFirstChild().cloneNode();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  second  =  n.getFirstChild().cloneNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneNode();    Node  second  =  n.getFirstChild().cloneNode();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	49	None	add
283	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  gNode.getFirstChild().cloneNode();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  gNode.getFirstChild().cloneNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneNode();    Node  first  =  gNode.getFirstChild().cloneNode();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	49	None	add
284	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getNextChild().cloneNode();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getNextChild().cloneNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneNode();    Node  first  =  n.getNextChild().cloneNode();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	49	None	add
285	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  next  =  n.getFirstChild().cloneNode();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  next  =  n.getFirstChild().cloneNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneNode();    Node  next  =  n.getFirstChild().cloneNode();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	49	None	add
286	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getNext().cloneNode();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getNext().cloneNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneNode();    Node  first  =  n.getNext().cloneNode();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	49	None	add
287	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getFirstChild().cloneNode());  [CE]  ';'  expected  [FE]                  RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getFirstChild().cloneNode());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneNode();    Node  first  =  n.getFirstChild().cloneNode());	  	non-compiled	[CE]  ';'  expected	49	None	add
288	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	86	11	replace
289	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  n.getNext();  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	86	11	replace
290	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    first    =    n.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	86	None	replace
291	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getType()  ==  Token.NAME);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext();  Preconditions.checkState(first.getType()  ==  Token.NAME);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	86	11	replace
292	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getType()  ==  Token.NAME);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(first.getType()  ==  Token.NAME);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	86	11	replace
293	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    first    =    n.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	86	None	replace
294	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	86	11	replace
295	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	86	11	replace
296	[BUG]  [BUGGY]  Node  last  =  gNode.getFirstChild();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  last  =  gNode.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  last  =  gNode.getFirstChild();	  Node    last    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
297	[BUG]  [BUGGY]  Node  last  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  last  =  node.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  last  =  node.getFirstChild();	  Node    last    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	94	None	replace
298	[BUG]  [BUGGY]  Node  last  =  outEdges.getFirstChild();  [CE]  cannot  find  symbol  outEdges  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  last  =  outEdges.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  last  =  outEdges.getFirstChild();	  Node    last    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  outEdges	94	None	replace
299	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfg.getNext();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  nextCfgNode  =  curCfg.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  nextCfgNode  =  curCfg.getNext();	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
300	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfgNode.getNext();  [CE]  cannot  find  symbol  curCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  nextCfgNode  =  curCfgNode.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  nextCfgNode  =  curCfgNode.getNext();	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	65	None	replace
301	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  nextCfgNode  =  first.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  nextCfgNode  =  first.getNext();	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  first	65	None	replace
302	[BUG]  [BUGGY]  Node  lastCfgNode  =  n.getNext();  [CE]  cannot  find  symbol  first  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  lastCfgNode  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  lastCfgNode  =  n.getNext();	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  first	65	None	replace
303	[BUG]  [BUGGY]  Node  firstCfgNode  =  n.getNext();  [CE]  cannot  find  symbol  first  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  firstCfgNode  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  firstCfgNode  =  n.getNext();	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  first	65	None	replace
304	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getParent()!=  null);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getParent()!=  null);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getParent()!=  null);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()!=    null);    Node    first    =    n.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	118	None	replace
305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getParent()!=  null);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Preconditions.checkState(n.getParent()!=  null);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()!=    null);    Node    first    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	118	6	replace
306	[BUG]  [BUGGY]  Preconditions.checkState(n.getParent()!=  null);  Node  first  =  n.getNext();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getParent()!=  null);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.getParent()!=  null);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()!=    null);    Node    first    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	118	6	replace
307	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getParent()!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext();  Preconditions.checkState(first.getParent()!=  null);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()!=    null);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	118	11	replace
308	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getParent()!=  null);  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getParent()!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(first.getParent()!=  null);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()!=    null);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	118	11	replace
309	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Preconditions.checkState(n.getParent()!=  null);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Preconditions.checkState(n.getParent()!=  null);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Preconditions.checkState(n.getParent()!=  null);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()!=    null);    Node    first    =    n.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	118	None	replace
310	[BUG]  [BUGGY]  Node  first  =  no.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  no  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  no.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  no.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    no.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol  no	104	None	replace
311	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  no.getFirstChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  no.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  no.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    no.getFirstChild().cloneTree();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	104	None	replace
312	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  node  =  first.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  node  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  node  =  first.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  node  =  first.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    no.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol  node	104	None	replace
313	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Token  first  =  n.removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Token  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Token  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Token    first    =    n.removeFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	113	None	replace
314	[BUG]  [BUGGY]  Token  first  =  n.removeFirstChild();  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Token  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Token  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Token    first    =    n.removeFirstChild();    	non-compiled	[CE]  incompatible  types	113	None	replace
315	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Token  first  =  n.removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Token  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Token  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Token    first    =    n.removeFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	113	None	replace
316	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Token  first  =  n.removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Token  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Token  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Token    first    =    n.removeFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	113	None	replace
317	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Token  first  =  n.removeLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Token  first  =  n.removeLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Token  first  =  n.removeLastChild();	  Node    first    =    n.removeFirstChild();    Token    first    =    n.removeFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	113	None	replace
318	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(n.removeChildren());  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(n.removeChildren());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(n.removeChildren());	  n.removeChildren();    	non-compiled	[CE]  cannot  find  symbol  first	112	None	replace
319	[BUG]  [BUGGY]  NodeUtil.removeChildren(n);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  NodeUtil.removeChildren(n);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	NodeUtil.removeChildren(n);	  n.removeChildren();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
320	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeChildren();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.removeChildren();	  n.removeChildren();    	compilable	  [FE]  AssertionFailedError  	112	11	replace
321	[BUG]  [BUGGY]  Node  first  =  n.removeChildren();  [FE]  AssertionFailedError  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeChildren();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeChildren();	  n.removeChildren();    	compilable	  [FE]  AssertionFailedError  	112	11	replace
322	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(n.getChildren());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(n.getChildren());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(n.getChildren());	  n.removeChildren();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
323	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  NodeUtil.removeChild(n,  outEdges);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	NodeUtil.removeChild(n,  outEdges);	  n.removeChildren();    	non-compiled	[CE]  cannot  find  symbol  outEdges	112	None	replace
324	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  first  =  n.getFirstChild().getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  first  =  n.getFirstChild().getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getLastChild();    Node  first  =  n.getFirstChild().getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
325	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  second  =  n.getFirstChild().getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  second  =  n.getFirstChild().getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getLastChild();    Node  second  =  n.getFirstChild().getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
326	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  first  =  gNode.getFirstChild().getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  first  =  gNode.getFirstChild().getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getLastChild();    Node  first  =  gNode.getFirstChild().getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
327	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  first  =  n.getfirstChild().getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  first  =  n.getfirstChild().getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getLastChild();    Node  first  =  n.getfirstChild().getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
328	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  next  =  n.getFirstChild().getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  next  =  n.getFirstChild().getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getLastChild();    Node  next  =  n.getFirstChild().getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
329	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  first  =  n.getFirstChild().getLastChild());  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  first  =  n.getFirstChild().getLastChild());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getLastChild();    Node  first  =  n.getFirstChild().getLastChild());	  	non-compiled	[CE]  ';'  expected	4	None	add
330	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  first  =  n.getNextChild().getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  first  =  n.getNextChild().getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getLastChild();    Node  first  =  n.getNextChild().getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
331	[BUG]  [BUGGY]  Node  first  =  n,  gNode.getFirstChild().cloneTree();  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  gNode.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  gNode.getFirstChild().cloneTree();	  Node    first    =    gNode.getFirstChild().cloneTree();    	non-compiled	[CE]  ';'  expected	48	None	replace
332	[BUG]  [BUGGY]  Node  first  =  node.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  node  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getFirstChild().cloneTree();	  Node    first    =    gNode.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol  node	48	None	replace
333	[BUG]  [BUGGY]  Node  first  =  nNode.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  nNode  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  nNode.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nNode.getFirstChild().cloneTree();	  Node    first    =    gNode.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol  nNode	48	None	replace
334	[BUG]  [BUGGY]  Node  first  =  outEdges.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  outEdges  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  outEdges.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  outEdges.getFirstChild().cloneTree();	  Node    first    =    gNode.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol  outEdges	48	None	replace
335	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  second  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().cloneTree();  Node  second  =  n.getLastChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    second    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	69	1	replace
336	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  second  =  n.getLastChild().cloneTree();  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  second  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Node  second  =  n.getLastChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    second    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	69	1	replace
337	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  second  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild().cloneTree();  Node  second  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    second    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	69	1	replace
338	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  second  =  n.getFirstChild().cloneTree();  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  second  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().cloneTree();  Node  second  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    second    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	69	1	replace
339	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  second  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Node  second  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    second    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  AssertionFailedError  	69	2	replace
340	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  second  =  n.getFirstChild().cloneTree();  [FE]  AssertionFailedError  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  second  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  second  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    second    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  AssertionFailedError  	69	2	replace
341	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  second  =  n.getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().cloneTree();  Node  second  =  n.getNext().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    second    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	69	11	replace
342	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  second  =  n.getNext().cloneTree();  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  second  =  n.getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Node  second  =  n.getNext().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    second    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	69	11	replace
343	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  second  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().cloneNode();  Node  second  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    second    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	69	1	replace
344	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  second  =  n.getFirstChild().cloneTree();  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  second  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneNode();  Node  second  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    second    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	69	1	replace
345	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneBlock();  Node  second  =  n.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneBlock();  Node  second  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneBlock();  Node  second  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    second    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
346	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.removeLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.removeLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.removeLastChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	20	None	replace
347	[BUG]  [BUGGY]  Node  first  =  node.removeFirstChild();  Node  first  =  n.removeLastChild();  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.removeFirstChild();  Node  first  =  n.removeLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.removeFirstChild();  Node  first  =  n.removeLastChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	20	None	replace
348	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  second  =  n.removeLastChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  second  =  n.removeLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Node  second  =  n.removeLastChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
349	[BUG]  [BUGGY]  Node  first  =  n.firstChild();  Node  first  =  n.removeLastChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.firstChild();  Node  first  =  n.removeLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.firstChild();  Node  first  =  n.removeLastChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
350	[BUG]  [BUGGY]  Node  first  =  gNode.getLastChild().getNext();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getLastChild().getNext();	  Node    first    =    n.getLastChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
351	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild().getFirstChild().getNext();	  Node    first    =    n.getLastChild().getNext();    	compilable	  [FE]  AssertionFailedError  	2	9	replace
352	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getFirstChild().getNext();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().getFirstChild().getNext();	  Node    first    =    n.getLastChild().getNext();    	compilable	  [FE]  AssertionFailedError  	2	9	replace
353	[BUG]  [BUGGY]  Node  first  =  node.getLastChild().getNext();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getLastChild().getNext();	  Node    first    =    n.getLastChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  node	2	None	replace
354	[BUG]  [BUGGY]  Node  first  =  n.getfirstChild().getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getfirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getfirstChild().getNext();	  Node    first    =    n.getLastChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
355	[BUG]  [BUGGY]  Node  first  =  gNode.getLastChild();  Node  first  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getLastChild();  Node  first  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getLastChild();  Node  first  =  n.getFirstChild();	  Node    first    =    n.getLastChild();    Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
356	[BUG]  [BUGGY]  Node  first  =  node.getLastChild();  Node  first  =  n.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getLastChild();  Node  first  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getLastChild();  Node  first  =  n.getFirstChild();	  Node    first    =    n.getLastChild();    Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	10	None	replace
357	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Preconditions.checkState(n.hasChildren());  Node  first  =  n.getFirstChild();	  Node    first    =    n.getLastChild();    Node    first    =    n.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	10	2	replace
358	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.hasChildren());  Node  first  =  n.getFirstChild();	  Node    first    =    n.getLastChild();    Node    first    =    n.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	10	2	replace
359	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n),  n);  break;  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n),  n);  break;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n),  n);  break;	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    break;    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	77	None	replace
360	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  n));  break;  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  n));  break;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  n));  break;	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    break;    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node)	77	None	replace
361	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  outEdges));  break;  [CE]  cannot  find  symbol  outEdges  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  outEdges));  break;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  outEdges));  break;	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    break;    	non-compiled	[CE]  cannot  find  symbol  outEdges	77	None	replace
362	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(gNode));  break;  [CE]  no  suitable  method  found  for  computeFollowNode(DiGraphNode<Node,Branch>)  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(gNode));  break;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(gNode));  break;	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    break;    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(DiGraphNode<Node,Branch>)	77	None	replace
363	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  first));  break;  [CE]  cannot  find  symbol  first  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  first));  break;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  first));  break;	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    break;    	non-compiled	[CE]  cannot  find  symbol  first	77	None	replace
364	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  gNode));  break;  [CE]  no  suitable  method  found  for  computeFollowNode(Node,DiGraphNode<Node,Branch>)  [FE]                                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  gNode));  break;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  gNode));  break;	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    break;    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,DiGraphNode<Node,Branch>)	77	None	replace
365	[BUG]  [BUGGY]  Node  first  =  gNode.lastChild();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.lastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.lastChild();	  Node    first    =    n.lastChild();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
366	[BUG]  [BUGGY]  Node  first  =  node.lastChild();  [CE]  cannot  find  symbol  node  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.lastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.lastChild();	  Node    first    =    n.lastChild();    	non-compiled	[CE]  cannot  find  symbol  node	34	None	replace
367	[BUG]  [BUGGY]  Node  first  =  n.cloneBlock();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneBlock();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.cloneBlock();	  Node    first    =    n.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
368	[BUG]  [BUGGY]  Node  first  =  gNode.cloneTree();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.cloneTree();	  Node    first    =    n.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
369	[BUG]  [BUGGY]  Node  first  =  n.removeFirst();  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirst();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirst();	  Node    first    =    n.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
370	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  next  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Node  next  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    next    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	11	2	replace
371	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  next  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  next  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  next  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    next    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	11	2	replace
372	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  next  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild();  Node  next  =  n.getFirstChild();	  Node    first    =    n.getLastChild();    Node    next    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	11	3	replace
373	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  next  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  next  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Node  next  =  n.getFirstChild();	  Node    first    =    n.getLastChild();    Node    next    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	11	3	replace
374	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  next  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild();  Node  next  =  n.getNext();	  Node    first    =    n.getLastChild();    Node    next    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	11	3	replace
375	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  next  =  n.getNext();  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  next  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Node  next  =  n.getNext();	  Node    first    =    n.getLastChild();    Node    next    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	11	3	replace
376	[BUG]  [BUGGY]  Node  first  =  gNode.getLastChild();  Node  next  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getLastChild();  Node  next  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getLastChild();  Node  next  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    next    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
377	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Node  next  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext();  Node  next  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    next    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	11	6	replace
378	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  next  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Node  next  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Node  next  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    next    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	11	6	replace
379	[BUG]  [BUGGY]  Node  first  =  n.getfirstChild();  Node  next  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getfirstChild();  Node  next  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getfirstChild();  Node  next  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    next    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
380	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getParent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild().getParent();	  Node    first    =    n.getFirstChild().getParent();    	compilable	  [FE]  StackOverflowError  	90	11	replace
381	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getParent();  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getParent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().getParent();	  Node    first    =    n.getFirstChild().getParent();    	compilable	  [FE]  StackOverflowError  	90	11	replace
382	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().getParent();  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().getParent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().getParent();	  Node    first    =    n.getFirstChild().getParent();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
383	[BUG]  [BUGGY]  Node  first  =  n,  gNode.getNext();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  gNode.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  gNode.getNext();	  Node    first    =    gNode.getNext();    	non-compiled	[CE]  ';'  expected	55	None	replace
384	[BUG]  [BUGGY]  Node  first  =  nNode.getNext();  [CE]  cannot  find  symbol  nNode  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  nNode.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nNode.getNext();	  Node    first    =    gNode.getNext();    	non-compiled	[CE]  cannot  find  symbol  nNode	55	None	replace
385	[BUG]  [BUGGY]  Node  first  =  node.getNext();  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getNext();	  Node    first    =    gNode.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	55	None	replace
386	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getNext();  [CE]  cannot  find  symbol  nextCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  nextCfgNode.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nextCfgNode.getNext();	  Node    first    =    gNode.getNext();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	55	None	replace
387	[BUG]  [BUGGY]  Node  first  =  gNode.getLastChild();  Preconditions.checkState(n.hasChildren());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getLastChild();  Preconditions.checkState(n.hasChildren());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getLastChild();  Preconditions.checkState(n.hasChildren());	  Node    first    =    n.getLastChild();    Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
388	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.hasChildren());	  Node    first    =    n.getLastChild();    Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  cannot  find  symbol  first	96	None	replace
389	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  preconditions.checkState(n.hasChildren());  [CE]  cannot  find  symbol  preconditions  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  preconditions.checkState(n.hasChildren());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  preconditions.checkState(n.hasChildren());	  Node    first    =    n.getLastChild();    Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  cannot  find  symbol  preconditions	96	None	replace
390	[BUG]  [BUGGY]  Node  first  =  gNode.getPrevious();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getPrevious();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getPrevious();	  Node    first    =    n.getPrevious();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
391	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getPrevious();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  nextCfgNode.getPrevious();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nextCfgNode.getPrevious();	  Node    first    =    n.getPrevious();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	58	None	replace
392	[BUG]  [BUGGY]  Node  first  =  n,  outEdges.getPrevious();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  outEdges.getPrevious();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  outEdges.getPrevious();	  Node    first    =    n.getPrevious();    	non-compiled	[CE]  ';'  expected	58	None	replace
393	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneBlock();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneBlock();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext().cloneBlock();	  Node    first    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
394	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().getNext().cloneTree();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().getNext().cloneTree();	  Node    first    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
395	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneCfgNode();  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneCfgNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext().cloneCfgNode();	  Node    first    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
396	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().clonePath();  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().clonePath();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext().clonePath();	  Node    first    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
397	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  next  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().cloneTree();  Node  next  =  n.getLastChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    next    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	72	1	replace
398	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  next  =  n.getLastChild().cloneTree();  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  next  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Node  next  =  n.getLastChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    next    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	72	1	replace
399	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  next  =  n.getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().cloneTree();  Node  next  =  n.getNext().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    next    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	72	11	replace
400	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  next  =  n.getNext().cloneTree();  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  next  =  n.getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Node  next  =  n.getNext().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    next    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	72	11	replace
401	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  next  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild().cloneTree();  Node  next  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    next    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	72	1	replace
402	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  next  =  n.getFirstChild().cloneTree();  [FE]  RuntimeException  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  next  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().cloneTree();  Node  next  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    next    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	72	1	replace
403	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  next  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().cloneNode();  Node  next  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    next    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	72	1	replace
404	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  next  =  n.getFirstChild().cloneTree();  [FE]  RuntimeException  [FE]                        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  next  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneNode();  Node  next  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    next    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	72	1	replace
405	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  next  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Node  next  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    next    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  AssertionFailedError  	72	2	replace
406	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  next  =  n.getFirstChild().cloneTree();  [FE]  AssertionFailedError  [FE]                          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  next  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  next  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    next    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  AssertionFailedError  	72	2	replace
407	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneBlock();  Node  next  =  n.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  [FE]                            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneBlock();  Node  next  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneBlock();  Node  next  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    next    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
408	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  node.getFirstChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  node.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  node.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    node.getFirstChild().cloneTree();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	103	None	replace
409	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    node.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	103	11	replace
410	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    node.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	103	11	replace
411	[BUG]  [BUGGY]  Tode  first  =  n.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Tode  first  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Tode  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Tode    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
412	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Tode  first  =  n.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Tode  first  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().cloneTree();  Tode  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Tode    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
413	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().cloneTree();  Tode  first  =  n.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().cloneTree();  Tode  first  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().cloneTree();  Tode  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Tode    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
414	[BUG]  [BUGGY]  Node  first  =  node.getFirstChild().cloneTree();  Tode  first  =  n.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  node  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getFirstChild().cloneTree();  Tode  first  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getFirstChild().cloneTree();  Tode  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Tode    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol  node	74	None	replace
415	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Tode  first  =  n.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Tode  first  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Tode  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Tode    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
416	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Tode  first  =  n.getLastChild().cloneTree();  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Tode  first  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Tode  first  =  n.getLastChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Tode    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
417	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Token  first  =  n.getFirstChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Token  first  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().cloneTree();  Token  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Token    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	105	None	replace
418	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Token  first  =  n.getFirstChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Token  first  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Token  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Token    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	105	None	replace
419	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Token  first  =  n.getLastChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Token  first  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Token  first  =  n.getLastChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Token    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	105	None	replace
420	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().cloneTree();  Token  first  =  n.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().cloneTree();  Token  first  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().cloneTree();  Token  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Token    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
421	[BUG]  [BUGGY]  Node  first  =  n.getNext().cloneTree();  Token  first  =  n.getFirstChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().cloneTree();  Token  first  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext().cloneTree();  Token  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Token    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	105	None	replace
422	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.removeNextChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.removeNextChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.removeNextChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeNextChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	24	None	replace
423	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.removeNextChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.removeNextChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Node  first  =  n.removeNextChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeNextChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	24	None	replace
424	[BUG]  [BUGGY]  Node  first  =  n.firstChild();  Node  first  =  n.removeNextChild();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.firstChild();  Node  first  =  n.removeNextChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.firstChild();  Node  first  =  n.removeNextChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeNextChild();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
425	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  second  =  n.removeNextChild();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  second  =  n.removeNextChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Node  second  =  n.removeNextChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeNextChild();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
426	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  first  =  node.removeNextChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  first  =  node.removeNextChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Node  first  =  node.removeNextChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeNextChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	24	None	replace
427	[BUG]  [BUGGY]  Node  first  =  n,  outEdges.getLastChild();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  outEdges.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  outEdges.getLastChild();	  Node    first    =    n,    outEdges.getPreviousChild();    	non-compiled	[CE]  ';'  expected	100	None	replace
428	[BUG]  [BUGGY]  Node  first  =  n,  outEdges.getNext();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  outEdges.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  outEdges.getNext();	  Node    first    =    n,    outEdges.getPreviousChild();    	non-compiled	[CE]  ';'  expected	100	None	replace
429	[BUG]  [BUGGY]  Node  first  =  gNode,  outEdges.getPreviousChild();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode,  outEdges.getPreviousChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode,  outEdges.getPreviousChild();	  Node    first    =    n,    outEdges.getPreviousChild();    	non-compiled	[CE]  ';'  expected	100	None	replace
430	[BUG]  [BUGGY]  Node  first  =  n,  nextCfgNode.getPreviousChild();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  nextCfgNode.getPreviousChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  nextCfgNode.getPreviousChild();	  Node    first    =    n,    outEdges.getPreviousChild();    	non-compiled	[CE]  ';'  expected	100	None	replace
431	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	82	None	replace
432	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first).getValue());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first).getValue());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first).getValue());	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
433	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first).getValue());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first).getValue());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first).getValue());	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	82	None	replace
434	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
435	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	82	None	replace
436	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first).getValue());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first).getValue());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first).getValue());	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	82	None	replace
437	[BUG]  [BUGGY]  Node  first  =  gNode.getParent();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getParent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getParent();	  Node    first    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
438	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getLastChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.getLastChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getLastChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	60	None	replace
439	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().getNext();  Node  first  =  n.getLastChild().getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().getNext();  Node  first  =  n.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().getNext();  Node  first  =  n.getLastChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getLastChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
440	[BUG]  [BUGGY]  Node  first  =  node.getFirstChild().getNext();  Node  first  =  n.getLastChild().getNext();  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getFirstChild().getNext();  Node  first  =  n.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getFirstChild().getNext();  Node  first  =  n.getLastChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getLastChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  node	60	None	replace
441	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.hasNext());  Node  first  =  n.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.hasNext());  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(first.hasNext());  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.hasNext());    Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
442	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.hasNext());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.hasNext());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(first.hasNext());	  Node    first    =    n.getNext();    Preconditions.checkState(n.hasNext());    Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
443	[BUG]  [BUGGY]  Node  first  =  gNode.getNext();  Preconditions.checkState(n.hasNext());  Node  first  =  n.getNext();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getNext();  Preconditions.checkState(n.hasNext());  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getNext();  Preconditions.checkState(n.hasNext());  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.hasNext());    Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
444	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.hasNext());  Node  first  =  n.getNext();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.hasNext());  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Preconditions.checkState(n.hasNext());  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.hasNext());    Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
445	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.hasNext());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.hasNext());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(n.hasNext());	  Node    first    =    n.getNext();    Preconditions.checkState(n.hasNext());    Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
446	[BUG]  [BUGGY]  Node  first  =  node.getNext();  Preconditions.checkState(n.hasNext());  Node  first  =  n.getNext();  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getNext();  Preconditions.checkState(n.hasNext());  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getNext();  Preconditions.checkState(n.hasNext());  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.hasNext());    Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	119	None	replace
447	[BUG]  [BUGGY]  Node  first  =  cfgNode.getPreviousChild();  [CE]  cannot  find  symbol  cfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  cfgNode.getPreviousChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  cfgNode.getPreviousChild();	  Node    first    =    node.getPreviousChild();    	non-compiled	[CE]  cannot  find  symbol  cfgNode	18	None	replace
448	[BUG]  [BUGGY]  Node  first  =  outEdges.getPreviousChild();  [CE]  cannot  find  symbol  outEdges  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  outEdges.getPreviousChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  outEdges.getPreviousChild();	  Node    first    =    node.getPreviousChild();    	non-compiled	[CE]  cannot  find  symbol  outEdges	18	None	replace
449	[BUG]  [BUGGY]  Node  first  =  mNode.getPreviousChild();  [CE]  cannot  find  symbol  mNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  mNode.getPreviousChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  mNode.getPreviousChild();	  Node    first    =    node.getPreviousChild();    	non-compiled	[CE]  cannot  find  symbol  mNode	18	None	replace
450	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    	non-compiled	[CE]  unreachable  statement	81	None	replace
451	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first,  outEdges));  [CE]  cannot  find  symbol  outEdges  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first,  outEdges));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first,  outEdges));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    	non-compiled	[CE]  cannot  find  symbol  outEdges	81	None	replace
452	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    	non-compiled	[CE]  unreachable  statement	81	None	replace
453	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getfirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getfirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.getfirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getfirstChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	replace
454	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().getNext();  Node  first  =  n.getfirstChild().getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().getNext();  Node  first  =  n.getfirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().getNext();  Node  first  =  n.getfirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getfirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
455	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().getNext();  Node  first  =  n.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().getNext();  Node  first  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().getNext();  Node  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
456	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	84	None	replace
457	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	84	None	replace
458	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	84	None	replace
459	[BUG]  [BUGGY]  Node  first  =  gNode.getNext();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getNext();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getNext();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
460	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  node.getLastChild();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  node.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.hasChildren());  Node  first  =  node.getLastChild();	  Node    first    =    n.getLastChild();    Node    first    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	108	None	replace
461	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  second  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Node  second  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    second    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	21	11	replace
462	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  second  =  n.removeFirstChild();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  second  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  second  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    second    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	21	11	replace
463	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  second  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Node  second  =  n.getFirstChild();	  Node    first    =    n.removeFirstChild();    Node    second    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	21	2	replace
464	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  second  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  second  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  second  =  n.getFirstChild();	  Node    first    =    n.removeFirstChild();    Node    second    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	21	2	replace
465	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  second  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild();  Node  second  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    second    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	21	11	replace
466	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  second  =  n.removeFirstChild();  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  second  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Node  second  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    second    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	21	11	replace
467	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Node  second  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext();  Node  second  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    second    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	21	11	replace
468	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  second  =  n.removeFirstChild();  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Node  second  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Node  second  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    second    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	21	11	replace
469	[BUG]  [BUGGY]  Node  first  =  n.removeLastChild();  Node  second  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeLastChild();  Node  second  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeLastChild();  Node  second  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    second    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
470	[BUG]  [BUGGY]  Name  first  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Name  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Name  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Name    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
471	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Name  first  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Name  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Name  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Name    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
472	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Name  first  =  gNode.removeFirstChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Name  first  =  gNode.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Name  first  =  gNode.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Name    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
473	[BUG]  [BUGGY]  Node  first  =  node.removeFirstChild();  Name  first  =  n.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.removeFirstChild();  Name  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.removeFirstChild();  Name  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Name    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	92	None	replace
474	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Date  first  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Date  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Date  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Name    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
475	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n),  outEdges);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n),  outEdges);	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol  outEdges	76	None	replace
476	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n,  outEdges));  [CE]  cannot  find  symbol  outEdges  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n,  outEdges));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n,  outEdges));	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol  outEdges	76	None	replace
477	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(outEdges));  [CE]  cannot  find  symbol  outEdges  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(outEdges));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(outEdges));	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol  outEdges	76	None	replace
478	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n,  fallThrough));  [CE]  cannot  find  symbol  fallThrough  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n,  fallThrough));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n,  fallThrough));	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol  fallThrough	76	None	replace
479	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalyzer.computeFallThrough(n));  [CE]  cannot  find  symbol  ControlFlowAnalyzer  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalyzer.computeFallThrough(n));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalyzer.computeFallThrough(n));	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol  ControlFlowAnalyzer	76	None	replace
480	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n,  cfgNode));  [CE]  cannot  find  symbol  cfgNode  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n,  cfgNode));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n,  cfgNode));	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol  cfgNode	76	None	replace
481	[BUG]  [BUGGY]  Token  first  =  n.getFirstChild().getNext();  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Token  first  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Token  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Token    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  incompatible  types	110	None	replace
482	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  Token  first  =  n.getFirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext();  Token  first  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().getNext();  Token  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Token    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	110	None	replace
483	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().getNext();  Token  first  =  n.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().getNext();  Token  first  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().getNext();  Token  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Token    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
484	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Token  first  =  n.getFirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Token  first  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Token  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Token    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	110	None	replace
485	[BUG]  [BUGGY]  Node  first  =  n,  gNode.getPreviousChild();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  gNode.getPreviousChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  gNode.getPreviousChild();	  Node    first    =    gNode.getPreviousChild();    	non-compiled	[CE]  ';'  expected	16	None	replace
486	[BUG]  [BUGGY]  Node  first  =  nNode.getPreviousChild();  [CE]  cannot  find  symbol  nNode  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  nNode.getPreviousChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nNode.getPreviousChild();	  Node    first    =    gNode.getPreviousChild();    	non-compiled	[CE]  cannot  find  symbol  nNode	16	None	replace
487	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getPreviousChild();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  nextCfgNode.getPreviousChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nextCfgNode.getPreviousChild();	  Node    first    =    gNode.getPreviousChild();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	16	None	replace
488	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  next  =  n.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getNext();  Node  next  =  n.getLastChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    next    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	63	6	replace
489	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  next  =  n.getLastChild().getNext();  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  next  =  n.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Node  next  =  n.getLastChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    next    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	63	6	replace
490	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  next  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild().getNext();  Node  next  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    next    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	63	6	replace
491	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  next  =  n.getFirstChild().getNext();  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  next  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().getNext();  Node  next  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    next    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	63	6	replace
492	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  next  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Node  next  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    next    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	63	2	replace
493	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  next  =  n.getFirstChild().getNext();  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  next  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  next  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    next    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	63	2	replace
494	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild().getNext();  Node  next  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getLastChild().getNext();  Node  next  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    next    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	63	8	replace
495	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getLastChild().getNext();  Node  next  =  n.getFirstChild().getNext();  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild().getNext();  Node  next  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getLastChild().getNext();  Node  next  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    next    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	63	8	replace
496	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().getNext();  Node  next  =  n.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().getNext();  Node  next  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().getNext();  Node  next  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    next    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
497	[BUG]  [BUGGY]  Node  first  =  cfgStack.getFirstChild();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  cfgStack.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  cfgStack.getFirstChild();	  Node    first    =    null.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
498	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().getNext()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().getNext()  +  1;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().getNext()  +  1;	  Node    first    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
499	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getNext().getNext();	  Node    first    =    n.getFirstChild().getNext()    +    1;    	compilable	  [FE]  RuntimeException  	6	10	replace
500	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().getNext();  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext().getNext();	  Node    first    =    n.getFirstChild().getNext()    +    1;    	compilable	  [FE]  RuntimeException  	6	10	replace
501	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext()  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext()  *  1;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext()  *  1;	  Node    first    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	6	None	replace
502	[BUG]  [BUGGY]  Node  first  =  n,  n.getFirstChild().getNext()  +  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  n.getFirstChild().getNext()  +  1;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  n.getFirstChild().getNext()  +  1;	  Node    first    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  ';'  expected	6	None	replace
503	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext()  +  1;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().getNext()  +  1;	  Node    first    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	6	None	replace
504	[BUG]  [BUGGY]  Node  first  =  curCfgNode.getFirstChild();  [CE]  cannot  find  symbol  curCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  curCfgNode.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  curCfgNode.getFirstChild();	  Node    first    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	102	None	replace
505	[BUG]  [BUGGY]  Node  first  =  n,  gNode.getFirstChild().getNext();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  gNode.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  gNode.getFirstChild().getNext();	  Node    first    =    gNode.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	3	None	replace
506	[BUG]  [BUGGY]  Node  first  =  nNode.getFirstChild().getNext();  [CE]  cannot  find  symbol  nNode  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  nNode.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nNode.getFirstChild().getNext();	  Node    first    =    gNode.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  nNode	3	None	replace
507	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().cloneTree().getNext();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().cloneTree().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().cloneTree().getNext();	  Node    first    =    gNode.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
508	[BUG]  [BUGGY]  Node  first  =  mNode.getFirstChild().getNext();  [CE]  cannot  find  symbol  mNode  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  mNode.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  mNode.getFirstChild().getNext();	  Node    first    =    gNode.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  mNode	3	None	replace
509	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  gNode.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  gNode.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  gNode.getLastChild();	  Node    first    =    n.getLastChild();    Node    first    =    gNode.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	replace
510	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);	  Node    first    =    n.getLastChild();    Node    first    =    gNode.getLastChild();    	compilable	  [FE]  RuntimeException  	9	11	replace
511	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);	  Node    first    =    n.getLastChild();    Node    first    =    gNode.getLastChild();    	compilable	  [FE]  RuntimeException  	9	11	replace
512	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  node  =  gNode.getLastChild();  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  node  =  gNode.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  node  =  gNode.getLastChild();	  Node    first    =    n.getLastChild();    Node    first    =    gNode.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	9	None	replace
513	[BUG]  [BUGGY]  Tode  first  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Tode  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Tode  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Tode    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
514	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Tode  first  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Tode  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Tode  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Tode    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
515	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Tode  first  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Tode  first  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Tode  first  =  n.getFirstChild();	  Node    first    =    n.getLastChild();    Tode    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
516	[BUG]  [BUGGY]  Node  first  =  gNode.getLastChild();  Tode  first  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getLastChild();  Tode  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getLastChild();  Tode  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Tode    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
517	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Tode  first  =  gNode.getLastChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Tode  first  =  gNode.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Tode  first  =  gNode.getLastChild();	  Node    first    =    n.getLastChild();    Tode    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
518	[BUG]  [BUGGY]  Node  first  =  node.getLastChild();  Tode  first  =  n.getLastChild();  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getLastChild();  Tode  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getLastChild();  Tode  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Tode    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	95	None	replace
519	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  next  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Node  next  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    next    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	11	replace
520	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  next  =  n.removeFirstChild();  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  next  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  next  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    next    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	11	replace
521	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  next  =  n.removeLastChild();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  next  =  n.removeLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Node  next  =  n.removeLastChild();	  Node    first    =    n.removeFirstChild();    Node    next    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
522	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  next  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Node  next  =  n.getFirstChild();	  Node    first    =    n.removeFirstChild();    Node    next    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	2	replace
523	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  next  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  next  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  next  =  n.getFirstChild();	  Node    first    =    n.removeFirstChild();    Node    next    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	2	replace
524	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  next  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild();  Node  next  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    next    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	11	replace
525	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  next  =  n.removeFirstChild();  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Node  next  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Node  next  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    next    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	11	replace
526	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  next  =  n.removeNext();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  next  =  n.removeNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Node  next  =  n.removeNext();	  Node    first    =    n.removeFirstChild();    Node    next    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
527	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Node  next  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext();  Node  next  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    next    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	11	replace
528	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  next  =  n.removeFirstChild();  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Node  next  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Node  next  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    next    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	11	replace
529	[BUG]  [BUGGY]  Node  first  =  n,  gNode.getLastChild();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  gNode.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  gNode.getLastChild();	  Node    first    =    gNode.getLastChild();    	non-compiled	[CE]  ';'  expected	40	None	replace
530	[BUG]  [BUGGY]  Node  first  =  nNode.getLastChild();  [CE]  cannot  find  symbol  nNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  nNode.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nNode.getLastChild();	  Node    first    =    gNode.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  nNode	40	None	replace
531	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getLastChild().cloneTree());  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getLastChild().cloneTree());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getLastChild().cloneTree());	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getFirstChild().cloneTree());    	non-compiled	[CE]  ';'  expected	73	None	replace
532	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  first  =  n.getFirstChild().cloneTree());  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  first  =  n.getFirstChild().cloneTree());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().cloneTree();  Node  first  =  n.getFirstChild().cloneTree());	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getFirstChild().cloneTree());    	non-compiled	[CE]  ';'  expected	73	None	replace
533	[BUG]  [BUGGY]  Node  first  =  n.getNext().cloneTree();  Node  first  =  n.getFirstChild().cloneTree());  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().cloneTree();  Node  first  =  n.getFirstChild().cloneTree());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext().cloneTree();  Node  first  =  n.getFirstChild().cloneTree());	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getFirstChild().cloneTree());    	non-compiled	[CE]  ';'  expected	73	None	replace
534	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getFirstChild().cloneTree());  [CE]  ';'  expected  [FE]                          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getFirstChild().cloneTree());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getFirstChild().cloneTree());	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getFirstChild().cloneTree());    	non-compiled	[CE]  ';'  expected	73	None	replace
535	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneBlock();  Node  first  =  n.getFirstChild().cloneTree());  [CE]  ';'  expected  [FE]                            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneBlock();  Node  first  =  n.getFirstChild().cloneTree());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneBlock();  Node  first  =  n.getFirstChild().cloneTree());	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getFirstChild().cloneTree());    	non-compiled	[CE]  ';'  expected	73	None	replace
536	[BUG]  [BUGGY]  Node  first  =  gNode.previousChild();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.previousChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.previousChild();	  Node    first    =    n.previousChild();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
537	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.previousChild();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  nextCfgNode.previousChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nextCfgNode.previousChild();	  Node    first    =    n.previousChild();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	93	None	replace
538	[BUG]  [BUGGY]  Node  first  =  node.previousChild();  [CE]  cannot  find  symbol  node  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.previousChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.previousChild();	  Node    first    =    n.previousChild();    	non-compiled	[CE]  cannot  find  symbol  node	93	None	replace
539	[BUG]  [BUGGY]  Node  first  =  nodes.previousChild();  [CE]  cannot  find  symbol  nodes  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  nodes.previousChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nodes.previousChild();	  Node    first    =    n.previousChild();    	non-compiled	[CE]  cannot  find  symbol  nodes	93	None	replace
540	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.BLOCK);    Node    first    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	120	6	replace
541	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.BLOCK);    Node    first    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	120	6	replace
542	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.BLOCK);    Node    first    =    n.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	120	None	replace
543	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.BLOCK);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	120	11	replace
544	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.BLOCK);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	120	11	replace
545	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.BLOCK);    Node    first    =    n.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	120	None	replace
546	[BUG]  [BUGGY]  Node  first  =  gNode.getNext();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getNext();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getNext();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.BLOCK);    Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
547	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Node  first  =  n.getFirstChild().getNext().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Node  first  =  n.getFirstChild().getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext().cloneTree();    Node  first  =  n.getFirstChild().getNext().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	45	None	add
548	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Node  first  =  n.getLastChild().getNext().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Node  first  =  n.getLastChild().getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext().cloneTree();    Node  first  =  n.getLastChild().getNext().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	45	None	add
549	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Node  second  =  n.getFirstChild().getNext().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Node  second  =  n.getFirstChild().getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext().cloneTree();    Node  second  =  n.getFirstChild().getNext().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	45	None	add
550	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Node  first  =  gNode.getFirstChild().getNext().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Node  first  =  gNode.getFirstChild().getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext().cloneTree();    Node  first  =  gNode.getFirstChild().getNext().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	45	None	add
551	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Node  next  =  n.getFirstChild().getNext().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Node  next  =  n.getFirstChild().getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext().cloneTree();    Node  next  =  n.getFirstChild().getNext().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	45	None	add
552	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Node  first  =  n.getFirstChild().getNext().cloneTree());  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Node  first  =  n.getFirstChild().getNext().cloneTree());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext().cloneTree();    Node  first  =  n.getFirstChild().getNext().cloneTree());	  	non-compiled	[CE]  ';'  expected	45	None	add
553	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Node  first  =  n.getNextChild().getNext().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Node  first  =  n.getNextChild().getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext().cloneTree();    Node  first  =  n.getNextChild().getNext().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	45	None	add
554	[BUG]  [BUGGY]  Node  first  =  gNode.getfirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getfirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getfirstChild();	  Node    first    =    n.getfirstChild();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
555	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  last  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.removeFirstChild();  Node  last  =  n.getLastChild();	  Node    first    =    n.removeFirstChild();    Node    last    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	25	11	replace
556	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  last  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  last  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Node  last  =  n.getLastChild();	  Node    first    =    n.removeFirstChild();    Node    last    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	25	11	replace
557	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Preconditions.checkState(n.hasChildren());  Node  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    node.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	109	6	replace
558	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getFirstChild().getNext();  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.hasChildren());  Node  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    node.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	109	6	replace
559	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  node.getFirstChild().getNext();  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  node.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.hasChildren());  Node  first  =  node.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    node.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  node	109	None	replace
560	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(first!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Preconditions.checkState(first!=  null);	  Node    first    =    n.getLastChild();    Node    first    =    gNode.getLastChild();    	compilable	  [FE]  AssertionFailedError  	9	2	replace
561	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(first!=  null);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(first!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Preconditions.checkState(first!=  null);	  Node    first    =    n.getLastChild();    Node    first    =    gNode.getLastChild();    	compilable	  [FE]  AssertionFailedError  	9	2	replace
562	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getFirstChild().getGrandparent();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getFirstChild().getGrandparent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getParent();    Node  first  =  n.getFirstChild().getGrandparent();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	89	None	add
563	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.BLOCK);    Node    first    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	120	6	replace
564	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.BLOCK);    Node    first    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	120	6	replace
565	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.BLOCK);    Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  first	120	None	replace
566	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().cloneTree();  Node  next  =  n.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().cloneTree();  Node  next  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().cloneTree();  Node  next  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    next    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
567	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  next  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Node  next  =  n.getLastChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    next    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  AssertionFailedError  	72	2	replace
568	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  next  =  n.getLastChild().cloneTree();  [FE]  AssertionFailedError  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  next  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  next  =  n.getLastChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    next    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  AssertionFailedError  	72	2	replace
569	[BUG]  [BUGGY]  Node  first  =  n,  outEdges.getDestination();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  outEdges.getDestination();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  outEdges.getDestination();	  Node    first    =    n,    outEdges.getPreviousChild();    	non-compiled	[CE]  ';'  expected	100	None	replace
570	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    gNode.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	62	11	replace
571	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    gNode.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	62	11	replace
572	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(NodeUtil.isFunctionDeclaration(first));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(NodeUtil.isFunctionDeclaration(first));	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    gNode.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	62	11	replace
573	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(NodeUtil.isFunctionDeclaration(first));  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(NodeUtil.isFunctionDeclaration(first));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(NodeUtil.isFunctionDeclaration(first));	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    gNode.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	62	11	replace
574	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().cloneTree();  Node  first  =  n.getFirstChild().cloneTree());  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().cloneTree();  Node  first  =  n.getFirstChild().cloneTree());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().cloneTree();  Node  first  =  n.getFirstChild().cloneTree());	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getFirstChild().cloneTree());    	non-compiled	[CE]  ';'  expected	73	None	replace
575	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getNext().cloneTree());  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getNext().cloneTree());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getNext().cloneTree());	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getFirstChild().cloneTree());    	non-compiled	[CE]  ';'  expected	73	None	replace
576	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getFirstChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getFirstChild().cloneTree());    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	73	None	replace
577	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  next  =  gNode.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  next  =  gNode.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Node  next  =  gNode.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    next    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
578	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  next  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getParent();  Node  next  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    next    =    n.getFirstChild().getNext();    	compilable	  [FE]  StackOverflowError  	63	11	replace
579	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  next  =  n.getFirstChild().getNext();  [FE]  StackOverflowError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  next  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getParent();  Node  next  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    next    =    n.getFirstChild().getNext();    	compilable	  [FE]  StackOverflowError  	63	11	replace
580	[BUG]  [BUGGY]  Node  first  =  rNode.getFirstChild();  [CE]  cannot  find  symbol  rNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  rNode.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  rNode.getFirstChild();	  Node    first    =    mNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  rNode	53	None	replace
581	[BUG]  [BUGGY]  Node  first  =  t.getFirstChild();  [CE]  cannot  find  symbol  t  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  t.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  t.getFirstChild();	  Node    first    =    mNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  t	53	None	replace
582	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  no.removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  no.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  no.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    no.removeFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	114	None	replace
583	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Preconditions.checkState(n.hasChildren());  Node  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    no.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	114	11	replace
584	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  n.removeFirstChild();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.hasChildren());  Node  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    no.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	114	11	replace
585	[BUG]  [BUGGY]  Node  first  =  n.extChild();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.extChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.extChild();	  Node    first    =    n.nextChild();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
586	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneCfgNode();  Node  first  =  n.getLastChild().cloneTree();  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneCfgNode();  Node  first  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneCfgNode();  Node  first  =  n.getLastChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getLastChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
587	[BUG]  [BUGGY]  Node  first  =  n,  outEdges.previousChild();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  outEdges.previousChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  outEdges.previousChild();	  Node    first    =    n.previousChild();    	non-compiled	[CE]  ';'  expected	93	None	replace
588	[BUG]  [BUGGY]  Node  first  =  n.previousChild()  +  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.previousChild()  +  1;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.previousChild()  +  1;	  Node    first    =    n.previousChild();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
589	[BUG]  [BUGGY]  Node  first  =  cfgStack.previousChild();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  cfgStack.previousChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  cfgStack.previousChild();	  Node    first    =    n.previousChild();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
590	[BUG]  [BUGGY]  Node  first  =  n,  outEdges.removeLastChild();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  outEdges.removeLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  outEdges.removeLastChild();	  Node    first    =    n.removeLastChild();    	non-compiled	[CE]  ';'  expected	14	None	replace
591	[BUG]  [BUGGY]  Node  first  =  gNode.removeFirstChild();  Token  first  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.removeFirstChild();  Token  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.removeFirstChild();  Token  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Token    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
592	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild();  Preconditions.checkState(n.hasChildren());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild();  Preconditions.checkState(n.hasChildren());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild();  Preconditions.checkState(n.hasChildren());	  Node    first    =    n.getLastChild();    Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
593	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  unreachable  statement	30	None	replace
594	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first,  n));  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first,  n));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first,  n));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node)	30	None	replace
595	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n).getValue());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n).getValue());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n).getValue());	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
596	[BUG]  [BUGGY]  Node  first  =  gNode.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first).getValue());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first).getValue());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first).getValue());	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
597	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first).getValue());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first).getValue());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first).getValue());	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
598	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Preconditions.checkState(n.hasChildren());  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.hasChildren());    Node    first    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	83	6	replace
599	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getNext();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.hasChildren());  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.hasChildren());    Node    first    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	83	6	replace
600	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  Preconditions.checkState(n.hasChildren());  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  Preconditions.checkState(n.hasChildren());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.hasChildren());  Preconditions.checkState(n.hasChildren());	  Node    first    =    n.getNext();    Preconditions.checkState(n.hasChildren());    Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  first	83	None	replace
601	[BUG]  [BUGGY]  gNode.removeChild(outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  gNode.removeChild(outEdges);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	gNode.removeChild(outEdges);	  gNode.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  outEdges	111	None	replace
602	[BUG]  [BUGGY]  Node  first  =  n.getNext().cloneTree();  Tode  first  =  n.getNext().cloneTree();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().cloneTree();  Tode  first  =  n.getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext().cloneTree();    Tode  first  =  n.getNext().cloneTree();	  	non-compiled	[CE]  cannot  find  symbol	51	None	add
603	[BUG]  [BUGGY]  Node  first  =  n.getNext().cloneTree();  n  =  n.getNext().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().cloneTree();  n  =  n.getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext().cloneTree();    n  =  n.getNext().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	51	None	add
604	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(n);  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(n);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(n);	  n.removeChildren();    	non-compiled	[CE]  cannot  find  symbol  first	112	None	replace
605	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));  break;  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));  break;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));  break;	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    break;    	non-compiled	[CE]  cannot  find  symbol  first	77	None	replace
606	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeBlockNode(n));  break;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeBlockNode(n));  break;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeBlockNode(n));  break;	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    break;    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
607	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeBooleanNode(n));  break;  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeBooleanNode(n));  break;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeBooleanNode(n));  break;	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    break;    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
608	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n),  gNode);  break;  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n),  gNode);  break;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n),  gNode);  break;	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    break;    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	77	None	replace
609	[BUG]  [BUGGY]  Node  first  =  gNode.getNext();  Preconditions.checkState(n.getParent()  ==  null);  Node  first  =  n.getNext();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getNext();  Preconditions.checkState(n.getParent()  ==  null);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getNext();  Preconditions.checkState(n.getParent()  ==  null);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()    ==    null);    Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
610	[BUG]  [BUGGY]  Preconditions.checkState(n.hasNext());  Node  first  =  n.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasNext());  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.hasNext());  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.hasNext());    Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
611	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext()  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext()  +  2;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext()  +  2;	  Node    first    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	6	None	replace
612	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Node  first  =  n.getLastChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	20	None	replace
613	[BUG]  [BUGGY]  Node  first  =  gNode.removeFirstChild();  Node  first  =  n.removeLastChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.removeFirstChild();  Node  first  =  n.removeLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.removeFirstChild();  Node  first  =  n.removeLastChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
614	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  n.removeLastChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  n.removeLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.hasChildren());  Node  first  =  n.removeLastChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
615	[BUG]  [BUGGY]  Node  first  =  n,  outEdges.lastChild();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  outEdges.lastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  outEdges.lastChild();	  Node    first    =    n.lastChild();    	non-compiled	[CE]  ';'  expected	34	None	replace
616	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first!=  null);	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getfirstChild().getNext();    	compilable	  [FE]  RuntimeException  	87	10	replace
617	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first!=  null);  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(first!=  null);	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getfirstChild().getNext();    	compilable	  [FE]  RuntimeException  	87	10	replace
618	[BUG]  [BUGGY]  ReflectionNode  first  =  n.getNext();  ReflectionNode  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  ReflectionNode  first  =  n.getNext();  ReflectionNode  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	ReflectionNode  first  =  n.getNext();  ReflectionNode  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
619	[BUG]  [BUGGY]  ReflectionNode  first  =  n.getNext();  ReflectionNode  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  ReflectionNode  first  =  n.getNext();  ReflectionNode  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	ReflectionNode  first  =  n.getNext();  ReflectionNode  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
620	[BUG]  [BUGGY]  ReflectionNode  first  =  n.getNext();  ReflectionNode  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  ReflectionNode  first  =  n.getNext();  ReflectionNode  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	ReflectionNode  first  =  n.getNext();  ReflectionNode  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
621	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Name  first  =  n.getFirstChild().getLastChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Name  first  =  n.getFirstChild().getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getLastChild();    Name  first  =  n.getFirstChild().getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
622	[BUG]  [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  n);  Name  first  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  n);  Name  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.getLastChild()  ==  n);  Name  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Name    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
623	[BUG]  [BUGGY]  Node  first  =  n.parentChild();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.parentChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.parentChild();	  Node    first    =    n.secondChild();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
624	[BUG]  [BUGGY]  Node  first  =  node.secondChild();  [CE]  cannot  find  symbol  node  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.secondChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.secondChild();	  Node    first    =    n.secondChild();    	non-compiled	[CE]  cannot  find  symbol  node	36	None	replace
625	[BUG]  [BUGGY]  Preconditions.checkState(n.removeFirstChild());  Name  first  =  n.removeFirstChild();  [CE]  no  suitable  method  found  for  checkState(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.removeFirstChild());  Name  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.removeFirstChild());  Name  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Name    first    =    n.removeFirstChild();    	non-compiled	[CE]  no  suitable  method  found  for  checkState(Node)	92	None	replace
626	[BUG]  [BUGGY]  Node  first  =  gNode.removeFirstChild();  Name  first  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.removeFirstChild();  Name  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.removeFirstChild();  Name  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Name    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
627	[BUG]  [BUGGY]  Node  first  =  gNode.removeFirstChild();  Node  first  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.removeFirstChild();  Node  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.removeFirstChild();  Node  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
628	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Integer  first  =  n.getFirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Integer  first  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Integer  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Token    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	110	None	replace
629	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  first	86	None	replace
630	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	86	11	replace
631	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	86	11	replace
632	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	86	11	replace
633	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  first  =  n.getNext();  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	86	11	replace
634	[BUG]  [BUGGY]  Node  first  =  n,  fallThrough.getFirstChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  fallThrough.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  fallThrough.getFirstChild();	  Node    first    =    n,    gNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	38	None	replace
635	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild();  Node  first  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild();  Node  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild();  Node  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
636	[BUG]  [BUGGY]  Node  first  =  n.getNext()  ||  nextCfgNode.hasChildren();  [CE]  cannot  find  symbol  nextCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext()  ||  nextCfgNode.hasChildren();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext()  ||  nextCfgNode.hasChildren();	  Node    first    =    n.getNext()    ||    n.hasChildren();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	57	None	replace
637	[BUG]  [BUGGY]  Node  first  =  n.getFirst()  ||  n.hasChildren();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirst()  ||  n.hasChildren();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirst()  ||  n.hasChildren();	  Node    first    =    n.getNext()    ||    n.hasChildren();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
638	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Tode  first  =  gNode.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Tode  first  =  gNode.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Tode  first  =  gNode.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Tode    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
639	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Tode  first  =  n,  n.getFirstChild().cloneTree();  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Tode  first  =  n,  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Tode  first  =  n,  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Tode    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  ';'  expected	74	None	replace
640	[BUG]  [BUGGY]  Node  first  =  gNode.removeFirstChild();  Node  second  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.removeFirstChild();  Node  second  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.removeFirstChild();  Node  second  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    second    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
641	[BUG]  [BUGGY]  Node  first  =  gNode.getNext();  Preconditions.checkState(n.getParent()!=  null);  Node  first  =  n.getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getNext();  Preconditions.checkState(n.getParent()!=  null);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getNext();  Preconditions.checkState(n.getParent()!=  null);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()!=    null);    Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
642	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getParent()!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext();  Preconditions.checkState(n.getParent()!=  null);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()!=    null);    Node    first    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	118	6	replace
643	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getParent()!=  null);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getParent()!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(n.getParent()!=  null);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()!=    null);    Node    first    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	118	6	replace
644	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(n.hasOneChild());	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    no.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	104	8	replace
645	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(n.hasOneChild());  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(n.hasOneChild());	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    no.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	104	8	replace
646	[BUG]  [BUGGY]  Node  first  =  n.getNext().getValue();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().getValue();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext().getValue();	  Node    first    =    n.getNext().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
647	[BUG]  [BUGGY]  Node  first  =  gNode.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
648	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first),  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first),  outEdges);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first),  outEdges);	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    	non-compiled	[CE]  cannot  find  symbol  outEdges	81	None	replace
649	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  second  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getLastChild();  Node  second  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    second    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	61	2	replace
650	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  second  =  n.getFirstChild().getNext();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  second  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getLastChild();  Node  second  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    second    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	61	2	replace
651	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  second  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getParent();  Node  second  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    second    =    n.getFirstChild().getNext();    	compilable	  [FE]  StackOverflowError  	61	11	replace
652	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  second  =  n.getFirstChild().getNext();  [FE]  StackOverflowError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  second  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getParent();  Node  second  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    second    =    n.getFirstChild().getNext();    	compilable	  [FE]  StackOverflowError  	61	11	replace
653	[BUG]  [BUGGY]  Node  first  =  n.getfirstChild().cloneTree();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getfirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getfirstChild().cloneTree();	  Node    first    =    n.getLastChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
654	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Tode  first  =  node.removeFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Tode  first  =  node.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Tode  first  =  node.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Tode    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
655	[BUG]  [BUGGY]  Node  first  =  n.getParent();  Node  first  =  n.getFirst();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getParent();  Node  first  =  n.getFirst();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getParent();    Node  first  =  n.getFirst();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	98	None	add
656	[BUG]  [BUGGY]  Node  first  =  gNode.removeFirstChild();  Node  first  =  n.removeNextChild();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.removeFirstChild();  Node  first  =  n.removeNextChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.removeFirstChild();  Node  first  =  n.removeNextChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeNextChild();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
657	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  first  =  n.getNextChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  first  =  n.getNextChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Node  first  =  n.getNextChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeNextChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	24	None	replace
658	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Preconditions.checkState(first!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.removeFirstChild();  Preconditions.checkState(first!=  null);	  Node    first    =    n.removeFirstChild();    Node    first    =    gNode.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	22	11	replace
659	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Preconditions.checkState(first!=  null);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Preconditions.checkState(first!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Preconditions.checkState(first!=  null);	  Node    first    =    n.removeFirstChild();    Node    first    =    gNode.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	22	11	replace
660	[BUG]  [BUGGY]  Preconditions.checkArgument(n.hasChildren());  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkArgument(n.hasChildren());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkArgument(n.hasChildren());	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    }    else    if(n.hasChildren())    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  cannot  find  symbol  first	28	None	replace
661	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getNext()  ==  null);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getNext()  ==  null);  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getNext()  ==  null);  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    null);    Node    first    =    n.getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	121	None	replace
662	[BUG]  [BUGGY]  Node  nextCfgNode  =  gNode.getNext();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  nextCfgNode  =  gNode.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  nextCfgNode  =  gNode.getNext();	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
663	[BUG]  [BUGGY]  Node  first  =  n.getFirst()  +  1;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirst()  +  1;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirst()  +  1;	  Node    first    =    n.getNext()    +    1;    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
664	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().cloneTree();  Node  second  =  n.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().cloneTree();  Node  second  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().cloneTree();  Node  second  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    second    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
665	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(gNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(gNode);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(gNode);	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    return    tryRemoveUnconditionalBranching(outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	78	None	replace
666	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(gNode,ControlFlowAnalysis.computeFollowNode(n));  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(gNode,ControlFlowAnalysis.computeFollowNode(n));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(gNode,ControlFlowAnalysis.computeFollowNode(n));	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    return    tryRemoveUnconditionalBranching(outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	78	None	replace
667	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(n,  ControlFlowAnalysis.computeFollowNode(n));  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(n,  ControlFlowAnalysis.computeFollowNode(n));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(n,  ControlFlowAnalysis.computeFollowNode(n));	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    return    tryRemoveUnconditionalBranching(outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	78	None	replace
668	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(first);  [CE]  cannot  find  symbol  first  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(first);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(first);	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    return    tryRemoveUnconditionalBranching(outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	78	None	replace
669	[BUG]  [BUGGY]  Node  first  =  n,  cfgStack.peek().cloneBlock();  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  cfgStack.peek().cloneBlock();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  cfgStack.peek().cloneBlock();	  Node    first    =    n.getFirstChild().cloneBlock();    	non-compiled	[CE]  ';'  expected	47	None	replace
670	[BUG]  [BUGGY]  Node  last  =  n.removeFirstChild();  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  last  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  last  =  n.removeFirstChild();	  Node    last    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  first	66	None	replace
671	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  node  =  gNode.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  node  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  node  =  gNode.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  node  =  gNode.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    gNode.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol  node	70	None	replace
672	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first!=  null);	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    gNode.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	70	1	replace
673	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first!=  null);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first!=  null);	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    gNode.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	70	1	replace
674	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Tode  first  =  n.getLastChild().cloneTree();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Tode  first  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().cloneTree();    Tode  first  =  n.getLastChild().cloneTree();	  	non-compiled	[CE]  cannot  find  symbol	43	None	add
675	[BUG]  [BUGGY]  Node  first  =  n,  outEdges.getfirstChild();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  outEdges.getfirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  outEdges.getfirstChild();	  Node    first    =    n.getfirstChild();    	non-compiled	[CE]  ';'  expected	101	None	replace
676	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  node.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Node  first  =  node.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Node  first  =  node.getLastChild();	  Node    first    =    n.getLastChild();    Node    first    =    node.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	108	None	replace
677	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Node  first  =  n.getFirstChild().getNext().cloneTree()  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Node  first  =  n.getFirstChild().getNext().cloneTree()  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext().cloneTree();    Node  first  =  n.getFirstChild().getNext().cloneTree()	  	non-compiled	[CE]  ';'  expected	45	None	add
678	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeBlockNode(n));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeBlockNode(n));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeBlockNode(n));	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
679	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeBooleanNode(n));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeBooleanNode(n));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeBooleanNode(n));	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
680	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  first  =  gNode.getNextChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  first  =  gNode.getNextChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Node  first  =  gNode.getNextChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getNextChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	64	None	replace
681	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getNextChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getNextChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getNextChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getNextChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	64	None	replace
682	[BUG]  [BUGGY]  Node  second  =  n.removeFirstChild();  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  second  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  second  =  n.removeFirstChild();	  Node    second    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  first	54	None	replace
683	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getfirstChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getfirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getfirstChild();	  Node    first    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
684	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getLastChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getLastChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getLastChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	60	None	replace
685	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  first  =  n.getLastChild().getParent();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  first  =  n.getLastChild().getParent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Node  first  =  n.getLastChild().getParent();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getLastChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	60	None	replace
686	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  next  =  n.removeNextChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  next  =  n.removeNextChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Node  next  =  n.removeNextChild();	  Node    first    =    n.removeFirstChild();    Node    next    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
687	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  next  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.removeFirstChild();  Node  next  =  n.getNext();	  Node    first    =    n.removeFirstChild();    Node    next    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	11	replace
688	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  next  =  n.getNext();  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  next  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Node  next  =  n.getNext();	  Node    first    =    n.removeFirstChild();    Node    next    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	11	replace
689	[BUG]  [BUGGY]  Node  first  =  gNode.removeFirstChild();  Node  next  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.removeFirstChild();  Node  next  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.removeFirstChild();  Node  next  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    next    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
690	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n,  n));  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n,  n));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n,  n));	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	76	None	replace
691	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().removeFirstChild();  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().removeFirstChild();	  Node    first    =    n.getFirstChild().removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
692	[BUG]  [BUGGY]  Node  first  =  n.getfirstChild();  Token  first  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getfirstChild();  Token  first  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getfirstChild();  Token  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Token    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
693	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  n.getNextChild().removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    NullPointerException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  n.getNextChild().removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().removeFirstChild();    Node  first  =  n.getNextChild().removeFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	106	None	add
694	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().getNext();  Name  first  =  n.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild().getNext();  Name  first  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().getNext();  Name  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Name    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
695	[BUG]  [BUGGY]  Node  first  =  n,  n.getFirstChild().getNext();  Name  first  =  n.getFirstChild().getNext();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  n.getFirstChild().getNext();  Name  first  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  n.getFirstChild().getNext();  Name  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Name    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	88	None	replace
696	[BUG]  [BUGGY]  Name  first  =  n.getFirstChild().getNext();  Node  first  =  n.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Name  first  =  n.getFirstChild().getNext();  Node  first  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Name  first  =  n.getFirstChild().getNext();  Node  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Name    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
697	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild();  Node  last  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.getFirstChild();  Node  last  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild();  Node  last  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    last    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
698	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(t));  [CE]  cannot  find  symbol  t  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(t));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(t));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));    	non-compiled	[CE]  cannot  find  symbol  t	85	None	replace
699	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  Tode  first  =  n.getLastChild().getNext();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext();  Tode  first  =  n.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().getNext();    Tode  first  =  n.getLastChild().getNext();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
700	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  Name  first  =  n.getLastChild().getNext();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext();  Name  first  =  n.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().getNext();    Name  first  =  n.getLastChild().getNext();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
701	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  first  =  n.getLastChild().getParent();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  first  =  n.getLastChild().getParent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().getNext();    Node  first  =  n.getLastChild().getParent();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
702	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Preconditions.checkState(first!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild();  Preconditions.checkState(first!=  null);	  Node    first    =    n.getLastChild();    Node    first    =    n.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	10	3	replace
703	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Preconditions.checkState(first!=  null);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Preconditions.checkState(first!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Preconditions.checkState(first!=  null);	  Node    first    =    n.getLastChild();    Node    first    =    n.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	10	3	replace
704	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  n  =  n.cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneTree();  n  =  n.cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.cloneTree();    n  =  n.cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	79	None	add
705	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  Name  first  =  n.cloneTree();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneTree();  Name  first  =  n.cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.cloneTree();    Name  first  =  n.cloneTree();	  	non-compiled	[CE]  cannot  find  symbol	79	None	add
706	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneFollowNode();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneFollowNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext().cloneFollowNode();	  Node    first    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
707	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.cloneNode();	  Node    first    =    n.cloneTree();    	compilable	  [FE]  RuntimeException  	80	1	replace
708	[BUG]  [BUGGY]  Node  first  =  n.cloneNode();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.cloneNode();	  Node    first    =    n.cloneTree();    	compilable	  [FE]  RuntimeException  	80	1	replace
709	[BUG]  [BUGGY]  Node  first  =  node.getPrevious();  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  node.getPrevious();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getPrevious();	  Node    first    =    n.getPrevious();    	non-compiled	[CE]  cannot  find  symbol  node	58	None	replace
710	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().getValue()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().getValue()  +  1;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext().getValue()  +  1;	  Node    first    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
711	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().getValue();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext().getValue();	  Node    first    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
712	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.removeFirstChild();  Preconditions.checkState(n.hasOneChild());	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	19	11	replace
713	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Preconditions.checkState(n.hasOneChild());  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Preconditions.checkState(n.hasOneChild());	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	19	11	replace
714	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  Node  first  =  n.removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneTree();  Node  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.cloneTree();  Node  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	19	None	replace
715	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  first  =  no.getLastChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  first  =  no.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().cloneTree();    Node  first  =  no.getLastChild().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	43	None	add
716	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Token  first  =  n.getLastChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Token  first  =  n.getLastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().cloneTree();    Token  first  =  n.getLastChild().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	43	None	add
717	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  first  =  n.getlastChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  Node  first  =  n.getlastChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().cloneTree();    Node  first  =  n.getlastChild().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	43	None	add
718	[BUG]  [BUGGY]  Node  first  =  n,  cfgStack.peek().getNextChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  cfgStack.peek().getNextChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  cfgStack.peek().getNextChild();	  Node    first    =    n.getNextChild();    	non-compiled	[CE]  ';'  expected	17	None	replace
719	[BUG]  [BUGGY]  Node  first  =  n.removeNoOpStatements()?  n.getNextChild()  :  null;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeNoOpStatements()?  n.getNextChild()  :  null;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeNoOpStatements()?  n.getNextChild()  :  null;	  Node    first    =    n.getNextChild();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
720	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	67	11	replace
721	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	67	11	replace
722	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	67	11	replace
723	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	67	11	replace
724	[BUG]  [BUGGY]  Node  first  =  n,  nextCfgNode.getFirstChild().cloneBlock();  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  nextCfgNode.getFirstChild().cloneBlock();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  nextCfgNode.getFirstChild().cloneBlock();	  Node    first    =    n.getFirstChild().cloneBlock();    	non-compiled	[CE]  ';'  expected	47	None	replace
725	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild().cloneBlock();  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild().cloneBlock();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild().cloneBlock();	  Node    first    =    n.getFirstChild().cloneBlock();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
726	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  Node  first  =  n.removeNextChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneTree();  Node  first  =  n.removeNextChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.cloneTree();  Node  first  =  n.removeNextChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeNextChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	24	None	replace
727	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  first  =  n.replaceNext(n,  nextCfgNode);  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  first  =  n.replaceNext(n,  nextCfgNode);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Node  first  =  n.replaceNext(n,  nextCfgNode);	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeNextChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	24	None	replace
728	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  second  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().cloneTree();  Node  second  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    second    =    n.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	61	1	replace
729	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  second  =  n.getFirstChild().getNext();  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  second  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Node  second  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    second    =    n.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	61	1	replace
730	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	59	11	replace
731	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	59	11	replace
732	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.hasOneChild());	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	59	9	replace
733	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.hasOneChild());  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.hasOneChild());	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	59	9	replace
734	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	59	11	replace
735	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	59	11	replace
736	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.removeFirstChild().getNext();	  Node    first    =    n.getLastChild().getNext();    	compilable	  [FE]  AssertionFailedError  	2	11	replace
737	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild().getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild().getNext();	  Node    first    =    n.getLastChild().getNext();    	compilable	  [FE]  AssertionFailedError  	2	11	replace
738	[BUG]  [BUGGY]  gNode.removeChild(n.getParent());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  gNode.removeChild(n.getParent());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	gNode.removeChild(n.getParent());	  gNode.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
739	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    no.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	104	11	replace
740	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    no.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	104	11	replace
741	[BUG]  [BUGGY]  Node  first  =  mNode.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  mNode  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  mNode.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  mNode.getFirstChild().cloneTree();	  Node    first    =    gNode.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol  mNode	48	None	replace
742	[BUG]  [BUGGY]  Node  first  =  t.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  t  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  t.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  t.getFirstChild().cloneTree();	  Node    first    =    gNode.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol  t	48	None	replace
743	[BUG]  [BUGGY]  Node  first  =  n,  nodes.getFirstChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  nodes.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  nodes.getFirstChild();	  Node    first    =    n,    gNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	38	None	replace
744	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n)+  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n)+  1);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n)+  1);	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	76	None	replace
745	[BUG]  [BUGGY]  Node  first  =  pn.getLastChild();  [CE]  cannot  find  symbol  pn  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  pn.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  pn.getLastChild();	  Node    first    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  pn	42	None	replace
746	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(n);  [CE]  cannot  find  symbol  first  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  return  tryRemoveUnconditionalBranching(n);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	return  tryRemoveUnconditionalBranching(n);	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    return    tryRemoveUnconditionalBranching(outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	78	None	replace
747	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	return  tryRemoveUnconditionalBranching(outEdges);	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    return    tryRemoveUnconditionalBranching(outEdges);    	non-compiled	[CE]  cannot  find  symbol  outEdges	78	None	replace
748	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(gNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  return  tryRemoveUnconditionalBranching(gNode);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	return  tryRemoveUnconditionalBranching(gNode);	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    return    tryRemoveUnconditionalBranching(outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	78	None	replace
749	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(gNode,  outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(gNode,  outEdges);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(gNode,  outEdges);	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    return    tryRemoveUnconditionalBranching(outEdges);    	non-compiled	[CE]  cannot  find  symbol  outEdges	78	None	replace
750	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getParent();  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  nextCfgNode  =  n.getParent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  nextCfgNode  =  n.getParent();	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  first	65	None	replace
751	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getFirstChild();  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  nextCfgNode  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  nextCfgNode  =  n.getFirstChild();	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  first	65	None	replace
752	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  unreachable  statement	30	None	replace
753	[BUG]  [BUGGY]  Node  first  =  n.getNext()  ||  nextCfgNode!=  null;  [CE]  cannot  find  symbol  nextCfgNode  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext()  ||  nextCfgNode!=  null;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext()  ||  nextCfgNode!=  null;	  Node    first    =    n.getNext()    +    1;    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	56	None	replace
754	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.BLOCK);    Node    first    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	120	6	replace
755	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.BLOCK);    Node    first    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	120	6	replace
756	[BUG]  [BUGGY]  n.removeChild(first);  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  n.removeChild(first);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	n.removeChild(first);	  n.removeChildren();    	non-compiled	[CE]  cannot  find  symbol  first	112	None	replace
757	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(n.getParent());  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(n.getParent());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(n.getParent());	  n.removeChildren();    	non-compiled	[CE]  cannot  find  symbol  first	112	None	replace
758	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(n.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(n.getDestination().getValue());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(n.getDestination().getValue());	  n.removeChildren();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
759	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(n.getFirstChild());  [CE]  cannot  find  symbol  first  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(n.getFirstChild());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(n.getFirstChild());	  n.removeChildren();    	non-compiled	[CE]  cannot  find  symbol  first	112	None	replace
760	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(n.getChildCount());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(n.getChildCount());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(n.getChildCount());	  n.removeChildren();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	112	None	replace
761	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getLastChild().cloneNode();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getLastChild().cloneNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getLastChild().cloneNode();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getLastChild().cloneTree();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	replace
762	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().clonePosition();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().clonePosition();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext().clonePosition();	  Node    first    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
763	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree()  +  1;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext().cloneTree()  +  1;	  Node    first    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	46	None	replace
764	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(first));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));    	non-compiled	[CE]  unreachable  statement	84	None	replace
765	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));    	non-compiled	[CE]  unreachable  statement	84	None	replace
766	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getLastChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getLastChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getLastChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	60	None	replace
767	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  node  =  n.getLastChild().getNext();  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  node  =  n.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  node  =  n.getLastChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getLastChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  node	60	None	replace
768	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  next  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.removeFirstChild();  Node  next  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    next    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	11	11	replace
769	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  next  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  next  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Node  next  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    next    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	11	11	replace
770	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t),  n);  [CE]  cannot  find  symbol  t  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t),  n);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t),  n);	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));    	non-compiled	[CE]  cannot  find  symbol  t	85	None	replace
771	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));  [CE]  cannot  find  symbol  t  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));    	non-compiled	[CE]  cannot  find  symbol  t	85	None	replace
772	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  no.removeFirstChild();  [CE]  cannot  find  symbol  no  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  first  =  no.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.hasChildren());  Node  first  =  no.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    no.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  no	114	None	replace
773	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkArgument(first.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkArgument(first.getFirstChild().getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getfirstChild().getNext();    	compilable	  [FE]  RuntimeException  	87	11	replace
774	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkArgument(first.getFirstChild().getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkArgument(first.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkArgument(first.getFirstChild().getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getfirstChild().getNext();    	compilable	  [FE]  RuntimeException  	87	11	replace
775	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getLastChild();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  nextCfgNode.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nextCfgNode.getLastChild();	  Node    first    =    gNode.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	40	None	replace
776	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  node.getFirstChild().getParent();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  node.getFirstChild().getParent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getParent();    Node  first  =  node.getFirstChild().getParent();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	89	None	add
777	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Token  first  =  n.getFirstChild().getParent();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Token  first  =  n.getFirstChild().getParent();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getParent();    Token  first  =  n.getFirstChild().getParent();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	89	None	add
778	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getFirstChild().getParent()  +  1;  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        StackOverflowError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getParent();  Node  first  =  n.getFirstChild().getParent()  +  1;  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getParent();    Node  first  =  n.getFirstChild().getParent()  +  1;	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	89	None	add
779	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.removeFirstChild().cloneTree();	  Node    first    =    n.getLastChild().cloneTree();    	compilable	  [FE]  AssertionFailedError  	44	11	replace
780	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild().cloneTree();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild().cloneTree();	  Node    first    =    n.getLastChild().cloneTree();    	compilable	  [FE]  AssertionFailedError  	44	11	replace
781	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  node  =  n.removeLastChild();  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  node  =  n.removeLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  node  =  n.removeLastChild();	  Node    first    =    n.removeFirstChild();    Node    first    =    n.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	20	None	replace
782	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneTree();  Node  next  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.cloneTree();  Node  next  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    next    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	11	replace
783	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  Node  next  =  n.removeFirstChild();  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneTree();  Node  next  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.cloneTree();  Node  next  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    next    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	11	replace
784	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  next  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.removeFirstChild();  Node  next  =  n.getFirstChild();	  Node    first    =    n.removeFirstChild();    Node    next    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	11	replace
785	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  next  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  next  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Node  next  =  n.getFirstChild();	  Node    first    =    n.removeFirstChild();    Node    next    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	11	replace
786	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext().getNext();	  Node    first    =    n.getNext().cloneTree();    	compilable	  [FE]  RuntimeException  	52	11	replace
787	[BUG]  [BUGGY]  Node  first  =  n.getNext().getNext();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext().getNext();	  Node    first    =    n.getNext().cloneTree();    	compilable	  [FE]  RuntimeException  	52	11	replace
788	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Preconditions.checkState(n.hasOneChild());	  Node    first    =    n.getLastChild();    Node    first    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	7	9	replace
789	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Preconditions.checkState(n.hasOneChild());	  Node    first    =    n.getLastChild();    Node    first    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	7	9	replace
790	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);	  Node    first    =    n.getLastChild();    Node    first    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	7	11	replace
791	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);	  Node    first    =    n.getLastChild();    Node    first    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	7	11	replace
792	[BUG]  [BUGGY]  Node  first  =  cfgStack.peek().previousChild();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  cfgStack.peek().previousChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  cfgStack.peek().previousChild();	  Node    first    =    n.previousChild();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
793	[BUG]  [BUGGY]  Node  first  =  lastNode.previousChild();  [CE]  cannot  find  symbol  lastNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  lastNode.previousChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  lastNode.previousChild();	  Node    first    =    n.previousChild();    	non-compiled	[CE]  cannot  find  symbol  lastNode	93	None	replace
794	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.firstChild();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  nextCfgNode.firstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nextCfgNode.firstChild();	  Node    first    =    gNode.firstChild();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	35	None	replace
795	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
796	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  first).getValue());  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  first).getValue());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n,  first).getValue());	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node)	82	None	replace
797	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first,  n).getValue());  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first,  n).getValue());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first,  n).getValue());	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node)	82	None	replace
798	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.hasChildren());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext();  Preconditions.checkState(first.hasChildren());	  Node    first    =    n.getNext();    Preconditions.checkState(n.hasChildren());    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	83	11	replace
799	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.hasChildren());  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.hasChildren());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(first.hasChildren());	  Node    first    =    n.getNext();    Preconditions.checkState(n.hasChildren());    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	83	11	replace
800	[BUG]  [BUGGY]  Node  first  =  cfgStack.peek().getFirstChild();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  cfgStack.peek().getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  cfgStack.peek().getFirstChild();	  Node    first    =    null.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
801	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  first  =  node.getFirstChild().getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  first  =  node.getFirstChild().getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getLastChild();    Node  first  =  node.getFirstChild().getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
802	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Token  first  =  n.getFirstChild().getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Token  first  =  n.getFirstChild().getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getLastChild();    Token  first  =  n.getFirstChild().getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
803	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  first  =  n.getFirstChild().getLastChild()  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  Node  first  =  n.getFirstChild().getLastChild()  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getLastChild();    Node  first  =  n.getFirstChild().getLastChild()	  	non-compiled	[CE]  ';'  expected	4	None	add
804	[BUG]  [BUGGY]  Node  first  =  pNode.getFirstChild();  [CE]  cannot  find  symbol  pNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  pNode.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  pNode.getFirstChild();	  Node    first    =    outEdges.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  pNode	41	None	replace
805	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  Node  first  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  Node  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    node.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	109	11	replace
806	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  Node  first  =  n.getFirstChild().getNext();  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  Node  first  =  n.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  Node  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    node.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	109	11	replace
807	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  Node  first  =  node.getFirstChild().getNext();  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  Node  first  =  node.getFirstChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  Node  first  =  node.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    node.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  node	109	None	replace
808	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.hasNext());  first  =  n.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first.hasNext());  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(first.hasNext());  first  =  n.getNext();	  Node    first    =    n.getNext();    Preconditions.checkState(n.hasNext());    Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
809	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  Node  first  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  Node  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    gNode.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	70	11	replace
810	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  Node  first  =  n.getFirstChild().cloneTree();  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  Node  first  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  Node  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    gNode.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	70	11	replace
811	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.FUNCTION);	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    gNode.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	70	11	replace
812	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.FUNCTION);	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    gNode.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	70	11	replace
813	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.NAME);	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    gNode.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	70	11	replace
814	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getFirstChild().getType()  ==  Token.NAME);	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    gNode.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	70	11	replace
815	[BUG]  [BUGGY]  Node  first  =  n,  cfgStack.peek().cloneTree();  Tode  first  =  n.getFirstChild().cloneTree();  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n,  cfgStack.peek().cloneTree();  Tode  first  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  cfgStack.peek().cloneTree();  Tode  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Tode    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  ';'  expected	74	None	replace
816	[BUG]  [BUGGY]  Token  first  =  n.getFirstChild();  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Token  first  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Token  first  =  n.getFirstChild();	  Node    first    =    n.getLastChild();    Token    first    =    n.getLastChild();    	non-compiled	[CE]  incompatible  types	12	None	replace
817	[BUG]  [BUGGY]  Node  first  =  curCfg.getFirstChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  curCfg.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  curCfg.getFirstChild();	  Node    first    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
818	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.removeFirstChild();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);	  Node    first    =    n.removeFirstChild();    Node    first    =    gNode.removeFirstChild();    	compilable	  [FE]  RuntimeException  	22	11	replace
819	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Preconditions.checkState(first.getType()  ==  Token.BLOCK);	  Node    first    =    n.removeFirstChild();    Node    first    =    gNode.removeFirstChild();    	compilable	  [FE]  RuntimeException  	22	11	replace
820	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.removeFirstChild();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);	  Node    first    =    n.removeFirstChild();    Node    first    =    gNode.removeFirstChild();    	compilable	  [FE]  RuntimeException  	22	11	replace
821	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Preconditions.checkArgument(first.getType()  ==  Token.BLOCK);	  Node    first    =    n.removeFirstChild();    Node    first    =    gNode.removeFirstChild();    	compilable	  [FE]  RuntimeException  	22	11	replace
822	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Node  first  =  node.getFirstChild().getNext().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Node  first  =  node.getFirstChild().getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext().cloneTree();    Node  first  =  node.getFirstChild().getNext().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	45	None	add
823	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Token  first  =  n.getFirstChild().getNext().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  Token  first  =  n.getFirstChild().getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext().cloneTree();    Token  first  =  n.getFirstChild().getNext().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	45	None	add
824	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  Token  first  =  n.cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneTree();  Token  first  =  n.cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.cloneTree();    Token  first  =  n.cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	79	None	add
825	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  Node  first  =  no.cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneTree();  Node  first  =  no.cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.cloneTree();    Node  first  =  no.cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	79	None	add
826	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  Node  first  =  null.cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneTree();  Node  first  =  null.cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.cloneTree();    Node  first  =  null.cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	79	None	add
827	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneBlock();  Token  first  =  n.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneBlock();  Token  first  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneBlock();  Token  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Token    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
828	[BUG]  [BUGGY]  Token  first  =  n.getFirstChild().cloneTree();  [CE]  incompatible  types  [FE]              RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Token  first  =  n.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Token  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Token    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  incompatible  types	105	None	replace
829	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild());  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasOneChild());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.hasOneChild());	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    }    else    if(n.hasChildren())    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  cannot  find  symbol  first	28	None	replace
830	[BUG]  [BUGGY]  Neighbor  first  =  n.getNext();  Node  first  =  n.getNext();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Neighbor  first  =  n.getNext();  Node  first  =  n.getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Neighbor  first  =  n.getNext();  Node  first  =  n.getNext();	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    }    else    if(n.hasChildren())    {    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
831	[BUG]  [BUGGY]  Node  first  =  n.removeLastChild()  ||  n.hasChildren();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeLastChild()  ||  n.hasChildren();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeLastChild()  ||  n.hasChildren();	  Node    first    =    n.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
832	[BUG]  [BUGGY]  Node  first  =  n.getNext().cloneTree();  Token  first  =  n.getNext().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().cloneTree();  Token  first  =  n.getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext().cloneTree();    Token  first  =  n.getNext().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	51	None	add
833	[BUG]  [BUGGY]  Node  first  =  n.getNext().cloneTree();  Name  first  =  n.getNext().cloneTree();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext().cloneTree();  Name  first  =  n.getNext().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext().cloneTree();    Name  first  =  n.getNext().cloneTree();	  	non-compiled	[CE]  cannot  find  symbol	51	None	add
834	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  node.getFirstChild().cloneNode();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  Node  first  =  node.getFirstChild().cloneNode();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneNode();    Node  first  =  node.getFirstChild().cloneNode();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	49	None	add
835	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  Token  first  =  n.removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneTree();  Token  first  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.cloneTree();  Token  first  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Token    first    =    n.removeFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	113	None	replace
836	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n),  n);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n),  n);	  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	75	None	replace
837	[BUG]  [BUGGY]  Node  first  =  null.getPreviousChild();  [CE]  <null>  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  null.getPreviousChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  null.getPreviousChild();	  Node    first    =    node.getPreviousChild();    	non-compiled	[CE]  <null>  cannot  be  dereferenced	18	None	replace
838	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasOneChild());  Node  first  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Preconditions.checkState(n.hasOneChild());  Node  first  =  n.getFirstChild();	  Node    first    =    n.getLastChild();    Node    first    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	10	9	replace
839	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild());  Node  first  =  n.getFirstChild();  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.hasOneChild());  Node  first  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.hasOneChild());  Node  first  =  n.getFirstChild();	  Node    first    =    n.getLastChild();    Node    first    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	10	9	replace
840	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild();  Preconditions.checkState(n.hasOneChild());	  Node    first    =    n.getLastChild();    Node    first    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	10	9	replace
841	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Preconditions.checkState(n.hasOneChild());  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild();  Preconditions.checkState(n.hasOneChild());	  Node    first    =    n.getLastChild();    Node    first    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	10	9	replace
842	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(first.getFirstChild()  ==  n);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Preconditions.checkState(first.getFirstChild()  ==  n);	  Node    first    =    n.getLastChild();    Node    first    =    gNode.getLastChild();    	compilable	  [FE]  RuntimeException  	9	11	replace
843	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(first.getFirstChild()  ==  n);  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(first.getFirstChild()  ==  n);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Preconditions.checkState(first.getFirstChild()  ==  n);	  Node    first    =    n.getLastChild();    Node    first    =    gNode.getLastChild();    	compilable	  [FE]  RuntimeException  	9	11	replace
844	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getParent()  ==  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext();  Preconditions.checkState(n.getParent()  ==  null);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()    ==    null);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	117	11	replace
845	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getParent()  ==  null);  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getParent()  ==  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(n.getParent()  ==  null);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()    ==    null);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	117	11	replace
846	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  node.getFirstChild().removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    NullPointerException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  node.getFirstChild().removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().removeFirstChild();    Node  first  =  node.getFirstChild().removeFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	106	None	add
847	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  n.getFirstChild().removeFirstChild());  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  Node  first  =  n.getFirstChild().removeFirstChild());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().removeFirstChild();    Node  first  =  n.getFirstChild().removeFirstChild());	  	non-compiled	[CE]  ';'  expected	106	None	add
848	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  second  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.removeFirstChild();  Node  second  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    second    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	8	11	replace
849	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  second  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  second  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Node  second  =  n.getLastChild();	  Node    first    =    n.getLastChild();    Node    second    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	8	11	replace
850	[BUG]  [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first),  n);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first),  n);	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    return    tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	81	None	replace
851	[BUG]  [BUGGY]  Node  first  =  gNode.removeFirstChild();  Node  last  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  gNode.removeFirstChild();  Node  last  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.removeFirstChild();  Node  last  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    last    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
852	[BUG]  [BUGGY]  Node  first  =  token.getFirstChild();  [CE]  cannot  find  symbol  token  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  token.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  token.getFirstChild();	  Node    first    =    pn.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  token	115	None	replace
853	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	86	11	replace
854	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  Node    first    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	86	11	replace
855	[BUG]  [BUGGY]  Node  next  =  n.getFirstChild();  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  next  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  next  =  n.getFirstChild();	  Node    last    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  first	94	None	replace
856	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext();  Preconditions.checkState(first!=  null);	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	26	11	replace
857	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first!=  null);  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(first!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext();  Preconditions.checkState(first!=  null);	  Node    first    =    n.getNext();    Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	26	11	replace
858	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Tode  first  =  new  Tode(n.removeFirstChild());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Tode  first  =  new  Tode(n.removeFirstChild());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Tode  first  =  new  Tode(n.removeFirstChild());	  Node    first    =    n.removeFirstChild();    Tode    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
859	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  Node  first  =  node.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  node  [FE]        RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  Node  first  =  node.getFirstChild().cloneTree();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Preconditions.checkState(n.getFirstChild().getType()  ==  Token.BLOCK);  Node  first  =  node.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    node.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol  node	103	None	replace
860	[BUG]  [BUGGY]  Node  first  =  n.getNext()  ||  n.removeChildren();  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getNext()  ||  n.removeChildren();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext()  ||  n.removeChildren();	  Node    first    =    n.getNext()    ||    n.hasChildren();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	57	None	replace
861	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getNext().getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getNext().getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getNextChild().cloneTree();    	compilable	  [FE]  RuntimeException  	71	11	replace
862	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getNext().getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getNext().getType()  ==  Token.BLOCK);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Preconditions.checkState(first.getNext().getType()  ==  Token.BLOCK);	  Node    first    =    n.getFirstChild().cloneTree();    Node    first    =    n.getNextChild().cloneTree();    	compilable	  [FE]  RuntimeException  	71	11	replace
863	[BUG]  [BUGGY]  Node  next  =  n.getLastChild();  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  next  =  n.getLastChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  next  =  n.getLastChild();	  Node    last    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  first	66	None	replace
864	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  first  =  node.getLastChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  first  =  node.getLastChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().getNext();    Node  first  =  node.getLastChild().getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
865	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  first  =  n.getLastChild().getNext());  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getLastChild().getNext();  Node  first  =  n.getLastChild().getNext());  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild().getNext();    Node  first  =  n.getLastChild().getNext());	  	non-compiled	[CE]  ';'  expected	1	None	add
866	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getNextChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getNextChild().getNext();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getNextChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getNextChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	64	None	replace
867	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.getNextChild().getNext()  ==  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.getNextChild().getNext()  ==  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.getNextChild().getNext()  ==  null);	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getNextChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
868	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.getNextChild().getNext()!=  null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.getNextChild().getNext()!=  null);  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext();  Preconditions.checkState(n.getNextChild().getNext()!=  null);	  Node    first    =    n.getFirstChild().getNext();    Node    first    =    n.getNextChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
869	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  second  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.removeFirstChild();  Node  second  =  n.getFirstChild();	  Node    first    =    n.removeFirstChild();    Node    second    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	21	11	replace
870	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  second  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.removeFirstChild();  Node  second  =  n.getFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeFirstChild();  Node  second  =  n.getFirstChild();	  Node    first    =    n.removeFirstChild();    Node    second    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	21	11	replace
871	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneTree();  Node  second  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.cloneTree();  Node  second  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    second    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	21	11	replace
872	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  Node  second  =  n.removeFirstChild();  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.cloneTree();  Node  second  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.cloneTree();  Node  second  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    second    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	21	11	replace
873	[BUG]  [BUGGY]  Node  first  =  n.firstChild();  Node  second  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  n.firstChild();  Node  second  =  n.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.firstChild();  Node  second  =  n.removeFirstChild();	  Node    first    =    n.removeFirstChild();    Node    second    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
874	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.removeFirstChild();  [CE]  cannot  find  symbol  nextCfgNode  [FE]          AssertionFailedError      [CONTEXT]      if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {      [BUGGY]  Node  first  =  nextCfgNode.removeFirstChild();  [BUGGY]      return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nextCfgNode.removeFirstChild();	  Node    first    =    gNode.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	15	None	replace
