bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getLastChild().getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	12	6	replace
2	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getLastChild().getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	12	6	replace
3	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  gNode.getFirstChild().getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getLastChild();	  Node    first    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	12	2	replace
5	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getLastChild();	  Node    first    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	12	2	replace
6	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().getNext()  +  1;  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext()  +  1;	  Node    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	12	None	replace
7	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.getLastChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild();    Node  first  =  n.getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
8	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  second  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getLastChild();  Node  second  =  n.getLastChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild();    Node  second  =  n.getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
9	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  gNode.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  gNode.getLastChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild();    Node  first  =  gNode.getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
10	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  n.getFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild();    Node  first  =  n.getFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
11	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  next  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getLastChild();  Node  next  =  n.getLastChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild();    Node  next  =  n.getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
12	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Token  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getLastChild();  Token  first  =  n.getLastChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild();    Token  first  =  n.getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
13	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  last  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getLastChild();  Node  last  =  n.getLastChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild();    Node  last  =  n.getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
14	[BUG]  [BUGGY]  Node  first  =  n.removeLastChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.removeLastChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.removeLastChild();	  Node    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
15	[BUG]  [BUGGY]  Node  first  =  gNode.removeFirstChild();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  gNode.removeFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.removeFirstChild();	  Node    first    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
16	[BUG]  [BUGGY]  Node  first  =  gNode.getPreviousChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  gNode.getPreviousChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getPreviousChild();	  Node    first    =    n.getPreviousChild();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
17	[BUG]  [BUGGY]  Node  first  =  n.getNextChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNextChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNextChild();	  Node    first    =    n.getPreviousChild();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
18	[BUG]  [BUGGY]  Node  first  =  node.getPreviousChild();  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  node.getPreviousChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getPreviousChild();	  Node    first    =    n.getPreviousChild();    	non-compiled	[CE]  cannot  find  symbol  node	13	None	replace
19	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  first  =  n.removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.removeFirstChild();  Node  first  =  n.removeFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.removeFirstChild();    Node  first  =  n.removeFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
20	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  first  =  n.removeLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.removeFirstChild();  Node  first  =  n.removeLastChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.removeFirstChild();    Node  first  =  n.removeLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
21	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  second  =  n.removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.removeFirstChild();  Node  second  =  n.removeFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.removeFirstChild();    Node  second  =  n.removeFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
22	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  first  =  gNode.removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.removeFirstChild();  Node  first  =  gNode.removeFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.removeFirstChild();    Node  first  =  gNode.removeFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
23	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  next  =  n.removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.removeFirstChild();  Node  next  =  n.removeFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.removeFirstChild();    Node  next  =  n.removeFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
24	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  first  =  n.removeNextChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.removeFirstChild();  Node  first  =  n.removeNextChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.removeFirstChild();    Node  first  =  n.removeNextChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
25	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  last  =  n.removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.removeFirstChild();  Node  last  =  n.removeFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.removeFirstChild();    Node  last  =  n.removeFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
26	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Node  first  =  n.getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
27	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  }  else  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  }  else  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Node  first  =  n.getNext();  }  else  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }	  	non-compiled	[CE]  'else'  without  'if'	3	None	add
28	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  }  else  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  }  else  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Node  first  =  n.getNext();  }  else  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
29	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  }  else  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  }  else  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Node  first  =  n.getNext();  }  else  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  }	  	non-compiled	[CE]  'else'  without  'if'	3	None	add
30	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
31	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  case  Token.FOR:  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  case  Token.FOR:  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Node  first  =  n.getNext();  case  Token.FOR:  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));	  	non-compiled	[CE]  orphaned  case	3	None	add
32	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  case  Token.BLOCK:  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  case  Token.BLOCK:  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Node  first  =  n.getNext();  case  Token.BLOCK:  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));	  	non-compiled	[CE]  orphaned  case	3	None	add
33	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  }  else  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalyzer.computeFollowNode(n));  }  [CE]  'else'  without  'if'  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  }  else  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalyzer.computeFollowNode(n));  }  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Node  first  =  n.getNext();  }  else  if(n.hasChildren())  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalyzer.computeFollowNode(n));  }	  	non-compiled	[CE]  'else'  without  'if'	3	None	add
34	[BUG]  [BUGGY]  Node  first  =  n.lastChild();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.lastChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.lastChild();	  Node    first    =    n.firstChild();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
35	[BUG]  [BUGGY]  Node  first  =  gNode.firstChild();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  gNode.firstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.firstChild();	  Node    first    =    n.firstChild();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
36	[BUG]  [BUGGY]  Node  first  =  n.secondChild();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.secondChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.secondChild();	  Node    first    =    n.firstChild();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
37	[BUG]  [BUGGY]  Node  first  =  n.nextChild();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.nextChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.nextChild();	  Node    first    =    n.firstChild();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
38	[BUG]  [BUGGY]  Node  first  =  n,  gNode.getFirstChild();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n,  gNode.getFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  gNode.getFirstChild();	  Node    first    =    gNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	5	None	replace
39	[BUG]  [BUGGY]  Node  first  =  nNode.getFirstChild();  [CE]  cannot  find  symbol  nNode  [FE]              AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  nNode.getFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nNode.getFirstChild();	  Node    first    =    gNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nNode	5	None	replace
40	[BUG]  [BUGGY]  Node  first  =  gNode.getLastChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  gNode.getLastChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getLastChild();	  Node    first    =    gNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
41	[BUG]  [BUGGY]  Node  first  =  outEdges.getFirstChild();  [CE]  cannot  find  symbol  outEdges  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  outEdges.getFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  outEdges.getFirstChild();	  Node    first    =    gNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  outEdges	5	None	replace
42	[BUG]  [BUGGY]  Node  first  =  node.getLastChild();  [CE]  cannot  find  symbol  node  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  node.getLastChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  node.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	2	None	replace
43	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getLastChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	15	1	replace
44	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getLastChild().cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getLastChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	15	1	replace
45	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getNext().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	15	10	replace
46	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().getNext().cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getNext().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	15	10	replace
47	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneBlock();  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().cloneBlock();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneBlock();	  Node    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
48	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  gNode.getFirstChild().cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
49	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().cloneNode();	  Node    first    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	15	1	replace
50	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().cloneNode();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().cloneNode();	  Node    first    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	15	1	replace
51	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext().cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getNext().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	15	11	replace
52	[BUG]  [BUGGY]  Node  first  =  n.getNext().cloneTree();  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext().cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext().cloneTree();	  Node    first    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  RuntimeException  	15	11	replace
53	[BUG]  [BUGGY]  Node  first  =  mNode.getFirstChild();  [CE]  cannot  find  symbol  mNode  [FE]                AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  mNode.getFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  mNode.getFirstChild();	  Node    first    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  mNode	8	None	replace
54	[BUG]  [BUGGY]  Node  second  =  n.getFirstChild();  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  second  =  n.getFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  second  =  n.getFirstChild();	  Node    first    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  first	8	None	replace
55	[BUG]  [BUGGY]  Node  first  =  gNode.getNext();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  gNode.getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  gNode.getNext();	  Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
56	[BUG]  [BUGGY]  Node  first  =  n.getNext()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext()  +  1;  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext()  +  1;	  Node    first    =    n.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	4	None	replace
57	[BUG]  [BUGGY]  Node  first  =  n.getNext()  ||  n.hasChildren();  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext()  ||  n.hasChildren();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getNext()  ||  n.hasChildren();	  Node    first    =    n.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	4	None	replace
58	[BUG]  [BUGGY]  Node  first  =  n.getPrevious();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getPrevious();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getPrevious();	  Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
59	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  first  =  n.getFirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  first  =  n.getFirstChild().getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext();    Node  first  =  n.getFirstChild().getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
60	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  first  =  n.getLastChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  first  =  n.getLastChild().getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext();    Node  first  =  n.getLastChild().getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
61	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  second  =  n.getFirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  second  =  n.getFirstChild().getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext();    Node  second  =  n.getFirstChild().getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
62	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  first  =  gNode.getFirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  first  =  gNode.getFirstChild().getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext();    Node  first  =  gNode.getFirstChild().getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
63	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  next  =  n.getFirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  next  =  n.getFirstChild().getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext();    Node  next  =  n.getFirstChild().getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
64	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  first  =  n.getNextChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  first  =  n.getNextChild().getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext();    Node  first  =  n.getNextChild().getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
65	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  nextCfgNode  =  n.getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  nextCfgNode  =  n.getNext();	      	non-compiled	[CE]  cannot  find  symbol  first	10	None	replace
66	[BUG]  [BUGGY]  Node  last  =  n.getLastChild();  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  last  =  n.getLastChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  last  =  n.getLastChild();	      	non-compiled	[CE]  cannot  find  symbol  first	10	None	replace
67	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getFirstChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getFirstChild().cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneTree();    Node  first  =  n.getFirstChild().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	14	None	add
68	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getLastChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getLastChild().cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneTree();    Node  first  =  n.getLastChild().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	14	None	add
69	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  second  =  n.getFirstChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  second  =  n.getFirstChild().cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneTree();    Node  second  =  n.getFirstChild().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	14	None	add
70	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  gNode.getFirstChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  gNode.getFirstChild().cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneTree();    Node  first  =  gNode.getFirstChild().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	14	None	add
71	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getNextChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getNextChild().cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneTree();    Node  first  =  n.getNextChild().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	14	None	add
72	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  next  =  n.getFirstChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  next  =  n.getFirstChild().cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneTree();    Node  next  =  n.getFirstChild().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	14	None	add
73	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getFirstChild().cloneTree());  [CE]  ';'  expected  [FE]                RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  n.getFirstChild().cloneTree());  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneTree();    Node  first  =  n.getFirstChild().cloneTree());	  	non-compiled	[CE]  ';'  expected	14	None	add
74	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Tode  first  =  n.getFirstChild().cloneTree();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Tode  first  =  n.getFirstChild().cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneTree();    Tode  first  =  n.getFirstChild().cloneTree();	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
75	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));	      	non-compiled	[CE]  cannot  find  symbol  first	10	None	replace
76	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));	      	non-compiled	[CE]  cannot  find  symbol  first	10	None	replace
77	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  break;  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  break;  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  break;	      	non-compiled	[CE]  cannot  find  symbol  first	10	None	replace
78	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  return  tryRemoveUnconditionalBranching(outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  return  tryRemoveUnconditionalBranching(outEdges);  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  return  tryRemoveUnconditionalBranching(outEdges);	      	non-compiled	[CE]  cannot  find  symbol  outEdges	10	None	replace
79	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.cloneTree();	  Node    first    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	7	1	replace
80	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.cloneTree();	  Node    first    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	7	1	replace
81	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
82	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n).getValue());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
83	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.hasChildren());  Node  first  =  n.getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Preconditions.checkState(n.hasChildren());  Node  first  =  n.getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
84	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFallThrough(n));	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
85	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Node  first  =  n.getNext();  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(t));	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
86	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  n.getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  first  =  n.getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
87	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  first  =  n.getfirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  first  =  n.getfirstChild().getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext();    Node  first  =  n.getfirstChild().getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
88	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Name  first  =  n.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Name  first  =  n.getFirstChild().getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext();    Name  first  =  n.getFirstChild().getNext();	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
89	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().getParent();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().getParent();	  Node    first    =    n.getFirstChild().getNext();    	compilable	  [FE]  StackOverflowError  	12	11	replace
90	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getParent();  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().getParent();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().getParent();	  Node    first    =    n.getFirstChild().getNext();    	compilable	  [FE]  StackOverflowError  	12	11	replace
91	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Tode  first  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.removeFirstChild();  Tode  first  =  n.removeFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.removeFirstChild();    Tode  first  =  n.removeFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
92	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Name  first  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.removeFirstChild();  Name  first  =  n.removeFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.removeFirstChild();    Name  first  =  n.removeFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
93	[BUG]  [BUGGY]  Node  first  =  n.previousChild();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.previousChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.previousChild();	  Node    first    =    n.firstChild();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
94	[BUG]  [BUGGY]  Node  last  =  n.getFirstChild();  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  last  =  n.getFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  last  =  n.getFirstChild();	  Node    first    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  first	8	None	replace
95	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Tode  first  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getLastChild();  Tode  first  =  n.getLastChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild();    Tode  first  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
96	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Preconditions.checkState(n.hasChildren());  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getLastChild();  Preconditions.checkState(n.hasChildren());  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild();    Preconditions.checkState(n.hasChildren());	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
97	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Name  first  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getLastChild();  Name  first  =  n.getLastChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild();    Name  first  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
98	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getParent();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getParent();	  Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	4	1	replace
99	[BUG]  [BUGGY]  Node  first  =  n.getParent();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getParent();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getParent();	  Node    first    =    n.getNext();    	compilable	  [FE]  RuntimeException  	4	1	replace
100	[BUG]  [BUGGY]  Node  first  =  n,  outEdges.getPreviousChild();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n,  outEdges.getPreviousChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n,  outEdges.getPreviousChild();	  Node    first    =    n.getPreviousChild();    	non-compiled	[CE]  ';'  expected	13	None	replace
101	[BUG]  [BUGGY]  Node  first  =  n.getfirstChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getfirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getfirstChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
102	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getFirstChild();  [CE]  cannot  find  symbol  nextCfgNode  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  nextCfgNode.getFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  nextCfgNode.getFirstChild();	  Node    first    =    gNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	5	None	replace
103	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  node.getFirstChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  node.getFirstChild().cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneTree();    Node  first  =  node.getFirstChild().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	14	None	add
104	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  no.getFirstChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Node  first  =  no.getFirstChild().cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneTree();    Node  first  =  no.getFirstChild().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	14	None	add
105	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Token  first  =  n.getFirstChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  Token  first  =  n.getFirstChild().cloneTree();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().cloneTree();    Token  first  =  n.getFirstChild().cloneTree();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	14	None	add
106	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	add	Node  first  =  n.getFirstChild().removeFirstChild();	  Node    first    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  NullPointerException  	15	10	replace
107	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  [FE]  NullPointerException  [FE]    RuntimeException    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().removeFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  n.getFirstChild().removeFirstChild();	  Node    first    =    n.getFirstChild().cloneTree();    	compilable	  [FE]  NullPointerException  	15	10	replace
108	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  node.getLastChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getLastChild();  Node  first  =  node.getLastChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getLastChild();    Node  first  =  node.getLastChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
109	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  first  =  node.getFirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Node  first  =  node.getFirstChild().getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext();    Node  first  =  node.getFirstChild().getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
110	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Token  first  =  n.getFirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getFirstChild().getNext();  Token  first  =  n.getFirstChild().getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getFirstChild().getNext();    Token  first  =  n.getFirstChild().getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
111	[BUG]  [BUGGY]  gNode.removeChild(n);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  gNode.removeChild(n);  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	gNode.removeChild(n);	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
112	[BUG]  [BUGGY]  n.removeChildren();  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  n.removeChildren();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	n.removeChildren();	      	non-compiled	[CE]  cannot  find  symbol  first	10	None	replace
113	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Token  first  =  n.removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.removeFirstChild();  Token  first  =  n.removeFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.removeFirstChild();    Token  first  =  n.removeFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
114	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  Node  first  =  no.removeFirstChild();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.removeFirstChild();  Node  first  =  no.removeFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.removeFirstChild();    Node  first  =  no.removeFirstChild();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
115	[BUG]  [BUGGY]  Node  first  =  pn.getFirstChild();  [CE]  cannot  find  symbol  pn  [FE]                AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  pn.getFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  pn.getFirstChild();	  Node    first    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  pn	8	None	replace
116	[BUG]  [BUGGY]  Node  first  =  null.getFirstChild();  [CE]  <null>  cannot  be  dereferenced  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  null.getFirstChild();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node  first  =  null.getFirstChild();	  Node    first    =    node.getFirstChild();    	non-compiled	[CE]  <null>  cannot  be  dereferenced	8	None	replace
117	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getParent()  ==  null);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getParent()  ==  null);  Node  first  =  n.getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()  ==  null);  Node  first  =  n.getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
118	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getParent()!=  null);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getParent()!=  null);  Node  first  =  n.getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Preconditions.checkState(n.getParent()!=  null);  Node  first  =  n.getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
119	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.hasNext());  Node  first  =  n.getNext();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.hasNext());  Node  first  =  n.getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Preconditions.checkState(n.hasNext());  Node  first  =  n.getNext();	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
120	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  first  =  n.getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
121	[BUG]  [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getNext()  ==  null);  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  if  (n.hasChildren())  {    [BUGGY]  Node  first  =  n.getNext();  Preconditions.checkState(n.getNext()  ==  null);  Node  first  =  n.getNext();  [BUGGY]    return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	162	162	2	replace	Node    first    =    n.getNext();    Preconditions.checkState(n.getNext()  ==  null);  Node  first  =  n.getNext();	  	non-compiled	[CE]  variable  first  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
