bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	5	None	add
2	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	5	None	add
3	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
4	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	5	None	add
5	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	5	None	add
6	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	5	None	add
7	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	5	None	add
8	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
9	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasFirstChild()  ||  n.hasNext())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.hasNext())  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
10	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasFirstChild()  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.hasChildren())  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
11	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  n.getType()  ==  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasFirstChild()  &&  n.getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  n.getType()  ==  Token.BLOCK)  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
12	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&!removeNoOpStatements)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasFirstChild()  &&!removeNoOpStatements)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&!removeNoOpStatements)  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
13	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionAnalysis(n))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionAnalysis(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  NodeUtil.isFunctionAnalysis(n))  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
14	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  [CE]  'else'  without  'if'  [FE]                AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  Node  first  =  n.getLastChild();  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  n.getLastChild();	      	non-compiled	[CE]  'else'  without  'if'	9	None	replace
15	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  [CE]  'else'  without  'if'  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  Node  nextCfgNode  =  n.getNext();  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  nextCfgNode  =  n.getNext();	      	non-compiled	[CE]  'else'  without  'if'	9	None	replace
16	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  [CE]  'else'  without  'if'  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  Node  first  =  n.getFirstChild();  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  n.getFirstChild();	      	non-compiled	[CE]  'else'  without  'if'	9	None	replace
17	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  [CE]  'else'  without  'if'  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  Node  n  =  n.getFirstChild();  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  n.getFirstChild();	      	non-compiled	[CE]  'else'  without  'if'	9	None	replace
18	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  [CE]  'else'  without  'if'  [FE]                        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  Node  n  =  n.getLastChild();  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  n.getLastChild();	      	non-compiled	[CE]  'else'  without  'if'	9	None	replace
19	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  break;  [CE]  'else'  without  'if'  [FE]                          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  Node  first  =  n.getLastChild();  break;  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  n.getLastChild();  break;	      	non-compiled	[CE]  'else'  without  'if'	9	None	replace
20	[BUG]  [BUGGY]  Node  next  =  n.getNext();  [CE]  'else'  without  'if'  [FE]                            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  Node  next  =  n.getNext();  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  next  =  n.getNext();	      	non-compiled	[CE]  'else'  without  'if'	9	None	replace
21	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  if(n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  if(n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	13	None	add
22	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  If(n.hasChildren()  ||  n.hasOneChild())  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  If(n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild())    {    If(n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  ';'  expected	13	None	add
23	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  if(N.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  if(N.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild())    {    if(N.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	13	None	add
24	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  if(n.hasChildren()  ||  (n.hasOneChild()))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  if(n.hasChildren()  ||  (n.hasOneChild()))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()  ||  (n.hasOneChild()))  {	  	non-compiled	[CE]  orphaned  case	13	None	add
25	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  if(n.hasChildren()  ||  n.isOneChild())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  if(n.hasChildren()  ||  n.isOneChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()  ||  n.isOneChild())  {	  	non-compiled	[CE]  orphaned  case	13	None	add
26	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  orphaned  case	3	None	add
27	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
28	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  orphaned  case	3	None	add
29	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  orphaned  case	3	None	add
30	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {	  	non-compiled	[CE]  orphaned  case	3	None	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	4	2	replace
32	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	4	2	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	4	6	replace
34	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	4	6	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	4	6	replace
36	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	4	6	replace
37	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isBlock(n))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isBlock(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isBlock(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
38	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isBlank(n))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isBlank(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isBlank(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	4	6	replace
40	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	4	6	replace
41	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	8	4	replace
42	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	8	4	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	8	6	replace
44	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	8	6	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	8	6	replace
46	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	8	6	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
48	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	8	6	replace
50	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	8	6	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	8	7	replace
52	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	8	7	replace
53	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	6	4	replace
54	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	6	4	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	6	6	replace
56	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	6	6	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	6	3	replace
58	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	6	3	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	6	6	replace
60	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	6	6	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	6	6	replace
62	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	6	6	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	6	2	replace
64	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	6	2	replace
65	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	1	None	add
66	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  If(n.hasChildren()  ||  n.hasChildren())  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  If(n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasChildren())    {    If(n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  ';'  expected	1	None	add
67	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  if(N.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  if(N.hasChildren()  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasChildren())    {    if(N.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	1	None	add
68	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  ||  n!n.hasChildren())  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  ||  n!n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()  ||  n!n.hasChildren())  {	  	non-compiled	[CE]  ')'  expected	1	None	add
69	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  ||  (n.hasChildren()))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  ||  (n.hasChildren()))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()  ||  (n.hasChildren()))  {	  	non-compiled	[CE]  orphaned  case	1	None	add
70	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getLastChild()))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getLastChild()))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getLastChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild()))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	11	None	replace
71	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	11	None	replace
72	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild()))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	11	None	replace
73	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  outEdges))  {  [CE]  cannot  find  symbol  outEdges  [FE]                AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  outEdges))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  outEdges))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild()))    {    	non-compiled	[CE]  cannot  find  symbol  outEdges	11	None	replace
74	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType()))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	11	None	replace
75	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getFirstChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild()))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	10	None	replace
76	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getFirstChild()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getFirstChild()))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getFirstChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	10	None	replace
77	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(gNode.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(gNode.getFirstChild()))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(gNode.getFirstChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
78	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	10	None	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	14	4	replace
80	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	14	4	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	14	2	replace
82	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	14	2	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	14	4	replace
84	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	14	4	replace
85	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  RuntimeException  	14	4	replace
86	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  RuntimeException  	14	4	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	14	2	replace
88	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	14	2	replace
89	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  RuntimeException  	14	4	replace
90	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  RuntimeException  	14	4	replace
91	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasLastChild())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasLastChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasLastChild())  {	  if(n.hasChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
92	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild())  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getFirstChild())  {	  if(n.hasChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	15	None	replace
93	[BUG]  [BUGGY]  if(n.getChildren()  ||  n.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getChildren()  ||  n.hasFirstChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getChildren()  ||  n.hasFirstChild())  {	  if(n.hasChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
94	[BUG]  [BUGGY]  if(gNode.hasChildren()  ||  n.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(gNode.hasChildren()  ||  n.hasFirstChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(gNode.hasChildren()  ||  n.hasFirstChild())  {	  if(n.hasChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
95	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	7	None	add
96	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	7	None	add
97	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
98	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	7	None	add
99	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	7	None	add
100	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	7	None	add
101	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	7	None	add
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
103	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
105	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
107	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
109	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
111	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
113	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
114	[BUG]  [BUGGY]  if(n.getChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getChildren()  ||  n.hasNext())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getChildren()  ||  n.hasNext())  {	  if(n.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasNext())    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
116	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasNext())    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
117	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.hasNext())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasNext())  {	  if(n.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
118	[BUG]  [BUGGY]  if(gNode.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(gNode.hasChildren()  ||  n.hasNext())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(gNode.hasChildren()  ||  n.hasNext())  {	  if(n.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
119	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getNext())  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.getNext())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getNext())  {	  if(n.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	12	None	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasNext())    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
121	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasNext())    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
122	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	5	None	add
123	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  if(n.hasChildren()  ||  n.getOneChild())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  if(n.hasChildren()  ||  n.getOneChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()  ||  n.getOneChild())  {	  	non-compiled	[CE]  orphaned  case	13	None	add
124	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  if(n!Children()  ||  n.hasOneChild())  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  if(n!Children()  ||  n.hasOneChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild())    {    if(n!Children()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  ')'  expected	13	None	add
125	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  ||  n!hasChildren())  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  ||  n!hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()  ||  n!hasChildren())  {	  	non-compiled	[CE]  ')'  expected	1	None	add
126	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  if(n!hasChildren()  ||  n.hasChildren())  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  if(n!hasChildren()  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasChildren())    {    if(n!hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  ')'  expected	1	None	add
127	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasChildents())  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasChildents())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()  ||  n.hasChildents())  {	  	non-compiled	[CE]  orphaned  case	1	None	add
128	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild()))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (!n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild()))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (!n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild()))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	11	None	replace
129	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild())||  outEdges.size()  ==  1)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild())||  outEdges.size()  ==  1)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild())||  outEdges.size()  ==  1)  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild()))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	11	None	replace
130	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	4	None	replace
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	4	6	replace
132	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	4	6	replace
133	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getNext()))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getNext()))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getNext()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild()))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	10	None	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
135	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
136	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
137	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
138	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	2	4	replace
139	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	2	4	replace
140	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasFirstChild()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
141	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||!n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasFirstChild()  ||!n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||!n.hasChildren())  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
142	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  gNode.hasNext())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasFirstChild()  ||  gNode.hasNext())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  gNode.hasNext())  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
143	[BUG]  [BUGGY]  if(n.hasChildren()  ||  noOpStatements.hasNext())  {  [CE]  cannot  find  symbol  noOpStatements  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  noOpStatements.hasNext())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  noOpStatements.hasNext())  {	  if(n.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	12	None	replace
144	[BUG]  [BUGGY]  if(n.hasChildren()  ||  gNode.hasNext())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  gNode.hasNext())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  gNode.hasNext())  {	  if(n.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
145	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.hasNext())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  NodeUtil.hasNext())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  NodeUtil.hasNext())  {	  if(n.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	8	6	replace
147	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	8	6	replace
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
149	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
150	[BUG]  [BUGGY]  if(n.hasChildren()  ||  gNode.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  gNode.hasFirstChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  gNode.hasFirstChild())  {	  if(n.hasChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	6	6	replace
152	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	6	6	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	6	7	replace
154	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	6	7	replace
155	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  &&  nodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  &&  nodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (n.hasChildren()  &&  nodeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  orphaned  case	3	None	add
156	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasNoOpStatements())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasNoOpStatements())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasNoOpStatements())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
157	[BUG]  [BUGGY]  Node  n  =  n.getNext();  [CE]  'else'  without  'if'  [FE]                AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  Node  n  =  n.getNext();  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  n.getNext();	      	non-compiled	[CE]  'else'  without  'if'	9	None	replace
158	[BUG]  [BUGGY]  Node  n  =  gNode.getLastChild();  [CE]  'else'  without  'if'  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  Node  n  =  gNode.getLastChild();  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  gNode.getLastChild();	      	non-compiled	[CE]  'else'  without  'if'	9	None	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	8	6	replace
160	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	8	6	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	4	6	replace
162	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	4	6	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	4	6	replace
164	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	4	6	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	4	7	replace
166	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	4	7	replace
167	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild()))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	10	None	replace
168	[BUG]  [BUGGY]  n  =  n.getFirstChild();  [CE]  'else'  without  'if'  [FE]                AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  n  =  n.getFirstChild();  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	n  =  n.getFirstChild();	      	non-compiled	[CE]  'else'  without  'if'	9	None	replace
169	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	5	None	add
170	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(N.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(N.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(N.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	5	None	add
171	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasChildren())    {    if(!n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	1	None	add
172	[BUG]  [BUGGY]  if(n.hasChildren()  ||  node.hasNext())  {  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  node.hasNext())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  node.hasNext())  {	  if(n.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol  node	12	None	replace
173	[BUG]  [BUGGY]  if(n.hasChildren()  ||  parent.hasNext())  {  [CE]  cannot  find  symbol  parent  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  parent.hasNext())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  parent.hasNext())  {	  if(n.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol  parent	12	None	replace
174	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.canBeBlock())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.canBeBlock())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.canBeBlock())  {	  if(n.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
175	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  if(n!=n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  if(n!=n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild())    {    if(n!=n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	13	None	add
176	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  if(!n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  if(!n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild())    {    if(!n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	13	None	add
177	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  orphaned  case	3	None	add
178	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	7	None	add
179	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.FUNCTION)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	7	None	add
180	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  RuntimeException  	14	4	replace
181	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  RuntimeException  	14	4	replace
182	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  RuntimeException  	14	4	replace
183	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  RuntimeException  	14	4	replace
184	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild()))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	11	None	replace
185	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "BLOCK "))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "BLOCK "))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "BLOCK "))  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
186	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "clear "))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "clear "))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "clear "))  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
187	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "blk "))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "blk "))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "blk "))  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
188	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "boolean "))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "boolean "))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "boolean "))  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
189	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "prototype "))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "prototype "))  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "prototype "))  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
190	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	6	6	replace
191	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	6	6	replace
192	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {  [BUGGY]    Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
