bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasChildren())  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	25	2	replace
2	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasChildren())  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	25	2	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	25	6	replace
4	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	25	6	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	25	6	replace
6	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	25	6	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	25	6	replace
8	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	25	6	replace
9	[BUG]  [BUGGY]    [CE]  'else'  without  'if'  [FE]            AssertionFailedError  [CONTEXT]  }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  [BUGGY]    [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	  	if  (n.hasChildren())  {  	non-compiled	[CE]  'else'  without  'if'	25	None	replace
10	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionFailedError  [CONTEXT]  }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {	if  (n.hasChildren())  {  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	25	None	replace
11	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild()))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]      AssertionFailedError  [CONTEXT]  }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild()))  {  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild()))  {	if  (n.hasChildren())  {  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	25	None	replace
12	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  [BUGGY]  if(n.hasChildren()  ||  n.hasNext())  {  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasNext())  {	if  (n.hasChildren())  {  	non-compiled	[CE]  cannot  find  symbol	25	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild())  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	25	2	replace
14	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild())  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	25	2	replace
15	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  [BUGGY]  if(n.hasChildren()  ||  n.hasFirstChild())  {  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasFirstChild())  {	if  (n.hasChildren())  {  	non-compiled	[CE]  cannot  find  symbol	25	None	replace
16	[BUG]  [BUGGY]  if(n.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:  [BUGGY]  if(n.hasFirstChild())  {  [BUGGY]  Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild())  {	if  (n.hasChildren())  {  	non-compiled	[CE]  cannot  find  symbol	25	None	replace
