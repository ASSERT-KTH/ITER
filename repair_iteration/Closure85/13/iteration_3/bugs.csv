bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n,  n.getLastChild()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n,  n.getLastChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n,  n.getLastChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n,    n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	72	None	replace
2	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  n))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  n))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n,    n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	72	None	replace
3	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  null))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  null))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  null))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n,    n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	72	None	replace
4	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  gNode.getLastChild()))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  gNode.getLastChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  gNode.getLastChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n,    n.getLastChild()))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
5	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  n.getType()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  n.getType()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  n.getType()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n,    n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	72	None	replace
6	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  true))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  true))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  true))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n,    n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	72	None	replace
7	[BUG]  [BUGGY]  if(n.hasChildren()  ||  outEdges.hasNext())  {  [CE]  cannot  find  symbol  outEdges  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  outEdges.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  outEdges.hasNext())  {	  if(n.hasChildren()    ||    node.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol  outEdges	172	None	replace
8	[BUG]  [BUGGY]  if(n.hasChildren()  ||  nextCfgNode.hasNext())  {  [CE]  cannot  find  symbol  nextCfgNode  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  nextCfgNode.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  nextCfgNode.hasNext())  {	  if(n.hasChildren()    ||    node.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	172	None	replace
9	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()    &&    n.getFirstChild().getType()    >>    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	101	4	replace
10	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()    &&    n.getFirstChild().getType()    >>    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	101	4	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	62	7	replace
12	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	62	7	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	62	6	replace
14	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	62	6	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	62	6	replace
16	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	62	6	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.GETPROP  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	62	6	replace
18	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.GETPROP  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	62	6	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()!=  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	62	6	replace
20	[BUG]  [BUGGY]  if(n.getType()!=  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()!=  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	62	6	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getNext().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	62	6	replace
22	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getNext().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getNext().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	62	6	replace
23	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  if(n!=  n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  if(n!=  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasOneChild())  {  if(n!=  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n!=n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  orphaned  case	175	None	replace
24	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME)  {  if(n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n!=n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  orphaned  case	175	None	replace
25	[BUG]  [BUGGY]  if(n.hasChildren())  {  if(n!=  null  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren())  {  if(n!=  null  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren())  {  if(n!=  null  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n!=n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  orphaned  case	175	None	replace
26	[BUG]  [BUGGY]  if(n.hasChildren())  {  if(n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren())  {  if(n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren())  {  if(n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n!=n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  orphaned  case	175	None	replace
27	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL)  {  if(n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL)  {  if(n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL)  {  if(n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n!=n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  orphaned  case	175	None	replace
28	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.isOneChild())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.isOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.isOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()    ||    n.isOneChild())    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
29	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()    ||    n.isOneChild())    {    	compilable	  [FE]  RuntimeException  	25	2	replace
30	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK)  {  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()    ||    n.isOneChild())    {    	compilable	  [FE]  RuntimeException  	25	2	replace
31	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  orphaned  case	21	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	21	2	replace
33	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	21	2	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	21	4	replace
35	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	21	4	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	21	6	replace
37	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	21	6	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.NAME  ||  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	84	2	replace
39	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.hasChildren()  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME  ||  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	84	2	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.hasOneChild())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	84	6	replace
41	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.hasOneChild())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	84	6	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()!=  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	84	2	replace
43	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()!=  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	84	2	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()!=  Token.NAME  ||  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	84	2	replace
45	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.hasChildren()  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()!=  Token.NAME  ||  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	84	2	replace
46	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasFirstChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasFirstChild())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
47	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()    &&    n.getfirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	100	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()    &&    n.getfirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	100	7	replace
49	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()    &&    n.getfirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	100	7	replace
50	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  gNode.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  gNode.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  gNode.getFirstChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(gNode.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
51	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(gNode,  outEdges.getFirstChild()))  {  [CE]  cannot  find  symbol  outEdges  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(gNode,  outEdges.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(gNode,  outEdges.getFirstChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(gNode.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  outEdges	77	None	replace
52	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(gNode.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(gNode.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(gNode.getFirstChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(gNode.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
53	[BUG]  [BUGGY]  if  (gNode.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (gNode.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (gNode.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(gNode.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
54	[BUG]  [BUGGY]  if  (removeNoOpStatements  &&  n.hasChildren()  &&  tryRemoveUnconditionalBranching(gNode.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (removeNoOpStatements  &&  n.hasChildren()  &&  tryRemoveUnconditionalBranching(gNode.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (removeNoOpStatements  &&  n.hasChildren()  &&  tryRemoveUnconditionalBranching(gNode.getFirstChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(gNode.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
55	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  outEdges.getFirstChild()))  {  [CE]  cannot  find  symbol  outEdges  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  outEdges.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  outEdges.getFirstChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(gNode.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  outEdges	77	None	replace
56	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()    &&    n.getFirstChild().getType()    >=    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	4	4	replace
57	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()    &&    n.getFirstChild().getType()    >=    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	4	4	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()    &&    n.getFirstChild().getType()    >=    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	4	3	replace
59	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()    &&    n.getFirstChild().getType()    >=    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	4	3	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()    &&    n.getFirstChild().getType()    >=    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	4	7	replace
61	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()    &&    n.getFirstChild().getType()    >=    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	4	7	replace
62	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasNext()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasNext()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasNext()  ||  n.hasNext())  {	  if(n.hasChildren()    &&    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
63	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().hasNext())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().hasNext())  {	  if(n.hasChildren()    &&    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
64	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getNext())  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getNext())  {	  if(n.hasChildren()    &&    n.hasNext())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	117	None	replace
65	[BUG]  [BUGGY]  if(n.hasChildren()  &&  node.hasNext())  {  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  node.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  node.hasNext())  {	  if(n.hasChildren()    &&    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol  node	117	None	replace
66	[BUG]  [BUGGY]  if(n.getChildren()  &&  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getChildren()  &&  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getChildren()  &&  n.hasNext())  {	  if(n.hasChildren()    &&    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
67	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	53	None	add
68	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	53	None	add
69	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]        RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	53	None	add
70	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]          RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()  >=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	53	None	add
71	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
72	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getfirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]              RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getfirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.getfirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	53	None	add
73	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  >>  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  >>  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()  >>  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	53	None	add
74	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()    ||    (n.hasOneChild()))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
75	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(n.hasChildren()  ||  (n.hasOneChild()))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(n.hasChildren()  ||  (n.hasOneChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(n.hasChildren()  ||  (n.hasOneChild()))  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()    ||    (n.hasOneChild()))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
76	[BUG]  [BUGGY]  if(n.hasChildren())  {  if(n.hasChildren()  ||  (n.hasOneChild()))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren())  {  if(n.hasChildren()  ||  (n.hasOneChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren())  {  if(n.hasChildren()  ||  (n.hasOneChild()))  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()    ||    (n.hasOneChild()))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	88	2	replace
78	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	88	2	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	88	2	replace
80	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()!=  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	88	2	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	88	2	replace
82	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	88	2	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	88	2	replace
84	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	88	2	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	88	2	replace
86	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	88	2	replace
87	[BUG]  [BUGGY]  if(n.isReturn()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.isReturn()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.isReturn()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
88	[BUG]  [BUGGY]  if(n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(!n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  orphaned  case	171	None	replace
89	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(!n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  orphaned  case	171	None	replace
90	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(!n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  orphaned  case	171	None	replace
91	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(!n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(!n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME)  {  if(!n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(!n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  orphaned  case	171	None	replace
92	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(!n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  orphaned  case	171	None	replace
93	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  if(!n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  if(!n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.GETPROP)  {  if(!n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(!n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  orphaned  case	171	None	replace
94	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isBlank(n))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isBlank(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  NodeUtil.isBlank(n))  {	  if(n.hasChildren()    ||    NodeUtil.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  NodeUtil.isExpressionNode(n))  {	  if(n.hasChildren()    ||    NodeUtil.hasNext())    {    	compilable	  [FE]  AssertionFailedError  	145	2	replace
96	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isExpressionNode(n))  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  NodeUtil.isExpressionNode(n))  {	  if(n.hasChildren()    ||    NodeUtil.hasNext())    {    	compilable	  [FE]  AssertionFailedError  	145	2	replace
97	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.hasNextNode(n))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.hasNextNode(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  NodeUtil.hasNextNode(n))  {	  if(n.hasChildren()    ||    NodeUtil.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
98	[BUG]  [BUGGY]  if(n.getChildren()  ||  NodeUtil.hasNext())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getChildren()  ||  NodeUtil.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getChildren()  ||  NodeUtil.hasNext())  {	  if(n.hasChildren()    ||    NodeUtil.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
99	[BUG]  [BUGGY]  if(n.hasChildren()  &&  NodeUtil.hasNext())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  NodeUtil.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  NodeUtil.hasNext())  {	  if(n.hasChildren()    ||    NodeUtil.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
100	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	153	None	add
101	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(!n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	153	None	add
102	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	153	None	add
103	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(!n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	153	None	add
104	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(!n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	153	None	add
105	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(!n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	153	None	add
106	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(!n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	153	None	add
107	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	59	None	add
108	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	59	None	add
109	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  If(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  If(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    If(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	59	None	add
110	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  >=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  >=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getLastChild().getType()  >=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	59	None	add
111	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  >>  Token.BLOCK)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  >>  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getLastChild().getType()  >>  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	59	None	add
112	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLACK)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLACK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLACK)  {	  	non-compiled	[CE]  orphaned  case	59	None	add
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    n!hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	125	2	replace
114	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    n!hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	125	2	replace
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    n!hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	125	2	replace
116	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    n!hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	125	2	replace
117	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {	  	non-compiled	[CE]  orphaned  case	131	None	add
118	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  if  (n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n)||!NodeUtil.mayHaveSideEffects(n))  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  if  (n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n)||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))    {    if  (n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n)||!NodeUtil.mayHaveSideEffects(n))  {	  	non-compiled	[CE]  orphaned  case	131	None	add
119	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))    {    If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {	  	non-compiled	[CE]  ';'  expected	131	None	add
120	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  if  (NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  if  (NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))    {    if  (NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {	  	non-compiled	[CE]  orphaned  case	131	None	add
121	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  if  (N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  if  (N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))    {    if  (N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {	  	non-compiled	[CE]  orphaned  case	131	None	add
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getFirstChild().hasChildren())  {	  if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	139	2	replace
123	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().hasChildren())  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().hasChildren())  {	  if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	139	2	replace
124	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getFirstChild().hasChildren())  {	  if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  RuntimeException  	139	4	replace
125	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getFirstChild().hasChildren())  {	  if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  RuntimeException  	139	4	replace
126	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.getFirstChild().hasChildren())  {	  if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  RuntimeException  	139	4	replace
127	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.getFirstChild().hasChildren())  {	  if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  RuntimeException  	139	4	replace
128	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.getFirstChild().hasChildren())  {	  if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  RuntimeException  	139	4	replace
129	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.getFirstChild().hasChildren())  {	  if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  RuntimeException  	139	4	replace
130	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {	  if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  RuntimeException  	139	4	replace
131	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {	  if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  RuntimeException  	139	4	replace
132	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getLastChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getLastChild().hasChildren())  {	  if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  RuntimeException  	139	4	replace
133	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getLastChild().hasChildren())  {  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getLastChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getLastChild().hasChildren())  {	  if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  RuntimeException  	139	4	replace
134	[BUG]  [BUGGY]  if(outEdges.hasChildren()  ||  n.hasFirstChild())  {  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(outEdges.hasChildren()  ||  n.hasFirstChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(outEdges.hasChildren()  ||  n.hasFirstChild())  {	  if(gNode.hasChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol  outEdges	94	None	replace
135	[BUG]  [BUGGY]  if(n.getChildren()  ||  gNode.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getChildren()  ||  gNode.hasFirstChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getChildren()  ||  gNode.hasFirstChild())  {	  if(gNode.hasChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
136	[BUG]  [BUGGY]  if(n.getFirstChild()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	8	None	replace
137	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
138	[BUG]  [BUGGY]  if(gNode.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(gNode.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(gNode.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
139	[BUG]  [BUGGY]  if(n.hasNext()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasNext()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasNext()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
140	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isExpressionNode(n))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  NodeUtil.isExpressionNode(n))  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
141	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	120	None	add
142	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  ||  n.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	120	None	add
143	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getType()    ==    Token.FUNCTION)    {    If(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	120	None	add
144	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getType()  >=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getType()  >=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  ||  n.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	120	None	add
145	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getType()  >>  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getType()  >>  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  ||  n.getType()  >>  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	120	None	add
146	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if(N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if(N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if(N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (N.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	29	None	replace
147	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (N.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	29	None	replace
148	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (N.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	29	None	replace
149	[BUG]  [BUGGY]  if(n.hasChildren())  {  if(N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren())  {  if(N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren())  {  if(N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (N.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	29	None	replace
150	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if(!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if(!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if(!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (N.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	29	None	replace
151	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(N.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(N.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(N.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(N.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  orphaned  case	67	None	replace
152	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(N.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  orphaned  case	67	None	replace
153	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(N.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  orphaned  case	67	None	replace
154	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if(NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if(NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if(NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (NodeUtil.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	177	None	replace
155	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (NodeUtil.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	177	None	replace
156	[BUG]  [BUGGY]  if(n.hasChildren())  {  if(NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren())  {  if(NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren())  {  if(NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (NodeUtil.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	177	None	replace
157	[BUG]  [BUGGY]  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (NodeUtil.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
158	[BUG]  [BUGGY]  if(n.hasChildren())  {  if(NodeUtil.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren())  {  if(NodeUtil.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren())  {  if(NodeUtil.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (NodeUtil.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	177	None	replace
159	[BUG]  [BUGGY]  if(NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (NodeUtil.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
160	[BUG]  [BUGGY]  if(n.getFirstChild()  ||  n.getLastChild().getString().equals( "boolean "))  {  [CE]  bad  operand  types  for  binary  operator  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ||  n.getLastChild().getString().equals( "boolean "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ||  n.getLastChild().getString().equals( "boolean "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "boolean   "))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	188	None	replace
161	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  n.getLastChild().getString().equals( "boolean   "))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&  n.getLastChild().getString().equals( "boolean   "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  n.getLastChild().getString().equals( "boolean   "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "boolean   "))    {    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
162	[BUG]  [BUGGY]  if(n.isFirstChild()  ||  n.getLastChild().getString().equals( "boolean "))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.isFirstChild()  ||  n.getLastChild().getString().equals( "boolean "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.isFirstChild()  ||  n.getLastChild().getString().equals( "boolean "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "boolean   "))    {    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
163	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ".boolean "))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ".boolean "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ".boolean "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "boolean   "))    {    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
164	[BUG]  [BUGGY]  if(n.hasLastChild()  ||  n.getLastChild().getString().equals( "boolean "))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasLastChild()  ||  n.getLastChild().getString().equals( "boolean "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasLastChild()  ||  n.getLastChild().getString().equals( "boolean "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "boolean   "))    {    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
165	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	63	None	add
166	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	63	None	add
167	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  	non-compiled	[CE]  ';'  expected	63	None	add
168	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	63	None	add
169	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	63	None	add
170	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    if(n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	63	None	add
171	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.BLOCK  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.BLOCK  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	63	None	add
172	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild();  [CE]  'else'  without  'if'  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  first  =  gNode.getFirstChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  gNode.getFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
173	[BUG]  [BUGGY]  Node  first  =  n.getNext();  [CE]  'else'  without  'if'  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  first  =  n.getNext();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  n.getNext();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
174	[BUG]  [BUGGY]  Node  first  =  gNode.getLastChild();  [CE]  'else'  without  'if'  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  first  =  gNode.getLastChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  gNode.getLastChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
175	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  [CE]  'else'  without  'if'  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  first  =  n.removeFirstChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  n.removeFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
176	[BUG]  [BUGGY]  Node  first  =  node.getFirstChild();  [CE]  'else'  without  'if'  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  first  =  node.getFirstChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  node.getFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
177	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	96	None	replace
178	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getLastChild())||  outEdges.size()  ==  1)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getLastChild())||  outEdges.size()  ==  1)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getLastChild())||  outEdges.size()  ==  1)  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild())||    outEdges.size()    ==    1)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	129	None	replace
179	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild())&&  outEdges.size()  ==  1)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild())&&  outEdges.size()  ==  1)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild())&&  outEdges.size()  ==  1)  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild())||    outEdges.size()    ==    1)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	129	None	replace
180	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild())||  outEdges.size()  ==  1)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild())||  outEdges.size()  ==  1)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild())||  outEdges.size()  ==  1)  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild())||    outEdges.size()    ==    1)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	129	None	replace
181	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  outEdges.getLastChild())||  outEdges.size()  ==  1)  {  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  outEdges.getLastChild())||  outEdges.size()  ==  1)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  outEdges.getLastChild())||  outEdges.size()  ==  1)  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild())||    outEdges.size()    ==    1)    {    	non-compiled	[CE]  cannot  find  symbol  outEdges	129	None	replace
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	50	6	replace
183	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	50	6	replace
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	50	7	replace
185	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	50	7	replace
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	50	6	replace
187	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	50	6	replace
188	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	50	6	replace
189	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	50	6	replace
190	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FOR  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.FOR  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	50	6	replace
191	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FOR  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FOR  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FOR  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	50	6	replace
192	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.FUNCTION  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()!=  Token.FUNCTION  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	50	2	replace
193	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.FUNCTION  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()!=  Token.FUNCTION  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	50	2	replace
194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	90	5	replace
195	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	90	5	replace
196	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	90	4	replace
197	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	90	4	replace
198	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	90	4	replace
199	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	90	4	replace
200	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	90	4	replace
201	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	90	4	replace
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	90	2	replace
203	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	90	2	replace
204	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	90	4	replace
205	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	90	4	replace
206	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(N.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(N.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(N.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(N.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  orphaned  case	23	None	replace
207	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(N.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  orphaned  case	23	None	replace
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (!n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	34	6	replace
209	[BUG]  [BUGGY]  if  (!n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (!n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	34	6	replace
210	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isBlock(n))  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isBlock(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (!n.hasChildren()  &&  NodeUtil.isBlock(n))  {	  if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
211	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isBlockDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isBlockDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (!n.hasChildren()  &&  NodeUtil.isBlockDeclaration(n))  {	  if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
212	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isBlank(n))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isBlank(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (!n.hasChildren()  &&  NodeUtil.isBlank(n))  {	  if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {	  if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	34	6	replace
214	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {	  if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	34	6	replace
215	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	57	None	add
216	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	57	None	add
217	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	57	None	add
218	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.BLOCK)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	57	None	add
219	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.BLOCK)    {    If(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	57	None	add
220	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	57	None	add
221	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getfirstChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getfirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getfirstChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	57	None	add
222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	40	2	replace
223	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	40	2	replace
224	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&!n.hasChildren())  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	40	6	replace
225	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&!n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&!n.hasChildren())  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	40	6	replace
226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	191	7	replace
227	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	191	7	replace
228	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	191	4	replace
229	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	191	4	replace
230	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	191	6	replace
231	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	191	6	replace
232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getLastChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	191	6	replace
233	[BUG]  [BUGGY]  if(n.getLastChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getLastChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	191	6	replace
234	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	191	6	replace
235	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	191	6	replace
236	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	191	6	replace
237	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	191	6	replace
238	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isBlock(n))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isBlock(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  NodeUtil.isBlock(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isBlock(n))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isBlock(n))    {    	compilable	  [FE]  AssertionFailedError  	37	2	replace
240	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isBlock(n))    {    	compilable	  [FE]  AssertionFailedError  	37	2	replace
241	[BUG]  [BUGGY]  if  (NodeUtil.hasChildren()  &&  NodeUtil.isBlock(n))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (NodeUtil.hasChildren()  &&  NodeUtil.isBlock(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (NodeUtil.hasChildren()  &&  NodeUtil.isBlock(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isBlock(n))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
242	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunction(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.isFunction(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isBlock(n))    {    	compilable	  [FE]  AssertionFailedError  	37	6	replace
243	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunction(n))  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunction(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isFunction(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isBlock(n))    {    	compilable	  [FE]  AssertionFailedError  	37	6	replace
244	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  orphaned  case	182	None	add
245	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.NAME)  {	  	non-compiled	[CE]  orphaned  case	182	None	add
246	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]        RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  orphaned  case	182	None	add
247	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  >=  Token.NAME)  {  [CE]  orphaned  case  [FE]          RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  >=  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  orphaned  case	182	None	add
248	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  If(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  If(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    If(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	182	None	add
249	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getfirstChild().getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]              RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getfirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getfirstChild().getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  orphaned  case	182	None	add
250	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  if(N.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  if(N.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    if(N.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  orphaned  case	182	None	add
251	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getLastChild(),  n))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getLastChild(),  n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getLastChild(),  n))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	71	None	replace
252	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n,  first))  {  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n,  first))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n,  first))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n))    {    	non-compiled	[CE]  cannot  find  symbol  first	71	None	replace
253	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n,  null))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n,  null))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n,  null))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	71	None	replace
254	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n,  rootNode))  {  [CE]  cannot  find  symbol  rootNode  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n,  rootNode))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n,  rootNode))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n))    {    	non-compiled	[CE]  cannot  find  symbol  rootNode	71	None	replace
255	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n,  this))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n,  this))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n,  this))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	71	None	replace
256	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n,  1))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n,  1))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n,  1))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	71	None	replace
257	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	51	None	add
258	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(!n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	51	None	add
259	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    If(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
260	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(!n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	51	None	add
261	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(!n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	51	None	add
262	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(!n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	51	None	add
263	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(!n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	51	None	add
264	[BUG]  [BUGGY]  Node  n  =  gNode.getNext();  [CE]  'else'  without  'if'  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  n  =  gNode.getNext();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  gNode.getNext();	  Node    n    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	157	None	replace
265	[BUG]  [BUGGY]  Node  n  =  gNode.getFirstChild();  [CE]  'else'  without  'if'  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  n  =  gNode.getFirstChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  gNode.getFirstChild();	  Node    n    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	157	None	replace
266	[BUG]  [BUGGY]  Node  n  =  outEdges.getNext();  [CE]  'else'  without  'if'  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  n  =  outEdges.getNext();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  outEdges.getNext();	  Node    n    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	157	None	replace
267	[BUG]  [BUGGY]  Node  n  =  gNode.getParent();  [CE]  'else'  without  'if'  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  n  =  gNode.getParent();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  gNode.getParent();	  Node    n    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	157	None	replace
268	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  &&  tryRemoveUnconditionalBranching(n.getLastChild()))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  &&  tryRemoveUnconditionalBranching(n.getLastChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasOneChild()  &&  tryRemoveUnconditionalBranching(n.getLastChild()))  {	  if(n.hasChildren()    &&    n.hasOneChild())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	80	None	replace
269	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.hasOneChild()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if(n.hasChildren()    &&    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	80	6	replace
270	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  &&  NodeUtil.isFunctionDeclaration(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasOneChild()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if(n.hasChildren()    &&    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	80	6	replace
271	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	80	5	replace
272	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	80	5	replace
273	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  &&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  &&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasOneChild()  &&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {	  if(n.hasChildren()    &&    n.hasOneChild())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	80	None	replace
274	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(removeNoOpStatements  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasNoOpStatements())    {    	compilable	  [FE]  AssertionFailedError  	156	2	replace
275	[BUG]  [BUGGY]  if(removeNoOpStatements  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasNoOpStatements())    {    	compilable	  [FE]  AssertionFailedError  	156	2	replace
276	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasNoOpStatements())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasNoOpStatements())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasNoOpStatements())  {	  if(n.hasChildren()    ||    n.hasNoOpStatements())    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
277	[BUG]  [BUGGY]  if(n.hasChildren()  ||  noOpStatements.hasNoOpStatements())  {  [CE]  cannot  find  symbol  noOpStatements  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  noOpStatements.hasNoOpStatements())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  noOpStatements.hasNoOpStatements())  {	  if(n.hasChildren()    ||    n.hasNoOpStatements())    {    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	156	None	replace
278	[BUG]  [BUGGY]  if(n.getChildren()  ||  n.hasNoOpStatements())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getChildren()  ||  n.hasNoOpStatements())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getChildren()  ||  n.hasNoOpStatements())  {	  if(n.hasChildren()    ||    n.hasNoOpStatements())    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
279	[BUG]  [BUGGY]  if(gNode.hasChildren()  ||  n.hasNoOpStatements())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(gNode.hasChildren()  ||  n.hasNoOpStatements())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(gNode.hasChildren()  ||  n.hasNoOpStatements())  {	  if(n.hasChildren()    ||    n.hasNoOpStatements())    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
280	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.removeNoOpStatements())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.removeNoOpStatements())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.removeNoOpStatements())  {	  if(n.hasChildren()    ||    n.hasNoOpStatements())    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
281	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getNext()))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getNext()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getNext()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getNext()))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	133	None	replace
282	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getNext()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getNext()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getNext()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getNext()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	133	None	replace
283	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  outEdges.getNext()))  {  [CE]  cannot  find  symbol  outEdges  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  outEdges.getNext()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  outEdges.getNext()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getNext()))    {    	non-compiled	[CE]  cannot  find  symbol  outEdges	133	None	replace
284	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getParent()))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getParent()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getParent()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getNext()))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	133	None	replace
285	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getNext(),  n))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getNext(),  n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getNext(),  n))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getNext()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	133	None	replace
286	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	86	4	replace
287	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.BLOCK)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	86	4	replace
288	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	86	2	replace
289	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	86	2	replace
290	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	86	4	replace
291	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	86	4	replace
292	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	86	4	replace
293	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()  ==  Token.BLOCK)  {  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	86	4	replace
294	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  NodeUtil.isFunctionAnalysis(n))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  NodeUtil.isFunctionAnalysis(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  NodeUtil.isFunctionAnalysis(n))  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionAnalysis(n))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
295	[BUG]  [BUGGY]  if(n.getFirstChild()  &&  NodeUtil.isFunctionAnalysis(n))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  &&  NodeUtil.isFunctionAnalysis(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  &&  NodeUtil.isFunctionAnalysis(n))  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionAnalysis(n))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
296	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionAnalysis(n)||  NodeUtil.isFunctionAnalysis(n))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionAnalysis(n)||  NodeUtil.isFunctionAnalysis(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  NodeUtil.isFunctionAnalysis(n)||  NodeUtil.isFunctionAnalysis(n))  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionAnalysis(n))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
297	[BUG]  [BUGGY]  if(gNode.hasFirstChild()  &&  NodeUtil.isFunctionAnalysis(n))  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(gNode.hasFirstChild()  &&  NodeUtil.isFunctionAnalysis(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(gNode.hasFirstChild()  &&  NodeUtil.isFunctionAnalysis(n))  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionAnalysis(n))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
298	[BUG]  [BUGGY]  if(n.isFunctionAnalysis()  &&  NodeUtil.isFunctionAnalysis(n))  {  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.isFunctionAnalysis()  &&  NodeUtil.isFunctionAnalysis(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.isFunctionAnalysis()  &&  NodeUtil.isFunctionAnalysis(n))  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionAnalysis(n))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
299	[BUG]  [BUGGY]  if(n.hasNext()  &&  NodeUtil.isFunctionAnalysis(n))  {  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasNext()  &&  NodeUtil.isFunctionAnalysis(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasNext()  &&  NodeUtil.isFunctionAnalysis(n))  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionAnalysis(n))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
300	[BUG]  [BUGGY]  if(n.hasChildren())  {  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren())  {  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren())  {  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	26	None	replace
301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	26	6	replace
302	[BUG]  [BUGGY]  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	26	6	replace
303	[BUG]  [BUGGY]  if(!removeNoOpStatements)  {  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!removeNoOpStatements)  {  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!removeNoOpStatements)  {  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	26	None	replace
304	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	85	None	add
305	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	85	None	add
306	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]        RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	85	None	add
307	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]          RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  >=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	85	None	add
308	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	85	None	add
309	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getfirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]              RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getfirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getfirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	85	None	add
310	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLACK)  {  [CE]  orphaned  case  [FE]                RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLACK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLACK)  {	  	non-compiled	[CE]  orphaned  case	85	None	add
311	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.getFirstChild()!=  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	134	None	add
312	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.getFirstChild()  ==  null  &&  n.hasChildren())  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.getFirstChild()  ==  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.getFirstChild()  ==  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	134	None	add
313	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  If(n.getFirstChild()!=  null  &&  n.hasChildren())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  If(n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren())    {    If(n.getFirstChild()!=  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  ';'  expected	134	None	add
314	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.getFirstChild()  >=  null  &&  n.hasChildren())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.getFirstChild()  >=  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.getFirstChild()  >=  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	134	None	add
315	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.getFirstChild()  >>  null  &&  n.hasChildren())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.getFirstChild()  >>  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.getFirstChild()  >>  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	134	None	add
316	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.getFirstChild()  [BUGGY]  null  &&  n.hasChildren())  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.getFirstChild()  [BUGGY]  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.getFirstChild()  [BUGGY]  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  ')'  expected	134	None	add
317	[BUG]  [BUGGY]  if(n.getFirstChild()  ||  n.getLastChild().getString().equals( "blk "))  {  [CE]  bad  operand  types  for  binary  operator  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ||  n.getLastChild().getString().equals( "blk "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ||  n.getLastChild().getString().equals( "blk "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "blk   "))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	187	None	replace
318	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "lk   "))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "lk   "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "lk   "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "blk   "))    {    	non-compiled	[CE]  cannot  find  symbol	187	None	replace
319	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	43	None	add
320	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	43	None	add
321	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	43	None	add
322	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    If(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	43	None	add
323	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getType()  >=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getType()  >=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getType()  >=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	43	None	add
324	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	43	None	add
325	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	43	None	add
326	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()    &&!n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	178	None	replace
327	[BUG]  [BUGGY]  if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()    &&!n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	178	None	replace
328	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	56	2	replace
329	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	56	2	replace
330	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	56	4	replace
331	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	56	4	replace
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	56	6	replace
333	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	56	6	replace
334	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	56	3	replace
335	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	56	3	replace
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	56	6	replace
337	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	56	6	replace
338	[BUG]  [BUGGY]  if(n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(!n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  orphaned  case	176	None	replace
339	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  if(!n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  if(!n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasOneChild())  {  if(!n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(!n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  orphaned  case	176	None	replace
340	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(!n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  orphaned  case	176	None	replace
341	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(!n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(!n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME)  {  if(!n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(!n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  orphaned  case	176	None	replace
342	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(!n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  orphaned  case	176	None	replace
343	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getType()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getType()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getType()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n.getType()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	74	None	replace
344	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n.getType()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	74	None	replace
345	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType(),  null))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType(),  null))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType(),  null))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n.getType()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	74	None	replace
346	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType(),  this))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType(),  this))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType(),  this))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n.getType()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	74	None	replace
347	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType(),  true))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType(),  true))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType(),  true))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n.getType()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	74	None	replace
348	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType(),  Token.BLOCK))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType(),  Token.BLOCK))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType(),  Token.BLOCK))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n.getType()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	74	None	replace
349	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n,  n.getFirstChild()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n,  n.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n,  n.getFirstChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n,    n.getFirstChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	76	None	replace
350	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(gNode,  n.getFirstChild()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(gNode,  n.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(gNode,  n.getFirstChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n,    n.getFirstChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	76	None	replace
351	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getFirstChild(),  n))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getFirstChild(),  n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getFirstChild(),  n))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n,    n.getFirstChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	76	None	replace
352	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  first,  n.getFirstChild()))  {  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  first,  n.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  first,  n.getFirstChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n,    n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  first	76	None	replace
353	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	65	6	replace
354	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	65	6	replace
355	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	65	6	replace
356	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	65	6	replace
357	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
358	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
359	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
360	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()!=  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
361	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
362	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
363	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
364	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
365	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.CALL)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getType()  ==  Token.CALL)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
366	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.CALL)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getType()  ==  Token.CALL)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
367	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	164	2	replace
368	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	164	2	replace
369	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	164	6	replace
370	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	164	6	replace
371	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	164	7	replace
372	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	164	7	replace
373	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  break;  [CE]  'else'  without  'if'  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  first  =  n.getFirstChild();  break;  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  n.getFirstChild();  break;	  Node    first    =    n.getLastChild();    break;    	non-compiled	[CE]  'else'  without  'if'	19	None	replace
374	[BUG]  [BUGGY]  Node  first  =  gNode.getLastChild();  break;  [CE]  'else'  without  'if'  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  first  =  gNode.getLastChild();  break;  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  gNode.getLastChild();  break;	  Node    first    =    n.getLastChild();    break;    	non-compiled	[CE]  'else'  without  'if'	19	None	replace
375	[BUG]  [BUGGY]  Node  first  =  n.getNext();  break;  [CE]  'else'  without  'if'  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  first  =  n.getNext();  break;  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  n.getNext();  break;	  Node    first    =    n.getLastChild();    break;    	non-compiled	[CE]  'else'  without  'if'	19	None	replace
376	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild();  break;  [CE]  'else'  without  'if'  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  first  =  gNode.getFirstChild();  break;  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  gNode.getFirstChild();  break;	  Node    first    =    n.getLastChild();    break;    	non-compiled	[CE]  'else'  without  'if'	19	None	replace
377	[BUG]  [BUGGY]  Node  first  =  node.getLastChild();  break;  [CE]  'else'  without  'if'  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  first  =  node.getLastChild();  break;  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  node.getLastChild();  break;	  Node    first    =    n.getLastChild();    break;    	non-compiled	[CE]  'else'  without  'if'	19	None	replace
378	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	83	None	add
379	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()!=  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()!=  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    if(n.getType()!=  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	83	None	add
380	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  If(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  If(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    If(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  ';'  expected	83	None	add
381	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()  >=  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()  >=  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    if(n.getType()  >=  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	83	None	add
382	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()  >>  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()  >>  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    if(n.getType()  >>  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	83	None	add
383	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()  ==  Token.NAME  ||  n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()  ==  Token.NAME  ||  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    if(n.getType()  ==  Token.NAME  ||  n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	83	None	add
384	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()    &&    n.getFirstChild().gettype()    ==    Token.BLOCK)    {    	non-compiled	[CE]  orphaned  case	122	None	replace
385	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()    &&    n.getFirstChild().gettype()    ==    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
386	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(p))    {    	non-compiled	[CE]  orphaned  case	30	None	replace
387	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(p))  {  [CE]  cannot  find  symbol  p  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(p))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(p))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(p))    {    	non-compiled	[CE]  cannot  find  symbol  p	30	None	replace
388	[BUG]  [BUGGY]  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {  [CE]  cannot  find  symbol  p  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(p))    {    	non-compiled	[CE]  cannot  find  symbol  p	30	None	replace
389	[BUG]  [BUGGY]  if(n.hasChildren())  {  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren())  {  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren())  {  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(p))    {    	non-compiled	[CE]  orphaned  case	30	None	replace
390	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(p))    {    	non-compiled	[CE]  orphaned  case	30	None	replace
391	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.canBeBlock())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.canBeBlock())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.canBeBlock())  {	  if(n.hasChildren()    ||    n.canBeBlock())    {    	non-compiled	[CE]  cannot  find  symbol	174	None	replace
392	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.isBlock())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.isBlock())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.isBlock())  {	  if(n.hasChildren()    ||    n.canBeBlock())    {    	non-compiled	[CE]  cannot  find  symbol	174	None	replace
393	[BUG]  [BUGGY]  if(n.getChildren()  ||  n.canBeBlock())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getChildren()  ||  n.canBeBlock())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getChildren()  ||  n.canBeBlock())  {	  if(n.hasChildren()    ||    n.canBeBlock())    {    	non-compiled	[CE]  cannot  find  symbol	174	None	replace
394	[BUG]  [BUGGY]  if(gNode.hasChildren()  ||  n.canBeBlock())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(gNode.hasChildren()  ||  n.canBeBlock())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(gNode.hasChildren()  ||  n.canBeBlock())  {	  if(n.hasChildren()    ||    n.canBeBlock())    {    	non-compiled	[CE]  cannot  find  symbol	174	None	replace
395	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.removeFirstChild())  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.removeFirstChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.removeFirstChild())  {	  if(n.hasChildren()    ||    n.canBeBlock())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	174	None	replace
396	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)&&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)&&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)&&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {	  if    (n.hasChildren()    &&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	36	None	replace
397	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    If(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	97	None	replace
398	[BUG]  [BUGGY]  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    If(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	97	None	replace
399	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    If(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	97	None	replace
400	[BUG]  [BUGGY]  if(n.hasChildren())  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren())  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren())  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    If(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	97	None	replace
401	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    If(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	97	None	replace
402	[BUG]  [BUGGY]  if(n.hasChildren()  ||  gNode.getFirstChild())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  gNode.getFirstChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  gNode.getFirstChild())  {	  if(n.hasChildren()    ||    gNode.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
403	[BUG]  [BUGGY]  if(n.hasChildren()  &&  gNode.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  gNode.hasFirstChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  gNode.hasFirstChild())  {	  if(n.hasChildren()    ||    gNode.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
404	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	81	None	add
405	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	81	None	add
406	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  If(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  If(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    If(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  ';'  expected	81	None	add
407	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()  >=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()  >=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    if(n.getType()  >=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	81	None	add
408	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()  >>  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()  >>  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    if(n.getType()  >>  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	81	None	add
409	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	81	None	add
410	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()    &&    n.getFirstChild().getType()    >=    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	98	3	replace
411	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()    &&    n.getFirstChild().getType()    >=    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	98	3	replace
412	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  if(n.hasChildren()  &&  n.hasOneChild())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  if(n.hasChildren()  &&  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.hasOneChild())    {    if(n.hasChildren()  &&  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	79	None	add
413	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  If(n.hasChildren()  &&  n.hasOneChild())  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  If(n.hasChildren()  &&  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.hasOneChild())    {    If(n.hasChildren()  &&  n.hasOneChild())  {	  	non-compiled	[CE]  ';'  expected	79	None	add
414	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  if(n.hasChildren()  &&!n.hasOneChild())  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  if(n.hasChildren()  &&!n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.hasOneChild())    {    if(n.hasChildren()  &&!n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	79	None	add
415	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  if(n.hasChildren()  &&  n.getOneChild())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  if(n.hasChildren()  &&  n.getOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.hasOneChild())    {    if(n.hasChildren()  &&  n.getOneChild())  {	  	non-compiled	[CE]  orphaned  case	79	None	add
416	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  if(n.hasChildren()  &&  n.isOneChild())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  if(n.hasChildren()  &&  n.isOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.hasOneChild())    {    if(n.hasChildren()  &&  n.isOneChild())  {	  	non-compiled	[CE]  orphaned  case	79	None	add
417	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  if(N.hasChildren()  &&  n.hasOneChild())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  if(N.hasChildren()  &&  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.hasOneChild())    {    if(N.hasChildren()  &&  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	79	None	add
418	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	89	None	add
419	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	89	None	add
420	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]        RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	89	None	add
421	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]          RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	89	None	add
422	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    If(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	89	None	add
423	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getfirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getfirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getfirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	89	None	add
424	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(N.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(N.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(N.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	89	None	add
425	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	60	4	replace
426	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.BLOCK)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	60	4	replace
427	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	60	2	replace
428	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	60	2	replace
429	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	60	7	replace
430	[BUG]  [BUGGY]  if(n.getLastChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	60	7	replace
431	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	49	None	add
432	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()!=  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()!=  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()!=  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	49	None	add
433	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	49	None	add
434	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  >=  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  >=  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()  >=  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	49	None	add
435	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
436	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	49	None	add
437	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	49	None	add
438	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	82	2	replace
439	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	82	2	replace
440	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.hasOneChild())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	82	4	replace
441	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.hasOneChild())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	82	4	replace
442	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	82	4	replace
443	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	82	4	replace
444	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()!=  Token.BLOCK  ||  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	82	2	replace
445	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.hasChildren()  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()!=  Token.BLOCK  ||  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	82	2	replace
446	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasNoOpStatements())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasNoOpStatements())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasNoOpStatements())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
447	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasFirstChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasFirstChild())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
448	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (!n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild()))  {	  if    (!n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	128	None	replace
449	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (!n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {	  if    (!n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild()))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	128	None	replace
450	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (!n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n))  {	  if    (!n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	128	None	replace
451	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (!n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType()))  {	  if    (!n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	128	None	replace
452	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	106	None	add
453	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()!=  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()!=  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.getType()!=  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	106	None	add
454	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  If(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  If(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasChildren())    {    If(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  ';'  expected	106	None	add
455	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  >=  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  >=  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.getType()  >=  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	106	None	add
456	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  >>  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  >>  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.getType()  >>  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	106	None	add
457	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  ==  Token.NAME  ||  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  ==  Token.NAME  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.getType()  ==  Token.NAME  ||  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	106	None	add
458	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BREAK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BREAK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(N.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	170	6	replace
459	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BREAK)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BREAK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BREAK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(N.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	170	6	replace
460	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isBlockDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isBlockDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  NodeUtil.isBlockDeclaration(n))  {	  if    (n.hasChildren()    ||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
461	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	112	None	add
462	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren())  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    if(n.getType()!=  Token.BLOCK  &&  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	112	None	add
463	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  If(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  If(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    If(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {	  	non-compiled	[CE]  ';'  expected	112	None	add
464	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  if(n.getType()  >=  Token.BLOCK  &&  n.hasChildren())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  if(n.getType()  >=  Token.BLOCK  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    if(n.getType()  >=  Token.BLOCK  &&  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	112	None	add
465	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  if(n.getType()  >>  Token.BLOCK  &&  n.hasChildren())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  if(n.getType()  >>  Token.BLOCK  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    if(n.getType()  >>  Token.BLOCK  &&  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	112	None	add
466	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  if(n.getType()  [BUGGY]  Token.BLOCK  &&  n.hasChildren())  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  if(n.getType()  [BUGGY]  Token.BLOCK  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    if(n.getType()  [BUGGY]  Token.BLOCK  &&  n.hasChildren())  {	  	non-compiled	[CE]  ')'  expected	112	None	add
467	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  &&  n.hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	137	6	replace
468	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  &&  n.hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	137	6	replace
469	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  ||  n.hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	137	2	replace
470	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  ||  n.hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	137	2	replace
471	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()  ==  null  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getLastChild()  ==  null  ||  n.hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	137	2	replace
472	[BUG]  [BUGGY]  if(n.getLastChild()  ==  null  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()  ==  null  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getLastChild()  ==  null  ||  n.hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	137	2	replace
473	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	137	6	replace
474	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	137	6	replace
475	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getParent()  ==  null  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getParent()  ==  null  ||  n.hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	137	2	replace
476	[BUG]  [BUGGY]  if(n.getParent()  ==  null  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getParent()  ==  null  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getParent()  ==  null  ||  n.hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	137	2	replace
477	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	52	7	replace
478	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	52	7	replace
479	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(!n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	52	6	replace
480	[BUG]  [BUGGY]  if(!n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	52	6	replace
481	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(!n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	52	7	replace
482	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	52	7	replace
483	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(!n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	52	7	replace
484	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	52	7	replace
485	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	103	2	replace
486	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	103	2	replace
487	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.NAME  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	103	6	replace
488	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	103	6	replace
489	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	103	6	replace
490	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	103	6	replace
491	[BUG]  [BUGGY]  If(n.hasChildren()  ||  n.hasChildren())  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  If(n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	If(n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    If(n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  ';'  expected	66	None	replace
492	[BUG]  [BUGGY]  if(n.hasChildren())  {  If(n.hasChildren()  ||  n.hasChildren())  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren())  {  If(n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren())  {  If(n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    If(n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  ';'  expected	66	None	replace
493	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  If(n.hasChildren()  ||  n.hasChildren())  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  If(n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME)  {  If(n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    If(n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  ';'  expected	66	None	replace
494	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  ||  n.hasChildren())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    If(n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  ';'  expected	66	None	replace
495	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK)  {  If(n.hasChildren()  ||  n.hasChildren())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK)  {  If(n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK)  {  If(n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    If(n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  ';'  expected	66	None	replace
496	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||!removeNoOpStatements)  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||!removeNoOpStatements)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||!removeNoOpStatements)  {	  if(n.hasFirstChild()    &&!removeNoOpStatements)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
497	[BUG]  [BUGGY]  if(removeNoOpStatements.hasFirstChild()  &&!removeNoOpStatements)  {  [CE]  boolean  cannot  be  dereferenced  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements.hasFirstChild()  &&!removeNoOpStatements)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements.hasFirstChild()  &&!removeNoOpStatements)  {	  if(n.hasFirstChild()    &&!removeNoOpStatements)    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	12	None	replace
498	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  removeNoOpStatements)  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  removeNoOpStatements)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  removeNoOpStatements)  {	  if(n.hasFirstChild()    &&!removeNoOpStatements)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
499	[BUG]  [BUGGY]  if(n.getFirstChild()  &&!removeNoOpStatements)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  &&!removeNoOpStatements)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  &&!removeNoOpStatements)  {	  if(n.hasFirstChild()    &&!removeNoOpStatements)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	12	None	replace
500	[BUG]  [BUGGY]  if(n.hasNext()  &&!removeNoOpStatements)  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasNext()  &&!removeNoOpStatements)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasNext()  &&!removeNoOpStatements)  {	  if(n.hasFirstChild()    &&!removeNoOpStatements)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
501	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	39	None	add
502	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())    {    If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {	  	non-compiled	[CE]  ';'  expected	39	None	add
503	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())    {    if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	39	None	add
504	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  if  (N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  if  (N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())    {    if  (N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	39	None	add
505	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  if  (NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  if  (NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())    {    if  (NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	39	None	add
506	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	159	None	add
507	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	159	None	add
508	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    If(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	159	None	add
509	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()  >=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()  >=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getFirstChild()  >=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	159	None	add
510	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	159	None	add
511	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()  >>  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()  >>  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getFirstChild()  >>  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	159	None	add
512	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	159	None	add
513	[BUG]  [BUGGY]  Node  next  =  n.getLastChild();  [CE]  'else'  without  'if'  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  next  =  n.getLastChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  next  =  n.getLastChild();	  Node    next    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
514	[BUG]  [BUGGY]  Node  next  =  gNode.getNext();  [CE]  'else'  without  'if'  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  next  =  gNode.getNext();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  next  =  gNode.getNext();	  Node    next    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
515	[BUG]  [BUGGY]  Node  next  =  n.getFirstChild();  [CE]  'else'  without  'if'  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  next  =  n.getFirstChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  next  =  n.getFirstChild();	  Node    next    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
516	[BUG]  [BUGGY]  Node  next  =  n.getNext()  +  1;  [CE]  'else'  without  'if'  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  next  =  n.getNext()  +  1;  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  next  =  n.getNext()  +  1;	  Node    next    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
517	[BUG]  [BUGGY]  Node  next  =  n.getParent();  [CE]  'else'  without  'if'  [FE]                                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  next  =  n.getParent();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  next  =  n.getParent();	  Node    next    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
518	[BUG]  [BUGGY]  Node  next  =  n.getPrevious();  [CE]  'else'  without  'if'  [FE]                                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  next  =  n.getPrevious();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  next  =  n.getPrevious();	  Node    next    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
519	[BUG]  [BUGGY]  Node  n  =  outEdges.getLastChild();  [CE]  'else'  without  'if'  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  n  =  outEdges.getLastChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  outEdges.getLastChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
520	[BUG]  [BUGGY]  Node  n  =  node.getLastChild();  [CE]  'else'  without  'if'  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  n  =  node.getLastChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  node.getLastChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
521	[BUG]  [BUGGY]  Node  n  =  outEdges.getFirstChild();  [CE]  'else'  without  'if'  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  n  =  outEdges.getFirstChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  outEdges.getFirstChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
522	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	163	None	add
523	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	163	None	add
524	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	163	None	add
525	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	163	None	add
526	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	163	None	add
527	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	163	None	add
528	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getfirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getfirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getfirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	163	None	add
529	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	165	None	add
530	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	165	None	add
531	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	165	None	add
532	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  >=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	165	None	add
533	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getLastChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	165	None	add
534	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getfirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getfirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getfirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	165	None	add
535	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	55	None	add
536	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	55	None	add
537	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	55	None	add
538	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	55	None	add
539	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  >=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  >=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()  >=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	55	None	add
540	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	55	None	add
541	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	55	None	add
542	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
543	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasNext())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
544	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
545	[BUG]  [BUGGY]  if(n.hasChildren()  &&  gNode.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  gNode.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  gNode.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
546	[BUG]  [BUGGY]  if(n.hasChildren()  &&  node.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  node.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  node.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol  node	192	None	replace
547	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  parent.hasNext())  {  [CE]  cannot  find  symbol  parent  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  parent.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  parent.hasNext())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol  parent	192	None	replace
548	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	102	None	add
549	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  If(n.hasChildren()  &&  n.hasChildren())  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  If(n.hasChildren()  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.hasChildren())    {    If(n.hasChildren()  &&  n.hasChildren())  {	  	non-compiled	[CE]  ';'  expected	102	None	add
550	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  if(!n.hasChildren()  &&  n.hasChildren())  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  if(!n.hasChildren()  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.hasChildren())    {    if(!n.hasChildren()  &&  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	102	None	add
551	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  if(N.hasChildren()  &&  n.hasChildren())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  if(N.hasChildren()  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.hasChildren())    {    if(N.hasChildren()  &&  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	102	None	add
552	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  if(n.hasChildren()  &&!n.hasChildren())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  if(n.hasChildren()  &&!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.hasChildren())    {    if(n.hasChildren()  &&!n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	102	None	add
553	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  if(n.hasChildren()  &&  t.hasChildren())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  if(n.hasChildren()  &&  t.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.hasChildren())    {    if(n.hasChildren()  &&  t.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	102	None	add
554	[BUG]  [BUGGY]  if(n.hasChildren())  {  if(!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren())  {  if(!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren())  {  if(!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	28	None	replace
555	[BUG]  [BUGGY]  if(n.hasChildren())  {  if(!n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren())  {  if(!n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren())  {  if(!n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	28	None	replace
556	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	28	None	replace
557	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	46	4	replace
558	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	46	4	replace
559	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	46	6	replace
560	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	46	6	replace
561	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	46	2	replace
562	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	46	2	replace
563	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.GETPROP)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.GETPROP)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	46	6	replace
564	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.GETPROP)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.GETPROP)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	46	6	replace
565	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	42	4	replace
566	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	42	4	replace
567	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getNext().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	42	4	replace
568	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getNext().getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getNext().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	42	4	replace
569	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	61	None	add
570	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()!=  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()!=  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()!=  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	61	None	add
571	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	61	None	add
572	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
573	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  >=  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  >=  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()  >=  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	61	None	add
574	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	61	None	add
575	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	61	None	add
576	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	151	None	add
577	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	151	None	add
578	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	151	None	add
579	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()  >=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()  >=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getFirstChild()  >=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	151	None	add
580	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	151	None	add
581	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	151	None	add
582	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()  >>  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()  >>  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getFirstChild()  >>  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	151	None	add
583	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME)  {  if(n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    n!n.hasChildren())    {    	non-compiled	[CE]  orphaned  case	68	None	replace
584	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    n!n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	68	2	replace
585	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    n!n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	68	2	replace
586	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	44	2	replace
587	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	44	2	replace
588	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	44	4	replace
589	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	44	4	replace
590	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	44	2	replace
591	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	44	2	replace
592	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	44	6	replace
593	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	44	6	replace
594	[BUG]  [BUGGY]  if(n.getFirstChild()  ||!n.hasChildren())  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ||!n.hasChildren())  {	  if(n.hasFirstChild()    ||!n.hasChildren())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	141	None	replace
595	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&!n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&!n.hasChildren())  {	  if(n.hasFirstChild()    ||!n.hasChildren())    {    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
596	[BUG]  [BUGGY]  if(n.hasLastChild()  ||!n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasLastChild()  ||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasLastChild()  ||!n.hasChildren())  {	  if(n.hasFirstChild()    ||!n.hasChildren())    {    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
597	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild())  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild())  {	  if(n.hasChildren()    ||    n.getFirstChild())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	92	None	replace
598	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getFirstChild())  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getFirstChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getFirstChild())  {	  if(n.hasChildren()    ||    n.getFirstChild())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	92	None	replace
599	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	167	None	replace
600	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  n))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  n))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	167	None	replace
601	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  null))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  null))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  null))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	167	None	replace
602	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  n.getType()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  n.getType()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  n.getType()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	167	None	replace
603	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  outEdges))  {  [CE]  cannot  find  symbol  outEdges  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  outEdges))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  outEdges))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n.getLastChild()))    {    	non-compiled	[CE]  cannot  find  symbol  outEdges	167	None	replace
604	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  this))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  this))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  this))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	167	None	replace
605	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  case  Token.BLOCK))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  case  Token.BLOCK))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  case  Token.BLOCK))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
606	[BUG]  [BUGGY]  if(n.hasChildren()  ||  removeNoOpStatements.hasNext())  {  [CE]  boolean  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  removeNoOpStatements.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  removeNoOpStatements.hasNext())  {	  if(n.hasChildren()    ||    noOpStatements.hasNext())    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	143	None	replace
607	[BUG]  [BUGGY]  If(n.hasChildren()  ||  n.hasOneChild())  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  If(n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	If(n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    If(n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  ';'  expected	22	None	replace
608	[BUG]  [BUGGY]  if(n.hasChildren())  {  If(n.hasChildren()  ||  n.hasOneChild())  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren())  {  If(n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren())  {  If(n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    If(n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  ';'  expected	22	None	replace
609	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  If(n.hasChildren()  ||  n.hasOneChild())  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  If(n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME)  {  If(n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    If(n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  ';'  expected	22	None	replace
610	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasNoOpStatements())  {  If(n.hasChildren()  ||  n.hasOneChild())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasNoOpStatements())  {  If(n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasNoOpStatements())  {  If(n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    If(n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  ';'  expected	22	None	replace
611	[BUG]  [BUGGY]  If(n.hasChildren()  &&  n.hasOneChild())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  If(n.hasChildren()  &&  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	If(n.hasChildren()  &&  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    If(n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  ';'  expected	22	None	replace
612	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	180	None	add
613	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	180	None	add
614	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]        RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  >=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	180	None	add
615	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  >>  Token.BLOCK)  {  [CE]  orphaned  case  [FE]          RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  >>  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  >>  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	180	None	add
616	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]            RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	180	None	add
617	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  If(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  If(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    If(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	180	None	add
618	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getfirstChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getfirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getfirstChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	180	None	add
619	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild();  [CE]  'else'  without  'if'  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  n  =  node.getFirstChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  node.getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
620	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	45	None	add
621	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	45	None	add
622	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    If(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
623	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  >=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  >=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getLastChild().getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	45	None	add
624	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  >>  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  >>  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getLastChild().getType()  >>  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	45	None	add
625	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
626	[BUG]  [BUGGY]  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
627	[BUG]  [BUGGY]  if(n.hasChildren())  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren())  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren())  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
628	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getNext())  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.getNext())  {	  if(n.hasChildren()    ||    n.getNext())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	119	None	replace
629	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getNext().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.getNext())    {    	compilable	  [FE]  RuntimeException  	119	4	replace
630	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getNext().getType()  ==  Token.BLOCK)  {  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getNext().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.getNext())    {    	compilable	  [FE]  RuntimeException  	119	4	replace
631	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getNext().getNext())  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getNext().getNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getNext().getNext())  {	  if(n.hasChildren()    ||    n.getNext())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	119	None	replace
632	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getParent())  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getParent())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getParent())  {	  if(n.hasChildren()    ||    n.getNext())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	119	None	replace
633	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getNext()  ==  null)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getNext()  ==  null)  {	  if(n.hasChildren()    ||    n.getNext())    {    	compilable	  [FE]  AssertionFailedError  	119	2	replace
634	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getNext()  ==  null)  {  [FE]  AssertionFailedError  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getNext()  ==  null)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getNext()  ==  null)  {	  if(n.hasChildren()    ||    n.getNext())    {    	compilable	  [FE]  AssertionFailedError  	119	2	replace
635	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	181	4	replace
636	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	181	4	replace
637	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	181	2	replace
638	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	181	2	replace
639	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	181	4	replace
640	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()!=  Token.BLOCK)  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	181	4	replace
641	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	181	2	replace
642	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	181	2	replace
643	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	181	4	replace
644	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()!=  Token.BLOCK)  {  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	181	4	replace
645	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isExpressionNode(n))    {    if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {	  	non-compiled	[CE]  orphaned  case	35	None	add
646	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  If  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  If  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isExpressionNode(n))    {    If  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {	  	non-compiled	[CE]  ';'  expected	35	None	add
647	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  if  (!n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  if  (!n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isExpressionNode(n))    {    if  (!n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {	  	non-compiled	[CE]  orphaned  case	35	None	add
648	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  if  (N.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  if  (N.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isExpressionNode(n))    {    if  (N.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {	  	non-compiled	[CE]  orphaned  case	35	None	add
649	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  <  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  <  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isExpressionNode(n))    {    if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  <	  	non-compiled	[CE]  illegal  start  of  type	35	None	add
650	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	154	7	replace
651	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	154	7	replace
652	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(!n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	154	6	replace
653	[BUG]  [BUGGY]  if(!n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	154	6	replace
654	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.GETPROP  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	154	6	replace
655	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.GETPROP  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	154	6	replace
656	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(!n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	154	7	replace
657	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	154	7	replace
658	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&  nodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&  nodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(n.hasChildren()  &&  nodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    nodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	155	None	replace
659	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  &&  nodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  &&  nodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  &&  nodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    nodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	155	None	replace
660	[BUG]  [BUGGY]  if  (NodeUtil.hasChildren()  &&  NodeUtil.isBlank(n))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (NodeUtil.hasChildren()  &&  NodeUtil.isBlank(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (NodeUtil.hasChildren()  &&  NodeUtil.isBlank(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isBlank(n))    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
661	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	136	None	add
662	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  if(n.getFirstChild()!=  null  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  if(n.getFirstChild()!=  null  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    if(n.getFirstChild()!=  null  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	136	None	add
663	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  If(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  If(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    If(n.getFirstChild()  ==  null  ||  n.hasChildren())  {	  	non-compiled	[CE]  ';'  expected	136	None	add
664	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  Node  n  =  n.getFirstChild();  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  Node  n  =  n.getFirstChild();  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    Node  n  =  n.getFirstChild();  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	136	None	add
665	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  if(n.getFirstChild()  >=  null  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  if(n.getFirstChild()  >=  null  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    if(n.getFirstChild()  >=  null  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	136	None	add
666	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  Node  n  =  n.getFirstChild();  if(n.getFirstChild()!=  null  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  Node  n  =  n.getFirstChild();  if(n.getFirstChild()!=  null  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    Node  n  =  n.getFirstChild();  if(n.getFirstChild()!=  null  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	136	None	add
667	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	110	None	add
668	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  If(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  If(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    If(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  ';'  expected	110	None	add
669	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  if(!n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    if(!n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	110	None	add
670	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  if(N.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  if(N.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    if(N.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	110	None	add
671	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  if(n.isChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  if(n.isChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    if(n.isChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	110	None	add
672	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	54	2	replace
673	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	54	2	replace
674	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.CALL  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	109	2	replace
675	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  ||  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	109	2	replace
676	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  &&  n.hasChildren())  {	  if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	109	6	replace
677	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  &&  n.hasChildren())  {	  if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	109	6	replace
678	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	109	2	replace
679	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	109	2	replace
680	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()!=  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	109	2	replace
681	[BUG]  [BUGGY]  if(n.getType()!=  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()!=  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	109	2	replace
682	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	109	2	replace
683	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	109	2	replace
684	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  orphaned  case	33	None	add
685	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  If  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  If  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    If  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  ';'  expected	33	None	add
686	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  &&  nodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  &&  nodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (!n.hasChildren()  &&  nodeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  orphaned  case	33	None	add
687	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(cfgNode))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(cfgNode))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(cfgNode))  {	  	non-compiled	[CE]  orphaned  case	33	None	add
688	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {	  	non-compiled	[CE]  orphaned  case	33	None	add
689	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	161	None	add
690	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	161	None	add
691	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	161	None	add
692	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  >=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	161	None	add
693	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	161	None	add
694	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getfirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getfirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getfirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	161	None	add
695	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.hasFirstChild()    &&    n.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
696	[BUG]  [BUGGY]  if(n.getFirstChild()  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.hasFirstChild()    &&    n.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	11	None	replace
697	[BUG]  [BUGGY]  if(n.isFirstChild()  &&  n.getType()  ==  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.isFirstChild()  &&  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.isFirstChild()  &&  n.getType()  ==  Token.BLOCK)  {	  if(n.hasFirstChild()    &&    n.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
698	[BUG]  [BUGGY]  if(n.hasLastChild()  &&  n.getType()  ==  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasLastChild()  &&  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasLastChild()  &&  n.getType()  ==  Token.BLOCK)  {	  if(n.hasFirstChild()    &&    n.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
699	[BUG]  [BUGGY]  if(gNode.hasFirstChild()  &&  n.getType()  ==  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(gNode.hasFirstChild()  &&  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(gNode.hasFirstChild()  &&  n.getType()  ==  Token.BLOCK)  {	  if(n.hasFirstChild()    &&    n.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
700	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  n.getType()!=  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&  n.getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  n.getType()!=  Token.BLOCK)  {	  if(n.hasFirstChild()    &&    n.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
701	[BUG]  [BUGGY]  if(n.getFirstChild()  ||  n.getLastChild().getString().equals( "BLOCK "))  {  [CE]  bad  operand  types  for  binary  operator  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ||  n.getLastChild().getString().equals( "BLOCK "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ||  n.getLastChild().getString().equals( "BLOCK "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "BLOCK   "))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	185	None	replace
702	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  n.getLastChild().getString().equals( "BLOCK   "))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&  n.getLastChild().getString().equals( "BLOCK   "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  n.getLastChild().getString().equals( "BLOCK   "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "BLOCK   "))    {    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
703	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "BLOCK_WARNING "))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "BLOCK_WARNING "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "BLOCK_WARNING "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "BLOCK   "))    {    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
704	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "BLOCK_DECEMBER "))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "BLOCK_DECEMBER "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "BLOCK_DECEMBER "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "BLOCK   "))    {    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
705	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()!=  Token.BLOCK  &&  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	113	6	replace
706	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()!=  Token.BLOCK  &&  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	113	6	replace
707	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()!=  Token.BLOCK  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	113	2	replace
708	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()!=  Token.BLOCK  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	113	2	replace
709	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FOR  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.FOR  &&  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	113	6	replace
710	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FOR  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FOR  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FOR  &&  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	113	6	replace
711	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))    {    	compilable	  [FE]  AssertionFailedError  	132	2	replace
712	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))    {    	compilable	  [FE]  AssertionFailedError  	132	2	replace
713	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&!NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))    {    	compilable	  [FE]  AssertionFailedError  	132	6	replace
714	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&!NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))    {    	compilable	  [FE]  AssertionFailedError  	132	6	replace
715	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  ||  NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))    {    	compilable	  [FE]  AssertionFailedError  	132	2	replace
716	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))    {    	compilable	  [FE]  AssertionFailedError  	132	2	replace
717	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	148	None	add
718	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	148	None	add
719	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  	non-compiled	[CE]  ';'  expected	148	None	add
720	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	148	None	add
721	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	148	None	add
722	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    if(n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	148	None	add
723	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.FUNCTION  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.FUNCTION  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	148	None	add
724	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()    &&    n.getFirstChild().getType()    >>    Token.BLOCK)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
725	[BUG]  [BUGGY]  if(n.getFirstChild()  ||  n.hasChildren())  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ||  n.hasChildren())  {	  if(n.hasFirstChild()    ||    n.hasChildren())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	10	None	replace
726	[BUG]  [BUGGY]  if(n.hasLastChild()  ||  n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasLastChild()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasLastChild()  ||  n.hasChildren())  {	  if(n.hasFirstChild()    ||    n.hasChildren())    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
727	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().hasChildren())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().hasChildren())  {	  if(n.hasFirstChild()    ||    n.hasChildren())    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
728	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasOneChild()  ||  n.hasChildren())  {	  if(n.hasFirstChild()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	10	2	replace
729	[BUG]  [BUGGY]  if(n.hasOneChild()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasOneChild()  ||  n.hasChildren())  {	  if(n.hasFirstChild()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	10	2	replace
730	[BUG]  [BUGGY]  if(n.isFirstChild()  ||  n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.isFirstChild()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.isFirstChild()  ||  n.hasChildren())  {	  if(n.hasFirstChild()    ||    n.hasChildren())    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
731	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getLastChild();  [CE]  'else'  without  'if'  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  nextCfgNode  =  n.getLastChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  nextCfgNode  =  n.getLastChild();	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
732	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfg.getNext();  [CE]  'else'  without  'if'  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  nextCfgNode  =  curCfg.getNext();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  nextCfgNode  =  curCfg.getNext();	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
733	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfgNode.getNext();  [CE]  'else'  without  'if'  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  nextCfgNode  =  curCfgNode.getNext();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  nextCfgNode  =  curCfgNode.getNext();	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
734	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getFirstChild();  [CE]  'else'  without  'if'  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  nextCfgNode  =  n.getFirstChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  nextCfgNode  =  n.getFirstChild();	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
735	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext()  +  1;  [CE]  'else'  without  'if'  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  nextCfgNode  =  n.getNext()  +  1;  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  nextCfgNode  =  n.getNext()  +  1;	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
736	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getParent();  [CE]  'else'  without  'if'  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  nextCfgNode  =  n.getParent();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  nextCfgNode  =  n.getParent();	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
737	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	108	None	add
738	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()!=  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()!=  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.getType()!=  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	108	None	add
739	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  If(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  If(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    If(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  ';'  expected	108	None	add
740	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  >=  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  >=  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.getType()  >=  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	108	None	add
741	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  >>  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  >>  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.getType()  >>  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	108	None	add
742	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  ==  Token.CALL  ||  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  ==  Token.CALL  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.getType()  ==  Token.CALL  ||  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	108	None	add
743	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
744	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	41	None	add
745	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	41	None	add
746	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]        RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	41	None	add
747	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]          RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	41	None	add
748	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	41	None	add
749	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getfirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getfirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  ||  n.getfirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	41	None	add
750	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  >>  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  >>  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()  >>  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	41	None	add
751	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	64	4	replace
752	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	64	4	replace
753	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	64	4	replace
754	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	64	4	replace
755	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	64	6	replace
756	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	64	6	replace
757	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	64	4	replace
758	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	64	4	replace
759	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	64	2	replace
760	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	64	2	replace
761	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	64	4	replace
762	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasChildren())  {  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	64	4	replace
763	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	147	6	replace
764	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	147	6	replace
765	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	147	6	replace
766	[BUG]  [BUGGY]  if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	147	6	replace
767	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	147	6	replace
768	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	147	6	replace
769	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	147	2	replace
770	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	147	2	replace
771	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	147	4	replace
772	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	147	4	replace
773	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildents())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasChildents())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasChildents())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    n.hasChildents())    {    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
774	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	146	None	add
775	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	146	None	add
776	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  If(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    If(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	146	None	add
777	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()  >=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()  >=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getFirstChild()  >=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	146	None	add
778	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	146	None	add
779	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	146	None	add
780	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()  >>  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()  >>  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getFirstChild()  >>  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	146	None	add
781	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	121	6	replace
782	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	121	6	replace
783	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getType()!=  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	121	2	replace
784	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()!=  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getType()!=  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	121	2	replace
785	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	121	2	replace
786	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	121	2	replace
787	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  if(n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  if(n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.GETPROP)  {  if(n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    (n.hasChildren()))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
788	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    (n.hasChildren()))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
789	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  ||  (n.hasChildren()))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  ||  (n.hasChildren()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  ||  (n.hasChildren()))  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    (n.hasChildren()))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
790	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    (n.hasChildren()))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
791	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	105	2	replace
792	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.hasChildren())  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	105	2	replace
793	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	105	2	replace
794	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	105	2	replace
795	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()!=  Token.BLOCK  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	105	2	replace
796	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()!=  Token.BLOCK  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	105	2	replace
797	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FOR  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.FOR  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	105	2	replace
798	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FOR  &&  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FOR  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FOR  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	105	2	replace
799	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.NAME  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	107	2	replace
800	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	107	2	replace
801	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.hasChildren())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	107	6	replace
802	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.hasChildren())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	107	6	replace
803	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()!=  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	107	2	replace
804	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()!=  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	107	2	replace
805	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()!=  Token.NAME  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	107	2	replace
806	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()!=  Token.NAME  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	107	2	replace
807	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.isExtern()  ||  n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.isExtern()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME  &&  n.isExtern()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
808	[BUG]  [BUGGY]  if(n.hasChildren()  &&  gNode.hasNext())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  gNode.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  gNode.hasNext())  {	  if(n.hasChildren()    ||    gNode.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
809	[BUG]  [BUGGY]  if(n.getChildren()  ||  gNode.hasNext())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getChildren()  ||  gNode.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getChildren()  ||  gNode.hasNext())  {	  if(n.hasChildren()    ||    gNode.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
810	[BUG]  [BUGGY]  if(n.hasChildren()  ||  gNode.getType()  ==  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  gNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  gNode.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    gNode.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
811	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	166	4	replace
812	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	166	4	replace
813	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	166	7	replace
814	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getLastChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	166	7	replace
815	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()    &&    n.getFirstChild().gettype()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	179	6	replace
816	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()    &&    n.getFirstChild().gettype()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	179	6	replace
817	[BUG]  [BUGGY]  if(outEdges.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  outEdges  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(outEdges.hasChildren()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(outEdges.hasChildren()  ||  n.hasNext())  {	  if(gNode.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol  outEdges	118	None	replace
818	[BUG]  [BUGGY]  if(r.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  r  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(r.hasChildren()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(r.hasChildren()  ||  n.hasNext())  {	  if(gNode.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol  r	118	None	replace
819	[BUG]  [BUGGY]  if(s.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  s  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(s.hasChildren()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(s.hasChildren()  ||  n.hasNext())  {	  if(gNode.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol  s	118	None	replace
820	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	47	None	add
821	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	47	None	add
822	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	47	None	add
823	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  >>  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	47	None	add
824	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.FUNCTION)    {    If(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
825	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getLastChild().getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	47	None	add
826	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  [Delete]  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  [Delete]  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  [Delete]  Token.FUNCTION)  {	  	non-compiled	[CE]  ')'  expected	47	None	add
827	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	135	2	replace
828	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	135	2	replace
829	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()!=  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getLastChild()!=  null  &&  n.hasChildren())  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	135	2	replace
830	[BUG]  [BUGGY]  if(n.getLastChild()!=  null  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()!=  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getLastChild()!=  null  &&  n.hasChildren())  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	135	2	replace
831	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getParent()!=  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getParent()!=  null  &&  n.hasChildren())  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	135	2	replace
832	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getParent()!=  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getParent()!=  null  &&  n.hasChildren())  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	135	2	replace
833	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    If    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	27	None	replace
834	[BUG]  [BUGGY]  if(n.hasChildren())  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren())  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren())  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    If    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	27	None	replace
835	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    If    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	27	None	replace
836	[BUG]  [BUGGY]  if(n.hasChildren())  {  If  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren())  {  If  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren())  {  If  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    If    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	27	None	replace
837	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  If  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  If  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  If  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    If    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	27	None	replace
838	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	152	6	replace
839	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	152	6	replace
840	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	152	6	replace
841	[BUG]  [BUGGY]  if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	152	6	replace
842	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	152	6	replace
843	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	152	6	replace
844	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	152	4	replace
845	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	152	4	replace
846	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	152	2	replace
847	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	152	2	replace
848	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	162	2	replace
849	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	162	2	replace
850	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	162	6	replace
851	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	162	6	replace
852	[BUG]  [BUGGY]  if(gNode.hasFirstChild()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(gNode.hasFirstChild()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(gNode.hasFirstChild()  ||  n.hasNext())  {	  if(n.hasFirstChild()    ||    gNode.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
853	[BUG]  [BUGGY]  if(n.getFirstChild()  ||  gNode.hasNext())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ||  gNode.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ||  gNode.hasNext())  {	  if(n.hasFirstChild()    ||    gNode.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
854	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  gNode.hasNext())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&  gNode.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  gNode.hasNext())  {	  if(n.hasFirstChild()    ||    gNode.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
855	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  gNode.getNext())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  gNode.getNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  gNode.getNext())  {	  if(n.hasFirstChild()    ||    gNode.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
856	[BUG]  [BUGGY]  if(n.getFirstChild()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ||  n.hasNext())  {	  if(n.hasFirstChild()    ||    gNode.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
857	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	149	4	replace
858	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	149	4	replace
859	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	149	6	replace
860	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	149	6	replace
861	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	149	4	replace
862	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	149	4	replace
863	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	149	4	replace
864	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.FUNCTION  ||  n.hasChildren())  {  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	149	4	replace
865	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	149	2	replace
866	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	149	2	replace
867	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getLastChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	149	4	replace
868	[BUG]  [BUGGY]  if(n.getLastChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getLastChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	149	4	replace
869	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  fallThrough))  {  [CE]  cannot  find  symbol  fallThrough  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  fallThrough))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  fallThrough))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    outEdges))    {    	non-compiled	[CE]  cannot  find  symbol  fallThrough	73	None	replace
870	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  getCfgNode()))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  getCfgNode()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  getCfgNode()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    outEdges))    {    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
871	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  case  Token.BLOCK))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  case  Token.BLOCK))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  case  Token.BLOCK))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    outEdges))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
872	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  throwable))  {  [CE]  cannot  find  symbol  throwable  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  throwable))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  throwable))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    outEdges))    {    	non-compiled	[CE]  cannot  find  symbol  throwable	73	None	replace
873	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  break))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  break))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  break))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    outEdges))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
874	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  this))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  this))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  this))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    outEdges))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	73	None	replace
875	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	104	None	add
876	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.getType()!=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	104	None	add
877	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  If(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  If(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasChildren())    {    If(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  ';'  expected	104	None	add
878	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  >=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  >=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.getType()  >=  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	104	None	add
879	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  >>  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  >>  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.getType()  >>  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	104	None	add
880	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	104	None	add
881	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	58	6	replace
882	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	58	6	replace
883	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	160	7	replace
884	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	160	7	replace
885	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	160	4	replace
886	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	160	4	replace
887	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	160	6	replace
888	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	160	6	replace
889	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getLastChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	160	6	replace
890	[BUG]  [BUGGY]  if(n.getLastChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getLastChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	160	6	replace
891	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	160	6	replace
892	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	160	6	replace
893	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	160	6	replace
894	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	160	6	replace
895	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	190	None	add
896	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	190	None	add
897	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  If(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	190	None	add
898	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()  >=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()  >=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getFirstChild()  >=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	190	None	add
899	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	190	None	add
900	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()  >>  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()  >>  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getFirstChild()  >>  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	190	None	add
901	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	190	None	add
902	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	111	2	replace
903	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	111	2	replace
904	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	111	2	replace
905	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	111	2	replace
906	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	111	2	replace
907	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	111	2	replace
908	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasNext()  ||  n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasNext()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasNext()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
909	[BUG]  [BUGGY]  if(n.isBlock()  ||  n.hasChildren()  ||  n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.isBlock()  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.isBlock()  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
910	[BUG]  [BUGGY]  if(n.hasChildren()  ||  first.hasNext())  {  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  first.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  first.hasNext())  {	  if(n.hasChildren()    ||    parent.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol  first	173	None	replace
911	[BUG]  [BUGGY]  if(n.isFirstChild()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.isFirstChild()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.isFirstChild()  ||  n.hasNext())  {	  if(n.hasFirstChild()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
912	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getNext())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getNext())  {	  if(n.hasFirstChild()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
913	[BUG]  [BUGGY]  if(n.hasOneChild()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasOneChild()  ||  n.hasNext())  {	  if(n.hasFirstChild()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
914	[BUG]  [BUGGY]  if(n.hasNext()  ||  n.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasNext()  ||  n.hasFirstChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasNext()  ||  n.hasFirstChild())  {	  if(n.hasFirstChild()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
915	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [CE]  orphaned  case  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {	  	non-compiled	[CE]  orphaned  case	138	None	add
916	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(n.hasChildren()  ||  n.getLastChild().hasChildren())  {  [CE]  orphaned  case  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(n.hasChildren()  ||  n.getLastChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    if(n.hasChildren()  ||  n.getLastChild().hasChildren())  {	  	non-compiled	[CE]  orphaned  case	138	None	add
917	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  If(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  If(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    If(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {	  	non-compiled	[CE]  ';'  expected	138	None	add
918	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(n.hasChildren()  ||  n.getfirstChild().hasChildren())  {  [CE]  orphaned  case  [FE]          RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(n.hasChildren()  ||  n.getfirstChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    if(n.hasChildren()  ||  n.getfirstChild().hasChildren())  {	  	non-compiled	[CE]  orphaned  case	138	None	add
919	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(N.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [CE]  orphaned  case  [FE]            RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(N.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    if(N.hasChildren()  ||  n.getFirstChild().hasChildren())  {	  	non-compiled	[CE]  orphaned  case	138	None	add
920	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(n.hasChildren()  ||  n.getNext().hasChildren())  {  [CE]  orphaned  case  [FE]              RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(n.hasChildren()  ||  n.getNext().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    if(n.hasChildren()  ||  n.getNext().hasChildren())  {	  	non-compiled	[CE]  orphaned  case	138	None	add
921	[BUG]  [BUGGY]  if(n.getFirstChild()  ||  n.getLastChild().getString().equals( "prototype "))  {  [CE]  bad  operand  types  for  binary  operator  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ||  n.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ||  n.getLastChild().getString().equals( "prototype "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	189	None	replace
922	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  n.getLastChild().getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&  n.getLastChild().getString().equals( "prototype   "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  n.getLastChild().getString().equals( "prototype   "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
923	[BUG]  [BUGGY]  if(n.isFirstChild()  ||  n.getLastChild().getString().equals( "prototype "))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.isFirstChild()  ||  n.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.isFirstChild()  ||  n.getLastChild().getString().equals( "prototype "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
924	[BUG]  [BUGGY]  if(n.hasLastChild()  ||  n.getLastChild().getString().equals( "prototype "))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasLastChild()  ||  n.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasLastChild()  ||  n.getLastChild().getString().equals( "prototype "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
925	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ".prototype "))  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ".prototype "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ".prototype "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
926	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().contains( "prototype "))  {  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().contains( "prototype "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().contains( "prototype "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
927	[BUG]  [BUGGY]  if(n.getChildren()  ||  n.hasLastChild())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getChildren()  ||  n.hasLastChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getChildren()  ||  n.hasLastChild())  {	  if(n.getChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
928	[BUG]  [BUGGY]  if(n.getChildren()  ||  n.hasOneChild())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getChildren()  ||  n.hasOneChild())  {	  if(n.getChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
929	[BUG]  [BUGGY]  if(gNode.getChildren()  ||  n.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(gNode.getChildren()  ||  n.hasFirstChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(gNode.getChildren()  ||  n.hasFirstChild())  {	  if(n.getChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
930	[BUG]  [BUGGY]  if(n.getChildren()  ||  outEdges.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getChildren()  ||  outEdges.hasFirstChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getChildren()  ||  outEdges.hasFirstChild())  {	  if(n.getChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
931	[BUG]  [BUGGY]  if(gNode.getChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(gNode.getChildren()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(gNode.getChildren()  ||  n.hasNext())  {	  if(n.getChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
932	[BUG]  [BUGGY]  if(n.getChildren()  ||  outEdges.hasNext())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getChildren()  ||  outEdges.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getChildren()  ||  outEdges.hasNext())  {	  if(n.getChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
933	[BUG]  [BUGGY]  if(n.getChildren()  ||!n.hasNext())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getChildren()  ||!n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getChildren()  ||!n.hasNext())  {	  if(n.getChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
934	[BUG]  [BUGGY]  if(n.getChildren()  ||  parent.hasNext())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getChildren()  ||  parent.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getChildren()  ||  parent.hasNext())  {	  if(n.getChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
935	[BUG]  [BUGGY]  if(n.getChildren()  ||  n.isLocal())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getChildren()  ||  n.isLocal())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getChildren()  ||  n.isLocal())  {	  if(n.getChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
936	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.BLOCK  &&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.getType()  ==  Token.BLOCK  &&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.getType()  ==  Token.BLOCK  &&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {	  if    (n.hasChildren()    ||    tryRemoveUnconditionalBranching(n.getFirstChild()))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	75	None	replace
937	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getFirstChild(),  n))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getFirstChild(),  n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getFirstChild(),  n))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	78	None	replace
938	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  null))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  null))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  null))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	78	None	replace
939	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  first))  {  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  first))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  first))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n))    {    	non-compiled	[CE]  cannot  find  symbol  first	78	None	replace
940	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  outEdges))  {  [CE]  cannot  find  symbol  outEdges  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  outEdges))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  outEdges))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n))    {    	non-compiled	[CE]  cannot  find  symbol  outEdges	78	None	replace
941	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  rootNode))  {  [CE]  cannot  find  symbol  rootNode  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  rootNode))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  rootNode))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n))    {    	non-compiled	[CE]  cannot  find  symbol  rootNode	78	None	replace
942	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(gNode.getFirstChild(),  n))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(gNode.getFirstChild(),  n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(gNode.getFirstChild(),  n))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
943	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()    &&!n.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  orphaned  case	169	None	replace
944	[BUG]  [BUGGY]  if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()    &&!n.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	169	None	replace
945	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getLastChild())  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getLastChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getLastChild())  {	  if(n.hasChildren()    ||    n.hasLastChild())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	91	None	replace
946	[BUG]  [BUGGY]  if(gNode.hasChildren()  ||  n.hasLastChild())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(gNode.hasChildren()  ||  n.hasLastChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(gNode.hasChildren()  ||  n.hasLastChild())  {	  if(n.hasChildren()    ||    n.hasLastChild())    {    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
947	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasLastChild())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasLastChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasLastChild())  {	  if(n.hasChildren()    ||    n.hasLastChild())    {    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
948	[BUG]  [BUGGY]  if(n.getFirstChild()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if(n.hasFirstChild()    ||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	140	None	replace
949	[BUG]  [BUGGY]  if(n.hasLastChild()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasLastChild()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasLastChild()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if(n.hasFirstChild()    ||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
950	[BUG]  [BUGGY]  if(n.hasNext()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasNext()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasNext()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if(n.hasFirstChild()    ||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
951	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  NodeUtil.isExpressionNode(n))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  NodeUtil.isExpressionNode(n))  {	  if(n.hasFirstChild()    ||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
952	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  NodeUtil.isBlockDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  NodeUtil.isBlockDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  NodeUtil.isBlockDeclaration(n))  {	  if(n.hasFirstChild()    ||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
953	[BUG]  [BUGGY]  n  =  n.getLastChild();  [CE]  'else'  without  'if'  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  n  =  n.getLastChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	n  =  n.getLastChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	168	None	replace
954	[BUG]  [BUGGY]  n  =  gNode.getFirstChild();  [CE]  'else'  without  'if'  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  n  =  gNode.getFirstChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	n  =  gNode.getFirstChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	168	None	replace
955	[BUG]  [BUGGY]  n  =  n.getNext();  [CE]  'else'  without  'if'  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  n  =  n.getNext();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	n  =  n.getNext();	  n    =    n.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	168	None	replace
956	[BUG]  [BUGGY]  n  =  gNode.getLastChild();  [CE]  'else'  without  'if'  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  n  =  gNode.getLastChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	n  =  gNode.getLastChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	168	None	replace
957	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	87	None	add
958	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	87	None	add
959	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  If(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  If(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    If(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
960	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  >=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  >=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  >=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	87	None	add
961	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.gettype()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.gettype()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.gettype()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	87	None	add
962	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  >>  Token.BLOCK)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  >>  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  >>  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	87	None	add
963	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLACK)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLACK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLACK)  {	  	non-compiled	[CE]  orphaned  case	87	None	add
964	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.BLOCK  &&  tryRemoveUnconditionalBranching(n.getLastChild()))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.getType()  ==  Token.BLOCK  &&  tryRemoveUnconditionalBranching(n.getLastChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.getType()  ==  Token.BLOCK  &&  tryRemoveUnconditionalBranching(n.getLastChild()))  {	  if    (n.hasChildren()    ||    tryRemoveUnconditionalBranching(n.getLastChild()))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	70	None	replace
965	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	183	5	replace
966	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	183	5	replace
967	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	183	2	replace
968	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	183	2	replace
969	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	183	4	replace
970	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	183	4	replace
971	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	183	4	replace
972	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.NAME)  {  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getLastChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	183	4	replace
973	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	183	4	replace
974	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.NAME)  {  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	183	4	replace
975	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	183	4	replace
976	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()  ==  Token.NAME)  {  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getNext().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	compilable	  [FE]  RuntimeException  	183	4	replace
977	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	48	6	replace
978	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	48	6	replace
979	[BUG]  [BUGGY]  if(n.getFirstChild()  ||  n.getLastChild().getString().equals( "clear "))  {  [CE]  bad  operand  types  for  binary  operator  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ||  n.getLastChild().getString().equals( "clear "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ||  n.getLastChild().getString().equals( "clear "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "clear   "))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	186	None	replace
980	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ".clear "))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ".clear "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ".clear "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "clear   "))    {    	non-compiled	[CE]  cannot  find  symbol	186	None	replace
981	[BUG]  [BUGGY]  if(n.isFirstChild()  ||  n.getLastChild().getString().equals( "clear "))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.isFirstChild()  ||  n.getLastChild().getString().equals( "clear "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.isFirstChild()  ||  n.getLastChild().getString().equals( "clear "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "clear   "))    {    	non-compiled	[CE]  cannot  find  symbol	186	None	replace
982	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  n.getLastChild().getString().equals( "clear   "))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&  n.getLastChild().getString().equals( "clear   "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  n.getLastChild().getString().equals( "clear   "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "clear   "))    {    	non-compiled	[CE]  cannot  find  symbol	186	None	replace
983	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	115	None	add
984	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	115	None	add
985	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  If(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  If(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    If(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	115	None	add
986	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getType()  >=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getType()  >=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.getType()  >=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	115	None	add
987	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getType()  >>  Token.BLOCK)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.getType()  >>  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.getType()  >>  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	115	None	add
988	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.gettype()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  ||  n.gettype()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  ||  n.gettype()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	115	None	add
989	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    ||    NodeUtil.isFunctionDeclaration(n))    {    if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  orphaned  case	31	None	add
990	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  If  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  If  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    ||    NodeUtil.isFunctionDeclaration(n))    {    If  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  ';'  expected	31	None	add
991	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    ||    NodeUtil.isFunctionDeclaration(n))    {    if  (!n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  orphaned  case	31	None	add
992	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (N.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (N.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    ||    NodeUtil.isFunctionDeclaration(n))    {    if  (N.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  orphaned  case	31	None	add
993	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  <  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  <  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    ||    NodeUtil.isFunctionDeclaration(n))    {    if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  <	  	non-compiled	[CE]  illegal  start  of  type	31	None	add
994	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	99	None	replace
995	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    tryRemoveUnconditionalBranching(n.getFirstChild()))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	130	None	replace
996	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n.getLastChild()))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n.getLastChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n.getLastChild()))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    tryRemoveUnconditionalBranching(n.getFirstChild()))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	130	None	replace
997	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n,  outEdges.getFirstChild()))  {  [CE]  cannot  find  symbol  outEdges  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n,  outEdges.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n,  outEdges.getFirstChild()))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    tryRemoveUnconditionalBranching(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  outEdges	130	None	replace
998	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  tryRemoveUnconditionalBranching(n.getFirstChild()))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    tryRemoveUnconditionalBranching(n.getFirstChild()))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	130	None	replace
999	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n.getFirstChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	184	None	replace
1000	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild(),  n.getType()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild(),  n.getType()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild(),  n.getType()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n.getFirstChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	184	None	replace
1001	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild(),  null))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild(),  null))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild(),  null))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n.getFirstChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	184	None	replace
1002	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild(),  n))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild(),  n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild(),  n))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n.getFirstChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	184	None	replace
1003	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getNext()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getNext()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getNext()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n.getFirstChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	184	None	replace
1004	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  n.getFirstChild()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  n.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  n.getFirstChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n.getFirstChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	184	None	replace
1005	[BUG]  [BUGGY]  Node  first  =  node.getLastChild();  [CE]  'else'  without  'if'  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  first  =  node.getLastChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  node.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
1006	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n))  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (!n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n))  {	  	non-compiled	[CE]  orphaned  case	33	None	add
1007	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  &&  NOdeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  &&  NOdeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (!n.hasChildren()  &&  NOdeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  orphaned  case	33	None	add
1008	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(!n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(!n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(!n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(!n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  orphaned  case	176	None	replace
1009	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(!n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(!n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	176	4	replace
1010	[BUG]  [BUGGY]  if(!n.hasChildren()  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(!n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	176	4	replace
1011	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(N.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(N.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(N.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	85	None	add
1012	[BUG]  [BUGGY]  if(gNode.hasChildren()  &&  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(gNode.hasChildren()  &&  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(gNode.hasChildren()  &&  n.hasNext())  {	  if(n.hasChildren()    &&    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
1013	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null)  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	65	2	replace
1014	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null)  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	65	2	replace
1015	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null)  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	65	6	replace
1016	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null)  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	65	6	replace
1017	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  NodeUtil.mayHaveSideEffects(n))  {	  if(n.hasChildren()    ||    NodeUtil.hasNext())    {    	compilable	  [FE]  AssertionFailedError  	145	2	replace
1018	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.mayHaveSideEffects(n))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  NodeUtil.mayHaveSideEffects(n))  {	  if(n.hasChildren()    ||    NodeUtil.hasNext())    {    	compilable	  [FE]  AssertionFailedError  	145	2	replace
1019	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isLetterOrDigit(n))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isLetterOrDigit(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  NodeUtil.isLetterOrDigit(n))  {	  if(n.hasChildren()    ||    NodeUtil.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
1020	[BUG]  [BUGGY]  if(n.hasChildren()  ||  gNode.hasOneChild())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  gNode.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  gNode.hasOneChild())  {	  if(n.hasChildren()    ||    gNode.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
1021	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL)  {  if(!n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL)  {  if(!n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL)  {  if(!n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(!n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  orphaned  case	171	None	replace
1022	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(!n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(!n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	171	2	replace
1023	[BUG]  [BUGGY]  if(!n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(!n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	171	2	replace
1024	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	111	2	replace
1025	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	111	2	replace
1026	[BUG]  [BUGGY]  if(n.hasChildren()  ||  gNode.hasNoOpStatements())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  gNode.hasNoOpStatements())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  gNode.hasNoOpStatements())  {	  if(n.hasChildren()    ||    n.hasNoOpStatements())    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1027	[BUG]  [BUGGY]  if(n.hasChildren()  ||  outEdges.hasNoOpStatements())  {  [CE]  cannot  find  symbol  outEdges  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  outEdges.hasNoOpStatements())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  outEdges.hasNoOpStatements())  {	  if(n.hasChildren()    ||    n.hasNoOpStatements())    {    	non-compiled	[CE]  cannot  find  symbol  outEdges	156	None	replace
1028	[BUG]  [BUGGY]  if(n.hasChildren()  ||  gNode.canBeBlock())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  gNode.canBeBlock())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  gNode.canBeBlock())  {	  if(n.hasChildren()    ||    n.canBeBlock())    {    	non-compiled	[CE]  cannot  find  symbol	174	None	replace
1029	[BUG]  [BUGGY]  if(n.hasChildren()  ||  outEdges.canBeBlock())  {  [CE]  cannot  find  symbol  outEdges  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  outEdges.canBeBlock())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  outEdges.canBeBlock())  {	  if(n.hasChildren()    ||    n.canBeBlock())    {    	non-compiled	[CE]  cannot  find  symbol  outEdges	174	None	replace
1030	[BUG]  [BUGGY]  if(n.canBeBlock()  ||  n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.canBeBlock()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.canBeBlock()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.canBeBlock())    {    	non-compiled	[CE]  cannot  find  symbol	174	None	replace
1031	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  if(N.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  if(N.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    if(N.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	108	None	add
1032	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n!hasChildren())  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n!hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n!hasChildren())  {	  	non-compiled	[CE]  ')'  expected	108	None	add
1033	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n.getFirstChild()))  {	  if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	34	None	replace
1034	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (!n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {	  if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	34	6	replace
1035	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (!n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {	  if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	34	6	replace
1036	[BUG]  [BUGGY]  if(n.hasChildren()  ||  null.hasNext())  {  [CE]  <null>  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  null.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  null.hasNext())  {	  if(n.hasChildren()    ||    noOpStatements.hasNext())    {    	non-compiled	[CE]  <null>  cannot  be  dereferenced	143	None	replace
1037	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	166	7	replace
1038	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	166	7	replace
1039	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  ||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasOneChild()  ||!n.hasChildren())  {	  if(n.hasFirstChild()    ||!n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	141	4	replace
1040	[BUG]  [BUGGY]  if(n.hasOneChild()  ||!n.hasChildren())  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  ||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasOneChild()  ||!n.hasChildren())  {	  if(n.hasFirstChild()    ||!n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	141	4	replace
1041	[BUG]  [BUGGY]  if(n.isFirstChild()  ||!n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.isFirstChild()  ||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.isFirstChild()  ||!n.hasChildren())  {	  if(n.hasFirstChild()    ||!n.hasChildren())    {    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
1042	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||!n.hasChildren())  {	  if(n.hasFirstChild()    ||!n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	141	2	replace
1043	[BUG]  [BUGGY]  if(n.hasChildren()  ||!n.hasChildren())  {  [FE]  RuntimeException  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||!n.hasChildren())  {	  if(n.hasFirstChild()    ||!n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	141	2	replace
1044	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.GETPROP)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getType()  ==  Token.GETPROP)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
1045	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.GETPROP)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getType()  ==  Token.GETPROP)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
1046	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.NEW)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getType()  ==  Token.NEW)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
1047	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.NEW)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.NEW)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getType()  ==  Token.NEW)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
1048	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	54	2	replace
1049	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	54	2	replace
1050	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	54	4	replace
1051	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	54	4	replace
1052	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasFirstChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasFirstChild())  {	  if(n.hasChildren()    &&    n.hasOneChild())    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
1053	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(!n.hasChildren()  &&  n.hasOneChild())  {	  if(n.hasChildren()    &&    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	80	6	replace
1054	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()  &&  n.hasOneChild())  {	  if(n.hasChildren()    &&    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	80	6	replace
1055	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isBlock(n)||  NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isBlock(n)||  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isBlock(n)||  NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isBlock(n))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
1056	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	154	6	replace
1057	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	154	6	replace
1058	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(!n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	154	7	replace
1059	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	154	7	replace
1060	[BUG]  [BUGGY]  if(NodeUtil.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(NodeUtil.hasChildren()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(NodeUtil.hasChildren()  ||  n.hasNext())  {	  if(gNode.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
1061	[BUG]  [BUGGY]  if(!gNode.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!gNode.hasChildren()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!gNode.hasChildren()  ||  n.hasNext())  {	  if(gNode.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
1062	[BUG]  [BUGGY]  if(n.hasChildren()  ||  genNode.hasNext())  {  [CE]  cannot  find  symbol  genNode  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  genNode.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  genNode.hasNext())  {	  if(gNode.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol  genNode	118	None	replace
1063	[BUG]  [BUGGY]  if(n.isChildren()  ||  gNode.hasNext())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.isChildren()  ||  gNode.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.isChildren()  ||  gNode.hasNext())  {	  if(gNode.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
1064	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasNext()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasNext()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasNext()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
1065	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasFirstChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasFirstChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasFirstChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
1066	[BUG]  [BUGGY]  if(gNode.hasFirstChild()  ||  n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(gNode.hasFirstChild()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(gNode.hasFirstChild()  ||  n.hasChildren())  {	  if(n.hasFirstChild()    ||    n.hasChildren())    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
1067	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasNoOpStatements())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasNoOpStatements())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasNoOpStatements())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
1068	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  gNode))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  gNode))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  gNode))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	78	None	replace
1069	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  fallThrough))  {  [CE]  cannot  find  symbol  fallThrough  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  fallThrough))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  fallThrough))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n))    {    	non-compiled	[CE]  cannot  find  symbol  fallThrough	78	None	replace
1070	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  ==  Token.NAME  &&!n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.getType()  ==  Token.NAME  &&!n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.getType()  ==  Token.NAME  &&!n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	106	None	add
1071	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  if(N.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  if(N.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasChildren())    {    if(N.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	106	None	add
1072	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))    {    	compilable	  [FE]  AssertionFailedError  	132	2	replace
1073	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))    {    	compilable	  [FE]  AssertionFailedError  	132	2	replace
1074	[BUG]  [BUGGY]  if(n.getChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
1075	[BUG]  [BUGGY]  if(gNode.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(gNode.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(gNode.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
1076	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getfirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getfirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getfirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	190	None	add
1077	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	45	None	add
1078	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FOR)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FOR)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FOR)  {	  	non-compiled	[CE]  orphaned  case	45	None	add
1079	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasFirstChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasFirstChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasFirstChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
1080	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasNext()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasNext()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasNext()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
1081	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(removeNoOpStatements)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	95	2	replace
1082	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	95	2	replace
1083	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  if  (n.hasChildren()  &&  nodeUtil.isExpressionNode(n))  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  if  (n.hasChildren()  &&  nodeUtil.isExpressionNode(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isExpressionNode(n))    {    if  (n.hasChildren()  &&  nodeUtil.isExpressionNode(n))  {	  	non-compiled	[CE]  orphaned  case	35	None	add
1084	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n);  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n))  {  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n);  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isExpressionNode(n))    {    if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n);	  	non-compiled	[CE]  ')'  expected	35	None	add
1085	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	42	2	replace
1086	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	42	2	replace
1087	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	46	6	replace
1088	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	46	6	replace
1089	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	46	6	replace
1090	[BUG]  [BUGGY]  if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	46	6	replace
1091	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()  ==  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getLastChild()  ==  null  &&  n.hasChildren())  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	135	6	replace
1092	[BUG]  [BUGGY]  if(n.getLastChild()  ==  null  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()  ==  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getLastChild()  ==  null  &&  n.hasChildren())  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	135	6	replace
1093	[BUG]  [BUGGY]  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren()  &&  nodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  nodeUtil  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren()  &&  nodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren()  &&  nodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    nodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  nodeUtil	155	None	replace
1094	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	113	6	replace
1095	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	113	6	replace
1096	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n!=  null)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n!=  null)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	113	2	replace
1097	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n!=  null)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n!=  null)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n!=  null)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	113	2	replace
1098	[BUG]  [BUGGY]  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    If    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	27	None	replace
1099	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  If  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  If  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  If  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    If    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	27	None	replace
1100	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getString()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getString()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getString()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getNext()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	133	None	replace
1101	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  outEdges))  {  [CE]  cannot  find  symbol  outEdges  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  outEdges))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  outEdges))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n,    n.getLastChild()))    {    	non-compiled	[CE]  cannot  find  symbol  outEdges	72	None	replace
1102	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(gNode,  n.getLastChild()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(gNode,  n.getLastChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(gNode,  n.getLastChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n,    n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	72	None	replace
1103	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  this))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  this))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild(),  this))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n,    n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	72	None	replace
1104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  &&!removeNoOpStatements)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasOneChild()  &&!removeNoOpStatements)  {	  if(n.hasFirstChild()    &&!removeNoOpStatements)    {    	compilable	  [FE]  AssertionFailedError  	12	6	replace
1105	[BUG]  [BUGGY]  if(n.hasOneChild()  &&!removeNoOpStatements)  {  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  &&!removeNoOpStatements)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasOneChild()  &&!removeNoOpStatements)  {	  if(n.hasFirstChild()    &&!removeNoOpStatements)    {    	compilable	  [FE]  AssertionFailedError  	12	6	replace
1106	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  if(n.getChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  if(n.getChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    if(n.getChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	110	None	add
1107	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren());  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren());  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren());	  	non-compiled	[CE]  orphaned  case	110	None	add
1108	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.gettype()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.gettype()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  ||  n.gettype()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	120	None	add
1109	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLCK)  {	  	non-compiled	[CE]  orphaned  case	153	None	add
1110	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  NodeUtil.mayHaveSideEffects(n))  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
1111	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
1112	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.mayHaveSideEffects(n))  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
1113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	58	3	replace
1114	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	58	3	replace
1115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	56	6	replace
1116	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	56	6	replace
1117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	52	6	replace
1118	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	52	6	replace
1119	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getfirstChild().getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  if(n.hasChildren()  &&  n.getfirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.FUNCTION)    {    if(n.hasChildren()  &&  n.getfirstChild().getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	47	None	add
1120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	164	6	replace
1121	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	164	6	replace
1122	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  fallThrough))  {  [CE]  cannot  find  symbol  fallThrough  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  fallThrough))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  fallThrough))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n.getLastChild()))    {    	non-compiled	[CE]  cannot  find  symbol  fallThrough	167	None	replace
1123	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  1)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  1)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  1)  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n.getLastChild()))    {    	non-compiled	[CE]  ')'  expected	167	None	replace
1124	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)&&  tryRemoveUnconditionalBranching(n.getLastChild()))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)&&  tryRemoveUnconditionalBranching(n.getLastChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)&&  tryRemoveUnconditionalBranching(n.getLastChild()))  {	  if    (n.hasChildren()    &&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	36	None	replace
1125	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild())||  outEdges.size()  ==  1)  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild())||  outEdges.size()  ==  1)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getLastChild())||  outEdges.size()  ==  1)  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild())||    outEdges.size()    ==    1)    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	129	None	replace
1126	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ".prototype. "))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ".prototype. "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ".prototype. "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "boolean   "))    {    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
1127	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "boolean "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "boolean "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "boolean   "))    {    	compilable	  [FE]  RuntimeException  	188	9	replace
1128	[BUG]  [BUGGY]  if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "boolean "))  {  [FE]  RuntimeException  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "boolean "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "boolean "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "boolean   "))    {    	compilable	  [FE]  RuntimeException  	188	9	replace
1129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	149	2	replace
1130	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	149	2	replace
1131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	149	2	replace
1132	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	149	2	replace
1133	[BUG]  [BUGGY]  Node  first  =  n.getPreviousChild();  [CE]  'else'  without  'if'  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  first  =  n.getPreviousChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  n.getPreviousChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
1134	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	55	None	add
1135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getParent()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getParent()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	147	6	replace
1136	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getParent()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getParent()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	147	6	replace
1137	[BUG]  [BUGGY]  Node  nextCfgNode  =  gNode.getNext();  [CE]  'else'  without  'if'  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  nextCfgNode  =  gNode.getNext();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  nextCfgNode  =  gNode.getNext();	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
1138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getNext()  ==  null  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getNext()  ==  null  ||  n.hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	137	2	replace
1139	[BUG]  [BUGGY]  if(n.getNext()  ==  null  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getNext()  ==  null  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getNext()  ==  null  ||  n.hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	137	2	replace
1140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.GETPROP)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	62	6	replace
1141	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.GETPROP)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	62	6	replace
1142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()    &&    n.getFirstChild().getType()    >=    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	4	3	replace
1143	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()    &&    n.getFirstChild().getType()    >=    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	4	3	replace
1144	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if(NodeUtil.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if(NodeUtil.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if(NodeUtil.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (NodeUtil.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	177	None	replace
1145	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild(),  outEdges))  {  [CE]  cannot  find  symbol  outEdges  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild(),  outEdges))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild(),  outEdges))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  outEdges	184	None	replace
1146	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild(),  this))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild(),  this))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild(),  this))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n.getFirstChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	184	None	replace
1147	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	161	None	add
1148	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLACK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLACK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLACK)  {	  	non-compiled	[CE]  orphaned  case	161	None	add
1149	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "declaration.blk "))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "declaration.blk "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "declaration.blk "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "blk   "))    {    	non-compiled	[CE]  cannot  find  symbol	187	None	replace
1150	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getParent()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getParent()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getParent()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n.getType()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	74	None	replace
1151	[BUG]  [BUGGY]  if(n.hasChildren()  ||  gNode.hasLastChild())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  gNode.hasLastChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  gNode.hasLastChild())  {	  if(n.hasChildren()    ||    n.hasLastChild())    {    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1152	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.hasLastChild())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.hasLastChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  NodeUtil.hasLastChild())  {	  if(n.hasChildren()    ||    n.hasLastChild())    {    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.EMPTY)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getType()  ==  Token.EMPTY)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	121	2	replace
1154	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.EMPTY)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.EMPTY)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getType()  ==  Token.EMPTY)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	121	2	replace
1155	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getNext().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getNext().hasChildren())  {	  if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  RuntimeException  	139	4	replace
1156	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getNext().hasChildren())  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getNext().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getNext().hasChildren())  {	  if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  RuntimeException  	139	4	replace
1157	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isBlank(n)||  NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isBlank(n)||  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isBlank(n)||  NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isBlank(n))    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
1158	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NEW)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.NEW)  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(N.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	67	6	replace
1159	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NEW)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NEW)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NEW)  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(N.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	67	6	replace
1160	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  if(n.getType()  ==  Token.BLOCK  &&  nhasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  if(n.getType()  ==  Token.BLOCK  &&  nhasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    if(n.getType()  ==  Token.BLOCK  &&  nhasChildren())  {	  	non-compiled	[CE]  orphaned  case	112	None	add
1161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getLastChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	191	7	replace
1162	[BUG]  [BUGGY]  if(n.getLastChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getLastChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	191	7	replace
1163	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	59	None	add
1164	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&!n.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  if(n.hasChildren()  &&!n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()  &&!n.getLastChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	59	None	add
1165	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  gNode))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  gNode))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  gNode))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	71	None	replace
1166	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n),  break;  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n),  break;  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n),  break;	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n))    {    	non-compiled	[CE]  ')'  expected	71	None	replace
1167	[BUG]  [BUGGY]  if(n.isFirstChild()  ||  n.getLastChild().getString().equals( "BLOCK "))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.isFirstChild()  ||  n.getLastChild().getString().equals( "BLOCK "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.isFirstChild()  ||  n.getLastChild().getString().equals( "BLOCK "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "BLOCK   "))    {    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
1168	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "BLOCK_ "))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "BLOCK_ "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "BLOCK_ "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "BLOCK   "))    {    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
1169	[BUG]  [BUGGY]  Node  n  =  first.getLastChild();  [CE]  'else'  without  'if'  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  n  =  first.getLastChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  first.getLastChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
1170	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  root))  {  [CE]  cannot  find  symbol  root  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  root))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  root))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    outEdges))    {    	non-compiled	[CE]  cannot  find  symbol  root	73	None	replace
1171	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  null))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  null))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  null))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    outEdges))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	73	None	replace
1172	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  getDestination()))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  getDestination()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  getDestination()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    outEdges))    {    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
1173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	3	6	replace
1174	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	3	6	replace
1175	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  break;  [CE]  'else'  without  'if'  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  first  =  n.removeFirstChild();  break;  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  n.removeFirstChild();  break;	  Node    first    =    n.getLastChild();    break;    	non-compiled	[CE]  'else'  without  'if'	19	None	replace
1176	[BUG]  [BUGGY]  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {  [CE]  cannot  find  symbol  p  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(p))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(p))    {    	non-compiled	[CE]  cannot  find  symbol  p	30	None	replace
1177	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  if(n.getfirstChild()  ==  null  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  if(n.getfirstChild()  ==  null  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    if(n.getfirstChild()  ==  null  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	136	None	add
1178	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  if(n.getFirstChild()  ==  null  ||  n!hasChildren())  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  if(n.getFirstChild()  ==  null  ||  n!hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    if(n.getFirstChild()  ==  null  ||  n!hasChildren())  {	  	non-compiled	[CE]  ')'  expected	136	None	add
1179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	162	6	replace
1180	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isExpressionNode(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	162	6	replace
1181	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.EMPTY  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.EMPTY  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	50	6	replace
1182	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EMPTY  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.EMPTY  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.EMPTY  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	50	6	replace
1183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	48	2	replace
1184	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	48	2	replace
1185	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
1186	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null)  {  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
1187	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.getChildren())  {	  	non-compiled	[CE]  orphaned  case	102	None	add
1188	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  if(n!Children()  &&  n.hasChildren())  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  if(n!Children()  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.hasChildren())    {    if(n!Children()  &&  n.hasChildren())  {	  	non-compiled	[CE]  ')'  expected	102	None	add
1189	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	151	None	add
1190	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLACK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLACK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLACK)  {	  	non-compiled	[CE]  orphaned  case	151	None	add
1191	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasFirstChild()  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasFirstChild()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasFirstChild()  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
1192	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	88	2	replace
1193	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	88	2	replace
1194	[BUG]  [BUGGY]  Node  n  =  gNode.getNumberOfElements();  [CE]  'else'  without  'if'  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  n  =  gNode.getNumberOfElements();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  gNode.getNumberOfElements();	  Node    n    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	157	None	replace
1195	[BUG]  [BUGGY]  Node  n  =  gNode.getNumber();  [CE]  'else'  without  'if'  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  n  =  gNode.getNumber();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  gNode.getNumber();	  Node    n    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	157	None	replace
1196	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FOR)  {  [CE]  orphaned  case  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FOR)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FOR)  {	  	non-compiled	[CE]  orphaned  case	89	None	add
1197	[BUG]  [BUGGY]  Node  first  =  n.getfirstChild();  [CE]  'else'  without  'if'  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  first  =  n.getfirstChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  n.getfirstChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
1198	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  gNode.getType()  ==  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&  gNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  gNode.getType()  ==  Token.BLOCK)  {	  if(n.hasFirstChild()    &&    n.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
1199	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasFirstChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasFirstChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasFirstChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
1200	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasNext()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasNext()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasNext()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
1201	[BUG]  [BUGGY]  if  (!n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getLastChild()))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getLastChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (!n.hasChildren()  ||  tryRemoveUnconditionalBranching(n.getLastChild()))  {	  if    (!n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild()))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	128	None	replace
1202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	60	6	replace
1203	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	60	6	replace
1204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	60	6	replace
1205	[BUG]  [BUGGY]  if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getLastChild()!=  null  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	60	6	replace
1206	[BUG]  [BUGGY]  if(gNode.hasChildren()  ||  n.hasOneChild())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(gNode.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(gNode.hasChildren()  ||  n.hasOneChild())  {	  if(gNode.hasChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
1207	[BUG]  [BUGGY]  if(!gNode.hasChildren()  ||  n.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!gNode.hasChildren()  ||  n.hasFirstChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!gNode.hasChildren()  ||  n.hasFirstChild())  {	  if(gNode.hasChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
1208	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    (n.hasChildren()))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
1209	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  ||  (n.hasChildren()))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  ||  (n.hasChildren()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(n.hasChildren()  ||  (n.hasChildren()))  {	  if(n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()    ||    (n.hasChildren()))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
1210	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getNext())  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getFirstChild().getNext())  {	  if(n.hasChildren()    ||    n.getNext())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	119	None	replace
1211	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	64	2	replace
1212	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	64	2	replace
1213	[BUG]  [BUGGY]  Node  n  =  nextCfgNode.getFirstChild();  [CE]  'else'  without  'if'  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  n  =  nextCfgNode.getFirstChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  nextCfgNode.getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
1214	[BUG]  [BUGGY]  Node  n  =  nodes.getFirstChild();  [CE]  'else'  without  'if'  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  n  =  nodes.getFirstChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  nodes.getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
1215	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(N.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(N.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    if(N.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	83	None	add
1216	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()  ==  Token.NAME  &&!n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(n.getType()  ==  Token.NAME  &&!n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    if(n.getType()  ==  Token.NAME  &&!n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	83	None	add
1217	[BUG]  [BUGGY]  Node  next  =  n.getNextChild();  [CE]  'else'  without  'if'  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  next  =  n.getNextChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  next  =  n.getNextChild();	  Node    next    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
1218	[BUG]  [BUGGY]  Node  next  =  n.getNextSibling();  [CE]  'else'  without  'if'  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  next  =  n.getNextSibling();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  next  =  n.getNextSibling();	  Node    next    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
1219	[BUG]  [BUGGY]  if(n.hasChildren()  ||  gNode.getNext())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  gNode.getNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  gNode.getNext())  {	  if(n.hasChildren()    ||    gNode.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
1220	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getParent()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getParent()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	160	7	replace
1221	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getParent()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getParent()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	160	7	replace
1222	[BUG]  [BUGGY]  if(NodeUtil.hasFirstChild()  &&  NodeUtil.isFunctionAnalysis(n))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(NodeUtil.hasFirstChild()  &&  NodeUtil.isFunctionAnalysis(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(NodeUtil.hasFirstChild()  &&  NodeUtil.isFunctionAnalysis(n))  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionAnalysis(n))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
1223	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionAnalyzer(n))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionAnalyzer(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  NodeUtil.isFunctionAnalyzer(n))  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionAnalysis(n))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
1224	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  if(N.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  if(N.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    if(N.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	87	None	add
1225	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  ||  (n.hasOneChild()))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  if(n.hasChildren()  ||  (n.hasOneChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  if(n.hasChildren()  ||  (n.hasOneChild()))  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()    ||    (n.hasOneChild()))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
1226	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(N.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(N.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    if(N.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	180	None	add
1227	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  NodeUtil.mayHaveSideEffects(n))  {	  if(n.hasFirstChild()    ||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1228	[BUG]  [BUGGY]  if(gNode.hasFirstChild()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(gNode.hasFirstChild()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(gNode.hasFirstChild()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if(n.hasFirstChild()    ||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1229	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  NodeUtil.isBlock(n))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  NodeUtil.isBlock(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  NodeUtil.isBlock(n))  {	  if(n.hasFirstChild()    ||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1230	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(N.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(N.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    if(N.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	148	None	add
1231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	44	6	replace
1232	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	44	6	replace
1233	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "prototype "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "prototype   "))    {    	compilable	  [FE]  RuntimeException  	189	9	replace
1234	[BUG]  [BUGGY]  if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "prototype "))  {  [FE]  RuntimeException  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "prototype "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "prototype   "))    {    	compilable	  [FE]  RuntimeException  	189	9	replace
1235	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ",prototype "))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ",prototype "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ",prototype "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
1236	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasFirstChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasFirstChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasFirstChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
1237	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasNext()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasNext()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasNext()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
1238	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n.getLastChild()))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n.getLastChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n.getLastChild()))  {	  if    (n.hasChildren()    ||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	32	None	replace
1239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&!NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    ||    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	32	2	replace
1240	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&!NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    ||    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	32	2	replace
1241	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ",clear "))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ",clear "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ",clear "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "clear   "))    {    	non-compiled	[CE]  cannot  find  symbol	186	None	replace
1242	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "clear "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "clear "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "clear   "))    {    	compilable	  [FE]  RuntimeException  	186	9	replace
1243	[BUG]  [BUGGY]  if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "clear "))  {  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "clear "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "clear "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "clear   "))    {    	compilable	  [FE]  RuntimeException  	186	9	replace
1244	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "clock "))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "clock "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "clock "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "clear   "))    {    	non-compiled	[CE]  cannot  find  symbol	186	None	replace
1245	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(!n.hasChildren()  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	103	6	replace
1246	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	103	6	replace
1247	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(!n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [CE]  orphaned  case  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(!n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    if(!n.hasChildren()  ||  n.getFirstChild().hasChildren())  {	  	non-compiled	[CE]  orphaned  case	138	None	add
1248	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(N.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(N.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(N.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	53	None	add
1249	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.getfirstChild()!=  null  &&  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.getfirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.getfirstChild()!=  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	134	None	add
1250	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.getFirstChild()  [Delete]  null  &&  n.hasChildren())  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.getFirstChild()  [Delete]  null  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.getFirstChild()  [Delete]  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  ')'  expected	134	None	add
1251	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  ||  nodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  ||  nodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    ||    NodeUtil.isFunctionDeclaration(n))    {    if  (n.hasChildren()  ||  nodeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  orphaned  case	31	None	add
1252	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  ||  NodeUtil.getFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (n.hasChildren()  ||  NodeUtil.getFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    ||    NodeUtil.isFunctionDeclaration(n))    {    if  (n.hasChildren()  ||  NodeUtil.getFunctionDeclaration(n))  {	  	non-compiled	[CE]  orphaned  case	31	None	add
1253	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getfirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getfirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getfirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	159	None	add
1254	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if  (N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if  (N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if  (N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	163	None	add
1255	[BUG]  [BUGGY]  if(n.hasOneChild()  ||  gNode.hasNext())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  ||  gNode.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasOneChild()  ||  gNode.hasNext())  {	  if(n.hasFirstChild()    ||    gNode.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
1256	[BUG]  [BUGGY]  if(n.isFirstChild()  ||  gNode.hasNext())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.isFirstChild()  ||  gNode.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.isFirstChild()  ||  gNode.hasNext())  {	  if(n.hasFirstChild()    ||    gNode.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
1257	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	146	None	add
1258	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	44	2	replace
1259	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	44	2	replace
1260	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  if  ((  n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  if  ((  n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())    {    if  ((  n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {	  	non-compiled	[CE]  ')'  expected	39	None	add
1261	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "true "))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "true "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( "true "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "boolean   "))    {    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
1262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()!=  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	50	6	replace
1263	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()!=  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()!=  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	50	6	replace
1264	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().contains( "clear "))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().contains( "clear "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().contains( "clear "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "clear   "))    {    	non-compiled	[CE]  cannot  find  symbol	186	None	replace
1265	[BUG]  [BUGGY]  if(n.hasNext()  ||  n.getLastChild().getString().equals( "clear "))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasNext()  ||  n.getLastChild().getString().equals( "clear "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasNext()  ||  n.getLastChild().getString().equals( "clear "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "clear   "))    {    	non-compiled	[CE]  cannot  find  symbol	186	None	replace
1266	[BUG]  [BUGGY]  if(n.hasChildren()  ||  genNode.hasFirstChild())  {  [CE]  cannot  find  symbol  genNode  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  genNode.hasFirstChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  genNode.hasFirstChild())  {	  if(gNode.hasChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol  genNode	94	None	replace
1267	[BUG]  [BUGGY]  if(n.hasChildren()  ||  t.hasFirstChild())  {  [CE]  cannot  find  symbol  t  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  t.hasFirstChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  t.hasFirstChild())  {	  if(gNode.hasChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol  t	94	None	replace
1268	[BUG]  [BUGGY]  if(N.hasChildren()  ||  n.hasFirstChild())  {  [CE]  cannot  find  symbol  N  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(N.hasChildren()  ||  n.hasFirstChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(N.hasChildren()  ||  n.hasFirstChild())  {	  if(gNode.hasChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol  N	94	None	replace
1269	[BUG]  [BUGGY]  Node  first  =  n.getfirstChild();  break;  [CE]  'else'  without  'if'  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  first  =  n.getfirstChild();  break;  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  n.getfirstChild();  break;	  Node    first    =    n.getLastChild();    break;    	non-compiled	[CE]  'else'  without  'if'	19	None	replace
1270	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isLetter(n))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isLetter(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isLetter(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isBlank(n))    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
1271	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isBlank(n)||!n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isBlank(n)||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isBlank(n)||!n.hasChildren())  {	  if    (n.hasChildren()    &&    NodeUtil.isBlank(n))    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
1272	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild())  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild().hasChildren()  ||  n.getFirstChild())  {	  if(n.hasChildren()    ||    n.getFirstChild())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	92	None	replace
1273	[BUG]  [BUGGY]  If  (n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  If  (n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	If  (n.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    If    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	27	None	replace
1274	[BUG]  [BUGGY]  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren())  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	If  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren())  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    If    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	27	None	replace
1275	[BUG]  [BUGGY]  If(n.hasOneChild()  ||  n.hasOneChild())  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  If(n.hasOneChild()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	If(n.hasOneChild()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    If(n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  ';'  expected	22	None	replace
1276	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    If(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	22	4	replace
1277	[BUG]  [BUGGY]  if(n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    If(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	22	4	replace
1278	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isBlock(n)||!n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isBlock(n)||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isBlock(n)||!n.hasChildren())  {	  if    (n.hasChildren()    &&    NodeUtil.isBlock(n))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
1279	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  if(!n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  if(!n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    if(!n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  orphaned  case	182	None	add
1280	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (N.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	29	6	replace
1281	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (N.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	29	6	replace
1282	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.hasChildren())  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (N.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
1283	[BUG]  [BUGGY]  if(n.hasChildren()  ||!n.hasNoOpStatements())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||!n.hasNoOpStatements())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||!n.hasNoOpStatements())  {	  if(n.hasChildren()    ||    n.hasNoOpStatements())    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1284	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getNoOpStatements())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getNoOpStatements())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getNoOpStatements())  {	  if(n.hasChildren()    ||    n.hasNoOpStatements())    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1285	[BUG]  [BUGGY]  if(n.hasChildren()  ||  parent.hasNoOpStatements())  {  [CE]  cannot  find  symbol  parent  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  parent.hasNoOpStatements())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  parent.hasNoOpStatements())  {	  if(n.hasChildren()    ||    n.hasNoOpStatements())    {    	non-compiled	[CE]  cannot  find  symbol  parent	156	None	replace
1286	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ".blk "))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ".blk "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().equals( ".blk "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "blk   "))    {    	non-compiled	[CE]  cannot  find  symbol	187	None	replace
1287	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	147	4	replace
1288	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	147	4	replace
1289	[BUG]  [BUGGY]  If(n.hasChildren()  &&  n.hasChildren())  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  If(n.hasChildren()  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	If(n.hasChildren()  &&  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    If(n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  ';'  expected	66	None	replace
1290	[BUG]  [BUGGY]  If(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  If(n.getFirstChild()  ==  null  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	If(n.getFirstChild()  ==  null  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren())    {    If(n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  ';'  expected	66	None	replace
1291	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getType()  {  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  ||  n.getType()  {  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  ||  n.getType()  {  Token.FUNCTION)  {	  	non-compiled	[CE]  ')'  expected	120	None	add
1292	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getFirstChild()!=  null  &&!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	151	None	add
1293	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	151	None	add
1294	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(N.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(N.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(N.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	151	None	add
1295	[BUG]  [BUGGY]  Node  n  =  nextCfgNode.getLastChild();  [CE]  'else'  without  'if'  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  n  =  nextCfgNode.getLastChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  nextCfgNode.getLastChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
1296	[BUG]  [BUGGY]  Node  n  =  this.nextCfgNode.getLastChild();  [CE]  'else'  without  'if'  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  n  =  this.nextCfgNode.getLastChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  this.nextCfgNode.getLastChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
1297	[BUG]  [BUGGY]  Node  n  =  this.nextCfgNode.getFirstChild();  [CE]  'else'  without  'if'  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  n  =  this.nextCfgNode.getFirstChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  this.nextCfgNode.getFirstChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
1298	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()    ||    n.isOneChild())    {    	compilable	  [FE]  AssertionFailedError  	25	4	replace
1299	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()    ||    n.isOneChild())    {    	compilable	  [FE]  AssertionFailedError  	25	4	replace
1300	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild(),  n.cloneTree()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild(),  n.cloneTree()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getFirstChild(),  n.cloneTree()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n.getFirstChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	184	None	replace
1301	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType(),  BLOCK))  {  [CE]  cannot  find  symbol  BLOCK  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType(),  BLOCK))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  n.getType(),  BLOCK))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    n.getType()))    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	74	None	replace
1302	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  if(!n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  if(!n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasChildren())    {    if(!n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	104	None	add
1303	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  if(N.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  if(N.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasChildren())    {    if(N.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	104	None	add
1304	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	64	2	replace
1305	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	64	2	replace
1306	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	64	4	replace
1307	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	compilable	  [FE]  RuntimeException  	64	4	replace
1308	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  NodeUtil.isLabelFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  NodeUtil.isLabelFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  NodeUtil.isLabelFunctionDeclaration(n))  {	  if(n.hasFirstChild()    ||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1309	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  NodeUtil.isVarDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  NodeUtil.isVarDeclaration(n))  {	  if(n.hasFirstChild()    ||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1310	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(!n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(!n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	89	None	add
1311	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	149	2	replace
1312	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	149	2	replace
1313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	48	2	replace
1314	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	48	2	replace
1315	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	90	4	replace
1316	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	90	4	replace
1317	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasNext()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasNext()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasNext()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
1318	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()  ==  null  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()  ==  null  ||  n.hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	137	2	replace
1319	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()  ==  null  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()  ==  null  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()  ==  null  ||  n.hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	137	2	replace
1320	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	56	6	replace
1321	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	56	6	replace
1322	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if  (N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	161	None	add
1323	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  node.hasNext())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  node.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  node.hasNext())  {	  if(n.hasFirstChild()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
1324	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (!n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  orphaned  case	33	None	add
1325	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  &&  ItemUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!n.hasChildren()  &&  ItemUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (!n.hasChildren()  &&  ItemUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  orphaned  case	33	None	add
1326	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasOneChild()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.NAME  &&  n.hasOneChild()  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	84	4	replace
1327	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasOneChild()  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasOneChild()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME  &&  n.hasOneChild()  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	84	4	replace
1328	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.isSyntheticBlock()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.isSyntheticBlock()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	105	2	replace
1329	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.isSyntheticBlock()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.isSyntheticBlock()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.isSyntheticBlock()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	105	2	replace
1330	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FOR)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getType()  ==  Token.FOR)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	121	2	replace
1331	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FOR)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.FOR)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getType()  ==  Token.FOR)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	121	2	replace
1332	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "BLOCK "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "BLOCK "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "BLOCK   "))    {    	compilable	  [FE]  RuntimeException  	185	9	replace
1333	[BUG]  [BUGGY]  if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "BLOCK "))  {  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "BLOCK "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasOneChild()  ||  n.getLastChild().getString().equals( "BLOCK "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "BLOCK   "))    {    	compilable	  [FE]  RuntimeException  	185	9	replace
1334	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().contains( "BLOCK "))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getString().contains( "BLOCK "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||  n.getLastChild().getString().contains( "BLOCK "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "BLOCK   "))    {    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
1335	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  if(!n.hasChildren()  &&  n.hasOneChild())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  if(!n.hasChildren()  &&  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.hasOneChild())    {    if(!n.hasChildren()  &&  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	79	None	add
1336	[BUG]  [BUGGY]  if(n.hasNext()  ||  n.getLastChild().getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasNext()  ||  n.getLastChild().getString().equals( "prototype   "))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasNext()  ||  n.getLastChild().getString().equals( "prototype   "))  {	  if(n.hasFirstChild()    ||    n.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
1337	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  this))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  this))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  this))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	78	None	replace
1338	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  1))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  1))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n,  1))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	78	None	replace
1339	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(n.hasChildren()  ||!n.getFirstChild().hasChildren())  {  [CE]  orphaned  case  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(n.hasChildren()  ||!n.getFirstChild().hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().hasChildren())    {    if(n.hasChildren()  ||!n.getFirstChild().hasChildren())  {	  	non-compiled	[CE]  orphaned  case	138	None	add
1340	[BUG]  [BUGGY]  n  =  n.removeFirstChild();  [CE]  'else'  without  'if'  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  n  =  n.removeFirstChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	n  =  n.removeFirstChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	168	None	replace
1341	[BUG]  [BUGGY]  n  =  gNode.getNext();  [CE]  'else'  without  'if'  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  n  =  gNode.getNext();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	n  =  gNode.getNext();	  n    =    n.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	168	None	replace
1342	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasNext()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasNext()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasNext()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
1343	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.CATCH)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.getType()  ==  Token.CATCH)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
1344	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.CATCH)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.CATCH)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.getType()  ==  Token.CATCH)  {	  if(n.hasChildren()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
1345	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasNext())  {	  if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
1346	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	111	2	replace
1347	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	111	2	replace
1348	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasNoOpStatements()  ||  n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasNoOpStatements()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasNoOpStatements()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
1349	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	63	None	add
1350	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  if(N.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  if(N.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    if(N.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	63	None	add
1351	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(!n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	85	None	add
1352	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL  &&  n.hasChildren()  ||  n.hasNext())  {	  if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
1353	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasOneChild()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.CALL  &&  n.hasOneChild()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	109	2	replace
1354	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasOneChild()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasOneChild()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL  &&  n.hasOneChild()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	109	2	replace
1355	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasNext()  ||  n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasNext()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.CALL  &&  n.hasNext()  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.CALL    &&    n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
1356	[BUG]  [BUGGY]  Node  n  =  gNode.removeFirstChild();  [CE]  'else'  without  'if'  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  n  =  gNode.removeFirstChild();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  gNode.removeFirstChild();	  Node    n    =    gNode.getLastChild();    	non-compiled	[CE]  'else'  without  'if'	158	None	replace
1357	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  ||  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	46	6	replace
1358	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  ||  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	46	6	replace
1359	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  ||  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	60	6	replace
1360	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  ||  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	60	6	replace
1361	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	165	None	add
1362	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if  (N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if  (N.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	165	None	add
1363	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(!n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(!n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()!=    Token.BLOCK)    {    if(!n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()!=  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	180	None	add
1364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getLastChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	152	6	replace
1365	[BUG]  [BUGGY]  if(n.getLastChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getLastChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getLastChild()  ==  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	152	6	replace
1366	[BUG]  [BUGGY]  if(n.hasNext()  ||  n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasNext()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasNext()  ||  n.hasChildren())  {	  if(n.hasFirstChild()    ||    n.hasChildren())    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
1367	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  [Delete]  Token.BLOCK)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  if(n.hasChildren()  &&  n.getFirstChild().getType()  [Delete]  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.BLOCK)    {    if(n.hasChildren()  &&  n.getFirstChild().getType()  [Delete]  Token.BLOCK)  {	  	non-compiled	[CE]  ')'  expected	57	None	add
1368	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(N.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(N.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    if(N.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	81	None	add
1369	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(!n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  if(!n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    if(!n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  ||  n.hasOneChild())  {	  	non-compiled	[CE]  orphaned  case	81	None	add
1370	[BUG]  [BUGGY]  Node  n  =  nextCfgNode.getNext();  [CE]  'else'  without  'if'  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  n  =  nextCfgNode.getNext();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  n  =  nextCfgNode.getNext();	  Node    n    =    n.getNext();    	non-compiled	[CE]  'else'  without  'if'	157	None	replace
1371	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&!n.hasChildren())  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	40	2	replace
1372	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&!n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&!n.hasChildren())  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	40	2	replace
1373	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  ||!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	52	6	replace
1374	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  ||!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	52	6	replace
1375	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  ||!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	52	2	replace
1376	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  ||!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	52	2	replace
1377	[BUG]  [BUGGY]  if(n.isBlock()  ||  n.hasLastChild())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.isBlock()  ||  n.hasLastChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.isBlock()  ||  n.hasLastChild())  {	  if(n.hasChildren()    ||    n.hasLastChild())    {    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1378	[BUG]  [BUGGY]  if(n.hasChildren()  ||  parent.hasLastChild())  {  [CE]  cannot  find  symbol  parent  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  parent.hasLastChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  parent.hasLastChild())  {	  if(n.hasChildren()    ||    n.hasLastChild())    {    	non-compiled	[CE]  cannot  find  symbol  parent	91	None	replace
1379	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||!noOpStatements.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  ||!noOpStatements.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  ||!noOpStatements.hasChildren())  {	  if(n.hasFirstChild()    ||!n.hasChildren())    {    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
1380	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n,  n.getFirstChild()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n,  n.getFirstChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  tryRemoveUnconditionalBranching(n,  n.getFirstChild()))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)&&    tryRemoveUnconditionalBranching(n.getFirstChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	130	None	replace
1381	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  if(N.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  if(N.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.BLOCK)    {    if(N.hasChildren()  &&  n.getLastChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	59	None	add
1382	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasOneChild()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()    ||    (n.hasOneChild()))    {    	compilable	  [FE]  AssertionFailedError  	24	4	replace
1383	[BUG]  [BUGGY]  if(n.hasOneChild()  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasOneChild()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(n.hasChildren()    ||    (n.hasOneChild()))    {    	compilable	  [FE]  AssertionFailedError  	24	4	replace
1384	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	148	None	add
1385	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION    ||    n.hasChildren())    {    if(n.hasChildren()  &&!n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	148	None	add
1386	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	34	6	replace
1387	[BUG]  [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if    (!n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	34	6	replace
1388	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
1389	[BUG]  [BUGGY]  if(n.isFirstChild()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.isFirstChild()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.isFirstChild()  &&  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasNext())  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
1390	[BUG]  [BUGGY]  if(n.hasChildren()  ||!n.canBeBlock())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||!n.canBeBlock())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||!n.canBeBlock())  {	  if(n.hasChildren()    ||    n.canBeBlock())    {    	non-compiled	[CE]  cannot  find  symbol	174	None	replace
1391	[BUG]  [BUGGY]  if(n.isBlock()  ||  n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.isBlock()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.isBlock()  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.canBeBlock())    {    	non-compiled	[CE]  cannot  find  symbol	174	None	replace
1392	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  2))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  2))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  2))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	167	None	replace
1393	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  1))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  1))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getFirstChild(),  n.getLastChild(),  1))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getFirstChild(),    n.getLastChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	167	None	replace
1394	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(N.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(N.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(N.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	159	None	add
1395	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  ||!n.hasChildren()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  ||!n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()  ||!n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	110	None	add
1396	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren())  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    nodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	155	2	replace
1397	[BUG]  [BUGGY]  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren())  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    nodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	155	2	replace
1398	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  n.hasChildren())  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    nodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	155	2	replace
1399	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n)&&  n.hasChildren())  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    nodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	155	2	replace
1400	[BUG]  [BUGGY]  if(!n.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()  ||  n.hasNext())  {	  if(n.hasChildren()    ||    parent.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
1401	[BUG]  [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(!n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	153	None	add
1402	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  &&  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	80	6	replace
1403	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  &&  n.hasOneChild()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	80	6	replace
1404	[BUG]  [BUGGY]  if(n.hasNext()  &&  n.getType()  ==  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasNext()  &&  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasNext()  &&  n.getType()  ==  Token.BLOCK)  {	  if(n.hasFirstChild()    &&    n.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
1405	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  &&  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasOneChild()  &&  n.getType()  ==  Token.BLOCK)  {	  if(n.hasFirstChild()    &&    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	11	4	replace
1406	[BUG]  [BUGGY]  if(n.hasOneChild()  &&  n.getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasOneChild()  &&  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasOneChild()  &&  n.getType()  ==  Token.BLOCK)  {	  if(n.hasFirstChild()    &&    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	11	4	replace
1407	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasNext()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasNext()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasNext()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
1408	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	58	3	replace
1409	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()!=  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	58	3	replace
1410	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.CATCH)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.CATCH)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	88	2	replace
1411	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.CATCH)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.CATCH)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getType()  ==  Token.CATCH)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	88	2	replace
1412	[BUG]  [BUGGY]  if(n,  gNode.hasChildren()  ||  n.hasNext())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n,  gNode.hasChildren()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n,  gNode.hasChildren()  ||  n.hasNext())  {	  if(gNode.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  ')'  expected	118	None	replace
1413	[BUG]  [BUGGY]  if(N.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  N  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(N.hasChildren()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(N.hasChildren()  ||  n.hasNext())  {	  if(gNode.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol  N	118	None	replace
1414	[BUG]  [BUGGY]  If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
1415	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
1416	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=  null)  {  If(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
1417	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    If(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
1418	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(!n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(!n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(!n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	43	None	add
1419	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(N.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(N.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(N.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	43	None	add
1420	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(N.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(N.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(N.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	146	None	add
1421	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()!=  null  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	146	None	add
1422	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.NAME  &&  n.hasChildren()  ||  n.hasNext())  {	  if(n.getType()    ==    Token.NAME    &&    n.hasChildren()    ||    n.hasChildren())    {    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
1423	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(N.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(N.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()!=    null    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(N.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	190	None	add
1424	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	183	4	replace
1425	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	183	4	replace
1426	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasNext()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.hasNext()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()  ||  n.hasNext()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
1427	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	49	None	add
1428	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(N.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(N.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.FUNCTION    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(N.getType()  ==  Token.FUNCTION  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	49	None	add
1429	[BUG]  [BUGGY]  if(NodeUtil.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(NodeUtil.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(NodeUtil.hasChildren()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (NodeUtil.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
1430	[BUG]  [BUGGY]  if(NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.hasChildren())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(NodeUtil.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.hasChildren())  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (NodeUtil.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
1431	[BUG]  [BUGGY]  if(NodeUtil.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(NodeUtil.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(NodeUtil.hasChildren()  &&  NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (NodeUtil.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
1432	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!removeNoOpStatements)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(!removeNoOpStatements)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	26	6	replace
1433	[BUG]  [BUGGY]  if(!removeNoOpStatements)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(!removeNoOpStatements)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(!removeNoOpStatements)  {	  if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	  [FE]  AssertionFailedError  	26	6	replace
1434	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getFirstChild()  ==  null  ||!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	154	6	replace
1435	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getFirstChild()  ==  null  ||!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getFirstChild()  ==  null  ||!n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(!n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	154	6	replace
1436	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n)||  n.hasChildren())  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
1437	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  NodeUtil.isFunctionDeclaration(n)||!n.hasChildren())  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
1438	[BUG]  [BUGGY]  if(n.isFunctionDeclaration()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.isFunctionDeclaration()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.isFunctionDeclaration()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
1439	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  if(n.isChildren()  &&  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  if(n.isChildren()  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.hasChildren())    {    if(n.isChildren()  &&  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	102	None	add
1440	[BUG]  [BUGGY]  Node  first  =  n.cloneTree();  [CE]  'else'  without  'if'  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  Node  first  =  n.cloneTree();  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	Node  first  =  n.cloneTree();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
1441	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.VAR  &&  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	113	6	replace
1442	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.VAR  &&  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	113	6	replace
1443	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(!n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	55	None	add
1444	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(N.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(N.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(N.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	55	None	add
1445	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(n.getType()  ==  Token.BLOCK  ||  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	55	None	add
1446	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  new  Node(Token.BLOCK)))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  new  Node(Token.BLOCK)))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n.getLastChild(),  new  Node(Token.BLOCK)))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n.getLastChild(),    outEdges))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	73	None	replace
1447	[BUG]  [BUGGY]  if(n,  n.getChildren()  ||  n.hasNext())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n,  n.getChildren()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n,  n.getChildren()  ||  n.hasNext())  {	  if(n.getChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  ')'  expected	114	None	replace
1448	[BUG]  [BUGGY]  if(n.removeNoOpStatements()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.removeNoOpStatements()  ||  n.hasNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.removeNoOpStatements()  ||  n.hasNext())  {	  if(n.getChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1449	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getFirstChild(),  n.getLastChild()))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getFirstChild(),  n.getLastChild()))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getFirstChild(),  n.getLastChild()))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n,    n.getFirstChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	76	None	replace
1450	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getFirstChild(),  null))  {  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getFirstChild(),  null))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if  (n.hasChildren()  &&  tryRemoveUnconditionalBranching(n,  n.getFirstChild(),  null))  {	  if    (n.hasChildren()    &&    tryRemoveUnconditionalBranching(n,    n.getFirstChild()))    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	76	None	replace
1451	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))    {    if  (!n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {	  	non-compiled	[CE]  orphaned  case	131	None	add
1452	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n)  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))  {  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n)  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if    (n.hasChildren()    &&    NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n))    {    if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n)||!NodeUtil.mayHaveSideEffects(n)	  	non-compiled	[CE]  ')'  expected	131	None	add
1453	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  if(!n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.GETPROP    &&    n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.BLOCK)    {    if(!n.getType()  ==  Token.GETPROP  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  orphaned  case	61	None	add
1454	[BUG]  [BUGGY]  If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    If(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	97	None	replace
1455	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(removeNoOpStatements)  {  If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(removeNoOpStatements)  {  If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    If(n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	97	None	replace
1456	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(!n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	176	2	replace
1457	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    if(!n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	176	2	replace
1458	[BUG]  [BUGGY]  if(n.getChildren()  ||  n.getNext())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getChildren()  ||  n.getNext())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getChildren()  ||  n.getNext())  {	  if(n.hasChildren()    ||    n.getNext())    {    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
1459	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  if(N.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  if(N.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren())    {    if(N.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {	  	non-compiled	[CE]  orphaned  case	112	None	add
1460	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FOR  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.FOR  &&  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	82	4	replace
1461	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FOR  &&  n.hasChildren()  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.FOR  &&  n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.FOR  &&  n.hasChildren()  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	82	4	replace
1462	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasOneChild()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	add	if(n.getType()  ==  Token.BLOCK  &&  n.hasOneChild()  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	82	4	replace
1463	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasOneChild()  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasOneChild()  ||  n.hasOneChild())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasOneChild()  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.BLOCK    &&    n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	82	4	replace
1464	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(N.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    RuntimeException    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  if(N.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    if(N.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	41	None	add
1465	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&!n.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.FUNCTION)  {  if(n.hasChildren()  &&!n.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.FUNCTION)    {    if(n.hasChildren()  &&!n.getLastChild().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  orphaned  case	45	None	add
1466	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionAnalysis(n)||  n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionAnalysis(n)||  n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  NodeUtil.isFunctionAnalysis(n)||  n.hasChildren())  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionAnalysis(n))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
1467	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionAnalysis(n)||!n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (n.getParent()  ==  null)  {  List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  if  (outEdges.size()  ==  1)  {  return  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  }  }  switch  (n.getType())  {  case  Token.BLOCK:      [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isFunctionAnalysis(n)||!n.hasChildren())  {  [BUGGY]      Node  first  =  n.getFirstChild();  return  tryRemoveUnconditionalBranching(first);  }  else  {  return  tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));  }  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.42640143271122083	161	161	2	replace	if(n.hasFirstChild()  &&  NodeUtil.isFunctionAnalysis(n)||!n.hasChildren())  {	  if(n.hasFirstChild()    &&    NodeUtil.isFunctionAnalysis(n))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
