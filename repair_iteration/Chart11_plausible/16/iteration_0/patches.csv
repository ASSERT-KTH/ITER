bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  [BUGGY]    iterator2.next();  [BUGGY]  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	292	292	1	add	    iterator2.next();		compilable	  [FE]  AssertionFailedError  	32	2	add
2	[BUG]  [BUGGY]    iterator2.next();  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  [BUGGY]    iterator2.next();  [BUGGY]  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	292	292	1	replace	    iterator2.next();		compilable	  [FE]  AssertionFailedError  	32	2	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  [BUGGY]    iterator1.next();  [BUGGY]  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	292	292	1	add	    iterator1.next();		compilable	  [FE]  AssertionFailedError  	32	2	add
4	[BUG]  [BUGGY]    iterator1.next();  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  [BUGGY]    iterator1.next();  [BUGGY]  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	292	292	1	replace	    iterator1.next();		compilable	  [FE]  AssertionFailedError  	32	2	add
5	[BUG]  [BUGGY]    Iterator  <?>  done  =  iterator1.next();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AssertionFailedError  [CONTEXT]  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  [BUGGY]    Iterator  <?>  done  =  iterator1.next();  [BUGGY]  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	292	292	1	replace	    Iterator  <?>  done  =  iterator1.next();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	32	None	add
6	[BUG]  [BUGGY]    Iterator  <  PathIterator>  iterator1  =  iterator2.currentSegment(d1);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]    AssertionFailedError  [CONTEXT]  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  [BUGGY]    Iterator  <  PathIterator>  iterator1  =  iterator2.currentSegment(d1);  [BUGGY]  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	292	292	1	replace	    Iterator  <  PathIterator>  iterator1  =  iterator2.currentSegment(d1);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	32	None	add
7	[BUG]  [BUGGY]    Iterator  <  PathIterator>  iterator2  =  iterator1.currentSegment(seg2);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]      AssertionFailedError  [CONTEXT]  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  [BUGGY]    Iterator  <  PathIterator>  iterator2  =  iterator1.currentSegment(seg2);  [BUGGY]  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	292	292	1	replace	    Iterator  <  PathIterator>  iterator2  =  iterator1.currentSegment(seg2);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	32	None	add
8	[BUG]  [BUGGY]    Iterator  <  PathIterator>  iterator1  =  iterator2.currentSegment();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AssertionFailedError  [CONTEXT]  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  [BUGGY]    Iterator  <  PathIterator>  iterator1  =  iterator2.currentSegment();  [BUGGY]  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	292	292	1	replace	    Iterator  <  PathIterator>  iterator1  =  iterator2.currentSegment();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	32	None	add
9	[BUG]  [BUGGY]  iterator2.remove();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  [BUGGY]  iterator2.remove();  [BUGGY]  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	292	292	1	replace	iterator2.remove();	iterator2.next();  	non-compiled	[CE]  cannot  find  symbol	31	None	replace
10	[BUG]  [BUGGY]    Iterator  <  SQRT2>  iterator1  =  iterator2.currentSegment(d1);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]    AssertionFailedError  [CONTEXT]  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  [BUGGY]    Iterator  <  SQRT2>  iterator1  =  iterator2.currentSegment(d1);  [BUGGY]  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	292	292	1	replace	    Iterator  <  SQRT2>  iterator1  =  iterator2.currentSegment(d1);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	32	None	add
11	[BUG]  [BUGGY]    Iterator  <  SQRT2>  iterator2  =  iterator1.currentSegment(d1);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]      AssertionFailedError  [CONTEXT]  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  [BUGGY]    Iterator  <  SQRT2>  iterator2  =  iterator1.currentSegment(d1);  [BUGGY]  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	292	292	1	replace	    Iterator  <  SQRT2>  iterator2  =  iterator1.currentSegment(d1);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	32	None	add
12	[BUG]  [BUGGY]    Iterator  <  SQRT2>  iterator1  =  iterator2.currentSegment();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AssertionFailedError  [CONTEXT]  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  [BUGGY]    Iterator  <  SQRT2>  iterator1  =  iterator2.currentSegment();  [BUGGY]  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	292	292	1	replace	    Iterator  <  SQRT2>  iterator1  =  iterator2.currentSegment();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	32	None	add
