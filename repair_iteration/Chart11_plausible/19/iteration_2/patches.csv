bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  float  seg2  =  p1.getSegmentCount();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  float  seg2  =  p1.getSegmentCount();  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	float  seg2  =  p1.getSegmentCount();	  return    false;    int    seg2    =    p1.getSegmentCount();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
2	[BUG]  [BUGGY]  if(done)  {  return  false;  }  [CE]  missing  return  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  if(done)  {  return  false;  }  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(done)  {  return  false;  }	  if(done)    {    return    true;    }    	non-compiled	[CE]  missing  return  statement	22	None	replace
3	[BUG]  [BUGGY]  while(!done)  {  if(done)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  while(!done)  {  if(done)  {  return  true;  }  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	while(!done)  {  if(done)  {  return  true;  }	  if(done)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
4	[BUG]  [BUGGY]  return  p1.equals(p2.equals(p2))?  true  :  false;  [CE]  method  equals  in  class  Object  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  return  p1.equals(p2.equals(p2))?  true  :  false;  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return  p1.equals(p2.equals(p2))?  true  :  false;	  return    p1.equals(p2.equals(p1))?    true    :    false;    	non-compiled	[CE]  method  equals  in  class  Object  cannot  be  applied  to  given  types;	25	None	replace
5	[BUG]  [BUGGY]  new  IllegalArgumentException( " ");  [CE]  missing  return  statement  [FE]        IllegalArgumentException      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  new  IllegalArgumentException( " ");  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  missing  return  statement	20	None	replace
6	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(d1,  done));  [CE]  <identifier>  expected  [FE]        IllegalArgumentException      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(d1,  done));  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(d1,  done));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
7	[BUG]  [BUGGY]  float  seg2  =  iterator1.next();  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  float  seg2  =  iterator1.next();  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	float  seg2  =  iterator1.next();	  return    false;    int    seg2    =    iterator1.next();    	non-compiled	[CE]  incompatible  types	6	None	replace
8	[BUG]  [BUGGY]  return  done  &&  iterator2.isDone();  float  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CE]  variable  done  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]    AssertionFailedError    [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  return  done  &&  iterator2.isDone();  float  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return    done    &&    iterator2.isDone();    float  done  =  iterator1.isDone()  &&  iterator2.isDone();	  	non-compiled	[CE]  variable  done  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	9	None	add
9	[BUG]  [BUGGY]  return  done  &&  iterator2.isDone();  int  seg2  =  iterator1.getSegmentCount();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  return  done  &&  iterator2.isDone();  int  seg2  =  iterator1.getSegmentCount();  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return    done    &&    iterator2.isDone();    int  seg2  =  iterator1.getSegmentCount();	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
10	[BUG]  [BUGGY]  return  done  &&  iterator2.isDone();  int  seg2  =  iterator1.next();  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  return  done  &&  iterator2.isDone();  int  seg2  =  iterator1.next();  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return    done    &&    iterator2.isDone();    int  seg2  =  iterator1.next();	  	non-compiled	[CE]  incompatible  types	9	None	add
11	[BUG]  [BUGGY]  int  seg2  =  iterator1.segmentCount();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  int  seg2  =  iterator1.segmentCount();  [BUGGY]      return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	int  seg2  =  iterator1.segmentCount();	  int    seg2    =    p1.segmentCount();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
12	[BUG]  [BUGGY]  if(d1)  {  return  true;  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  if(d1)  {  return  true;  }  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(d1)  {  return  true;  }	  if(dones)    {    return    true;    }    	non-compiled	[CE]  incompatible  types	19	None	replace
13	[BUG]  [BUGGY]  if(seg1!=  seg2)  {  if(!SQRT2.equals(d1,  p2))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  if(seg1!=  seg2)  {  if(!SQRT2.equals(d1,  p2))  {  return  false;  }  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(seg1!=  seg2)  {  if(!SQRT2.equals(d1,  p2))  {  return  false;  }	  if(seg1!=    seg2)    {    if(!SQRT2.equals(p1))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
14	[BUG]  [BUGGY]  return  p1.equals(p2.equals(p1));  [CE]  method  equals  in  class  Object  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  return  p1.equals(p2.equals(p1));  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return  p1.equals(p2.equals(p1));	  return    p1.equals(p2.equals(p2));    	non-compiled	[CE]  method  equals  in  class  Object  cannot  be  applied  to  given  types;	24	None	replace
15	[BUG]  [BUGGY]  return  p1.equals(p2.equals(p1),  p2);  [CE]  method  equals  in  class  Object  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  return  p1.equals(p2.equals(p1),  p2);  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return  p1.equals(p2.equals(p1),  p2);	  return    p1.equals(p2.equals(p2));    	non-compiled	[CE]  method  equals  in  class  Object  cannot  be  applied  to  given  types;	24	None	replace
16	[BUG]  [BUGGY]  int  seg2  =  iterator1.getSegment();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  int  seg2  =  iterator1.getSegment();  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	int  seg2  =  iterator1.getSegment();	  return    false;    int    seg2    =    iterator1.getSegment();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
17	[BUG]  [BUGGY]  int  seg2  =  iterator2.getSegment();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  int  seg2  =  iterator2.getSegment();  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	int  seg2  =  iterator2.getSegment();	  return    false;    int    seg2    =    iterator1.getSegment();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
18	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( "   ");  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( "   ");  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	throw    new    IllegalStateException(   "   ");    throw  new  IllegalStateException( "   ");	  	non-compiled	[CE]  unreachable  statement	15	None	add
19	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( ",   ");  [CE]  unreachable  statement  [FE]      IllegalStateException    [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( ",   ");  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	throw    new    IllegalStateException(   "   ");    throw  new  IllegalStateException( ",   ");	  	non-compiled	[CE]  unreachable  statement	15	None	add
20	[BUG]  [BUGGY]  if(done  >  0)  {  return  false;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]        AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  if(done  >  0)  {  return  false;  }  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(done  >  0)  {  return  false;  }	  if(does    >    0)    {    return    false;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	8	None	replace
21	[BUG]  [BUGGY]  if(done!=  p2.length)  {  return  false;  }  [CE]  cannot  find  symbol  length  [FE]        AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  if(done!=  p2.length)  {  return  false;  }  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(done!=  p2.length)  {  return  false;  }	  if(done!=    p1.length)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  length	27	None	replace
22	[BUG]  [BUGGY]  if(seg2!=  seg1)  {  if(!SQRT2.equals(d1,  done))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  if(seg2!=  seg1)  {  if(!SQRT2.equals(d1,  done))  {  return  false;  }  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(seg2!=  seg1)  {  if(!SQRT2.equals(d1,  done))  {  return  false;  }	  if(seg1!=    seg2)    {    if(!SQRT2.equals(d1,    done))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
23	[BUG]  [BUGGY]  return  done  &&  iterator1.isDone();  float  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CE]  variable  done  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]    AssertionFailedError    [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  return  done  &&  iterator1.isDone();  float  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return    done    &&    iterator1.isDone();    float  done  =  iterator1.isDone()  &&  iterator2.isDone();	  	non-compiled	[CE]  variable  done  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	11	None	add
24	[BUG]  [BUGGY]  return  done  &&  iterator1.isDone();  int  seg2  =  iterator1.getSegmentCount();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  return  done  &&  iterator1.isDone();  int  seg2  =  iterator1.getSegmentCount();  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return    done    &&    iterator1.isDone();    int  seg2  =  iterator1.getSegmentCount();	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
25	[BUG]  [BUGGY]  return  done  &&  iterator1.isDone();  int  seg2  =  iterator1.getSegment();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  return  done  &&  iterator1.isDone();  int  seg2  =  iterator1.getSegment();  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return    done    &&    iterator1.isDone();    int  seg2  =  iterator1.getSegment();	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
26	[BUG]  [BUGGY]  if(seg1!=  seg2)  {  if(!SQRT1.equals(d1,  done))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  if(seg1!=  seg2)  {  if(!SQRT1.equals(d1,  done))  {  return  false;  }  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(seg1!=  seg2)  {  if(!SQRT1.equals(d1,  done))  {  return  false;  }	  if(seg1!=    seg2)    {    if(!SQRT2.equals(d1,    done))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
27	[BUG]  [BUGGY]  return  done  &&  iterator2.isDone();  if(seg1!=  seg2)  {  return  false;  }  [CE]  cannot  find  symbol  seg1  [FE]    AssertionFailedError    [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  return  done  &&  iterator2.isDone();  if(seg1!=  seg2)  {  return  false;  }  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return    done    &&    iterator2.isDone();    if(seg1!=  seg2)  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  seg1	9	None	add
28	[BUG]  [BUGGY]  return  done  &&  iterator2.isDone();  int  seg2  =  iterator1.getSegment();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  return  done  &&  iterator2.isDone();  int  seg2  =  iterator1.getSegment();  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return    done    &&    iterator2.isDone();    int  seg2  =  iterator1.getSegment();	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
29	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	Throwables.throw  new  IllegalStateException( " ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
30	[BUG]  [BUGGY]  if(does)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  does  [FE]        IllegalArgumentException      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  if(does)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(does)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  cannot  find  symbol  does	2	None	replace
31	[BUG]  [BUGGY]  if(dones)  {  return  false;  }  [CE]  cannot  find  symbol  dones  [FE]        AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  if(dones)  {  return  false;  }  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(dones)  {  return  false;  }	  if(does)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  dones	14	None	replace
32	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  new  IllegalStateException( "   ");  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  throw  new  IllegalStateException(   "   ");  new  IllegalStateException( "   ");  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	throw    new    IllegalStateException(   "   ");    new  IllegalStateException( "   ");	  	non-compiled	[CE]  unreachable  statement	15	None	add
33	[BUG]  [BUGGY]  new  IllegalArgumentException( " ".equals(seg1));  [CE]  cannot  find  symbol  seg1  [FE]        IllegalArgumentException      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  new  IllegalArgumentException( " ".equals(seg1));  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	new  IllegalArgumentException( " ".equals(seg1));	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  cannot  find  symbol  seg1	20	None	replace
34	[BUG]  [BUGGY]  return  done  &&  iterator1.isDone();  if(seg1!=  seg2)  {  return  false;  }  [CE]  cannot  find  symbol  seg1  [FE]    AssertionFailedError    [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  return  done  &&  iterator1.isDone();  if(seg1!=  seg2)  {  return  false;  }  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return    done    &&    iterator1.isDone();    if(seg1!=  seg2)  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  seg1	11	None	add
35	[BUG]  [BUGGY]  return  done  &&  iterator1.isDone();  int  seg2  =  iterator2.getSegmentCount();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  return  done  &&  iterator1.isDone();  int  seg2  =  iterator2.getSegmentCount();  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return    done    &&    iterator1.isDone();    int  seg2  =  iterator2.getSegmentCount();	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
36	[BUG]  [BUGGY]  if(dones  >  0)  {  return  false;  }  [CE]  cannot  find  symbol  dones  [FE]        AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  if(dones  >  0)  {  return  false;  }  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(dones  >  0)  {  return  false;  }	  if(does    >    0)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  dones	8	None	replace
37	[BUG]  [BUGGY]  return  p1.equals(p2.equals(p1,  p2));  [CE]  method  equals  in  class  Object  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  return  p1.equals(p2.equals(p1,  p2));  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return  p1.equals(p2.equals(p1,  p2));	  return    p1.equals(p2.equals(p2));    	non-compiled	[CE]  method  equals  in  class  Object  cannot  be  applied  to  given  types;	24	None	replace
38	[BUG]  [BUGGY]  while(!done)  {  return  true;  }  [CE]  missing  return  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  while(!done)  {  return  true;  }  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	while(!done)  {  return  true;  }	  if(done)    {    return    true;    }    	non-compiled	[CE]  missing  return  statement	22	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  return  done  ||  iterator2.isDone();  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	add	return  done  ||  iterator2.isDone();	  return    done    &&    iterator2.isDone();    	compilable	  [FE]  AssertionFailedError  	10	1	replace
40	[BUG]  [BUGGY]  return  done  ||  iterator2.isDone();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  return  done  ||  iterator2.isDone();  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return  done  ||  iterator2.isDone();	  return    done    &&    iterator2.isDone();    	compilable	  [FE]  AssertionFailedError  	10	1	replace
41	[BUG]  [BUGGY]  return  done  &&  iterator2.isDone();  int  seg2  =  iterator2.getSegmentCount();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  return  done  &&  iterator2.isDone();  int  seg2  =  iterator2.getSegmentCount();  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return    done    &&    iterator2.isDone();    int  seg2  =  iterator2.getSegmentCount();	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
42	[BUG]  [BUGGY]  PathIterator  iterator1  =  p1.iterator();  [CE]  variable  iterator1  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]            AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  PathIterator  iterator1  =  p1.iterator();  [BUGGY]      return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	PathIterator  iterator1  =  p1.iterator();	  PathIterator    iterator1    =    p1.getPathIterator();    	non-compiled	[CE]  variable  iterator1  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	1	None	replace
43	[BUG]  [BUGGY]  if(done!=  p2)  {  return  true;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]            AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  if(done!=  p2)  {  return  true;  }  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(done!=  p2)  {  return  true;  }	  if(done)    {    return    true;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	22	None	replace
44	[BUG]  [BUGGY]  return  done  &&  iterator1.isDone();  int  seg2  =  p1.getSegmentCount();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  return  done  &&  iterator1.isDone();  int  seg2  =  p1.getSegmentCount();  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return    done    &&    iterator1.isDone();    int  seg2  =  p1.getSegmentCount();	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
45	[BUG]  [BUGGY]  new  IllegalArgumentException( " ".equals(d1));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]        IllegalArgumentException      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  new  IllegalArgumentException( " ".equals(d1));  [BUGGY]      }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	new  IllegalArgumentException( " ".equals(d1));	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	20	None	replace
46	[BUG]  [BUGGY]  int  seg2  =  p2.segmentCount();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }      [BUGGY]  int  seg2  =  p2.segmentCount();  [BUGGY]      return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	int  seg2  =  p2.segmentCount();	  int    seg2    =    p1.segmentCount();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
