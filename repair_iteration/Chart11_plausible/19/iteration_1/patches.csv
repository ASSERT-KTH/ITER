bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  PathIterator  iterator1  =  p1.getPathIterator();  [CE]  variable  iterator1  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]        AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  PathIterator  iterator1  =  p1.getPathIterator();  [BUGGY]    return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	PathIterator  iterator1  =  p1.getPathIterator();	      PathIterator    iterator1    =    p2.getPathIterator();    	non-compiled	[CE]  variable  iterator1  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	10	None	replace
2	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( "   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( "   ");  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	throw    new    IllegalArgumentException(   "   ");    throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  unreachable  statement	3	None	add
3	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.throw  new  IllegalArgumentException( "   ");  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.throw  new  IllegalArgumentException( "   ");  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	throw    new    IllegalArgumentException(   "   ");    Throwables.throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  <identifier>  expected	3	None	add
4	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
5	[BUG]  [BUGGY]  return  false;  int  seg2  =  iterator1.getSegmentCount();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  return  false;  int  seg2  =  iterator1.getSegmentCount();  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return    false;    int  seg2  =  iterator1.getSegmentCount();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
6	[BUG]  [BUGGY]  return  false;  int  seg2  =  iterator1.next();  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  return  false;  int  seg2  =  iterator1.next();  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return    false;    int  seg2  =  iterator1.next();	  	non-compiled	[CE]  incompatible  types	1	None	add
7	[BUG]  [BUGGY]  return  false;  int  seg2  =  iterator2.getSegmentCount();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  return  false;  int  seg2  =  iterator2.getSegmentCount();  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return    false;    int  seg2  =  iterator2.getSegmentCount();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
8	[BUG]  [BUGGY]  if(does  >  0)  {  return  false;  }  [CE]  cannot  find  symbol  does  [FE]    AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  if(does  >  0)  {  return  false;  }  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(does  >  0)  {  return  false;  }	  return    false;    	non-compiled	[CE]  cannot  find  symbol  does	2	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  return  done  &&  iterator2.isDone();  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	add	return  done  &&  iterator2.isDone();	      	compilable	  [FE]  AssertionFailedError  	5	1	replace
10	[BUG]  [BUGGY]  return  done  &&  iterator2.isDone();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  return  done  &&  iterator2.isDone();  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return  done  &&  iterator2.isDone();	      	compilable	  [FE]  AssertionFailedError  	5	1	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  return  done  &&  iterator1.isDone();  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	add	return  done  &&  iterator1.isDone();	      	compilable	  [FE]  AssertionFailedError  	5	1	replace
12	[BUG]  [BUGGY]  return  done  &&  iterator1.isDone();  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  return  done  &&  iterator1.isDone();  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return  done  &&  iterator1.isDone();	      	compilable	  [FE]  AssertionFailedError  	5	1	replace
13	[BUG]  [BUGGY]  int  seg2  =  iterator2.next();  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  int  seg2  =  iterator2.next();  [BUGGY]    return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	int  seg2  =  iterator2.next();	      int    seg2    =    iterator1.next();    	non-compiled	[CE]  incompatible  types	7	None	replace
14	[BUG]  [BUGGY]  if(does)  {  return  false;  }  [CE]  cannot  find  symbol  does  [FE]    AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  if(does)  {  return  false;  }  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(does)  {  return  false;  }	  return    false;    	non-compiled	[CE]  cannot  find  symbol  does	2	None	replace
15	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalArgumentException    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	add	throw  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalStateException  	4	2	replace
16	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [FE]  IllegalStateException  [FE]    IllegalArgumentException    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	throw  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalStateException  	4	2	replace
17	[BUG]  [BUGGY]  if(seg1!=  seg2)  {  if(!SQRT2.equals(d1,  done))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  if(seg1!=  seg2)  {  if(!SQRT2.equals(d1,  done))  {  return  false;  }  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(seg1!=  seg2)  {  if(!SQRT2.equals(d1,  done))  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
18	[BUG]  [BUGGY]  if(seg1!=  seg2)  {  if(!SQRT2.equals(p1))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  if(seg1!=  seg2)  {  if(!SQRT2.equals(p1))  {  return  false;  }  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(seg1!=  seg2)  {  if(!SQRT2.equals(p1))  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  if(dones)  {  return  true;  }  [CE]  cannot  find  symbol  dones  [FE]        AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  if(dones)  {  return  true;  }  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(dones)  {  return  true;  }	  if(does)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  dones	9	None	replace
20	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  new  IllegalArgumentException( "   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  new  IllegalArgumentException( "   ");  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	throw    new    IllegalArgumentException(   "   ");    new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  unreachable  statement	3	None	add
21	[BUG]  [BUGGY]  return  false;  int  seg2  =  iterator1.getSegment();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  return  false;  int  seg2  =  iterator1.getSegment();  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return    false;    int  seg2  =  iterator1.getSegment();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
22	[BUG]  [BUGGY]  if(done)  {  return  true;  }  [CE]  missing  return  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  if(done)  {  return  true;  }  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(done)  {  return  true;  }	  if(doeseg1)    {    return    true;    }    	non-compiled	[CE]  missing  return  statement	11	None	replace
23	[BUG]  [BUGGY]  return  false;  int  seg2  =  p1.getSegmentCount();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  return  false;  int  seg2  =  p1.getSegmentCount();  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return    false;    int  seg2  =  p1.getSegmentCount();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
24	[BUG]  [BUGGY]  return  p1.equals(p2.equals(p2));  [CE]  method  equals  in  class  Object  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  return  p1.equals(p2.equals(p2));  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return  p1.equals(p2.equals(p2));	      	non-compiled	[CE]  method  equals  in  class  Object  cannot  be  applied  to  given  types;	5	None	replace
25	[BUG]  [BUGGY]  return  p1.equals(p2.equals(p1))?  true  :  false;  [CE]  method  equals  in  class  Object  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  return  p1.equals(p2.equals(p1))?  true  :  false;  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return  p1.equals(p2.equals(p1))?  true  :  false;	      	non-compiled	[CE]  method  equals  in  class  Object  cannot  be  applied  to  given  types;	5	None	replace
26	[BUG]  [BUGGY]  int  seg2  =  p1.segmentCount();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  int  seg2  =  p1.segmentCount();  [BUGGY]    return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	int  seg2  =  p1.segmentCount();	      int    seg2    =    p1.getSegmentCount();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
27	[BUG]  [BUGGY]  if(done!=  p1.length)  {  return  false;  }  [CE]  cannot  find  symbol  length  [FE]    AssertionFailedError    [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  if(done!=  p1.length)  {  return  false;  }  [BUGGY]    }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(done!=  p1.length)  {  return  false;  }	  return    false;    	non-compiled	[CE]  cannot  find  symbol  length	2	None	replace
