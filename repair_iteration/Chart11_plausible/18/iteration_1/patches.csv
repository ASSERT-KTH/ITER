bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  done  =  iterator1.isDone()  &&  iterator3.isDone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  done  =  iterator1.isDone()  &&  iterator3.isDone();  [BUGGY]    }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	done  =  iterator1.isDone()  &&  iterator3.isDone();	      iterator2.next();    done    =    iterator1.isDone()    &&    iterator3.isDone();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  float  seg2  =  iterator2.currentSegment(seg1);  if(seg2!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  float  seg2  =  iterator2.currentSegment(seg1);  if(seg2!=  seg2)  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	float  seg2  =  iterator2.currentSegment(seg1);  if(seg2!=  seg2)  {  return  false;  }	  int    seg2    =    iterator2.currentSegment(seg1);    if(seg2!=    seg2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  float  seg2  =  iterator2.currentSegment(d1);  if(seg2!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  float  seg2  =  iterator2.currentSegment(d1);  if(seg2!=  seg2)  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	float  seg2  =  iterator2.currentSegment(d1);  if(seg2!=  seg2)  {  return  false;  }	  int    seg2    =    iterator2.currentSegment(d1);    if(seg2!=    seg2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
4	[BUG]  [BUGGY]  Iterator  iterator2  =  iterator2.currentSegment(d1);  if(iterator2.next()!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  Iterator  iterator2  =  iterator2.currentSegment(d1);  if(iterator2.next()!=  seg2)  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	Iterator  iterator2  =  iterator2.currentSegment(d1);  if(iterator2.next()!=  seg2)  {  return  false;  }	  if(does    >    0)    {    PathIterator    iterator2    =    iterator2.currentSegment(d1);    if(iterator2.next()!=    seg2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
5	[BUG]  [BUGGY]  done  =  iterator1.isDone()  ||  iterator2.isDone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  done  =  iterator1.isDone()  ||  iterator2.isDone();  [BUGGY]    return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	done  =  iterator1.isDone()  ||  iterator2.isDone();	  done    =    iterator1.isDone()    &&    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
6	[BUG]  [BUGGY]  Iterator  iterator2  =  iterator2.currentSegment(d1);  if(iterator2!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  Iterator  iterator2  =  iterator2.currentSegment(d1);  if(iterator2!=  seg2)  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	Iterator  iterator2  =  iterator2.currentSegment(d1);  if(iterator2!=  seg2)  {  return  false;  }	  if(does    >    0)    {    PathIterator    iterator2    =    iterator2.currentSegment(d1);    if(iterator2!=    seg2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]      iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [BUGGY]    }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	add	        iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError  	7	2	add
8	[BUG]  [BUGGY]      iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]      iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [BUGGY]    }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	        iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError  	7	2	add
9	[BUG]  [BUGGY]      iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  Iterator2  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]      iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  Iterator2  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [BUGGY]    }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	        iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    Iterator2  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();	  	non-compiled	[CE]  ';'  expected	7	None	add
10	[BUG]  [BUGGY]      iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  Iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [CE]  cannot  find  symbol  Iterator2  [FE]        AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]      iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  Iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [BUGGY]    }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	        iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    Iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();	  	non-compiled	[CE]  cannot  find  symbol  Iterator2	7	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]      iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]    }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	add	        iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError  	1	2	add
12	[BUG]  [BUGGY]      iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]      iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]    }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	        iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError  	1	2	add
13	[BUG]  [BUGGY]      iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  Iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CE]  cannot  find  symbol  Iterator2  [FE]      AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]      iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  Iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]    }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	        iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    Iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();	  	non-compiled	[CE]  cannot  find  symbol  Iterator2	1	None	add
14	[BUG]  [BUGGY]      iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  Iterator2  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]      iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  Iterator2  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]    }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	        iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    Iterator2  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();	  	non-compiled	[CE]  ';'  expected	1	None	add
15	[BUG]  [BUGGY]  done  =  iterator1.next()  &&  iterator2.isDone();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  done  =  iterator1.next()  &&  iterator2.isDone();  [BUGGY]    }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	done  =  iterator1.next()  &&  iterator2.isDone();	      iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
16	[BUG]  [BUGGY]  int  seg2  =  iterator1.currentSegment(seg2);  if(seg2!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  int  seg2  =  iterator1.currentSegment(seg2);  if(seg2!=  seg2)  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	int  seg2  =  iterator1.currentSegment(seg2);  if(seg2!=  seg2)  {  return  false;  }	  int    seg2    =    iterator2.currentSegment(seg1);    if(seg2!=    seg2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
17	[BUG]  [BUGGY]  Iterator  <  PathIterator>  iterator2  =  iterator2.currentSegment(d1);  if(iterator2.next()!=  seg2)  {  return  false;  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  Iterator  <  PathIterator>  iterator2  =  iterator2.currentSegment(d1);  if(iterator2.next()!=  seg2)  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	Iterator  <  PathIterator>  iterator2  =  iterator2.currentSegment(d1);  if(iterator2.next()!=  seg2)  {  return  false;  }	  if(does    >    0)    {    PathIterator    iterator2    =    iterator2.currentSegment(d1);    if(iterator2.next()!=    seg2)    {    return    false;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	9	None	replace
18	[BUG]  [BUGGY]  int  seg2  =  iterator1.currentSegment(d2);  if(seg2!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  int  seg2  =  iterator1.currentSegment(d2);  if(seg2!=  seg2)  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	int  seg2  =  iterator1.currentSegment(d2);  if(seg2!=  seg2)  {  return  false;  }	  int    seg2    =    iterator2.currentSegment(d1);    if(seg2!=    seg2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
19	[BUG]  [BUGGY]  iterator2.next();  done  =  iterator1.isDone()  &  iterator2.isDone();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  iterator2.next();  done  =  iterator1.isDone()  &  iterator2.isDone();  [BUGGY]    }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	iterator2.next();  done  =  iterator1.isDone()  &  iterator2.isDone();	      iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
20	[BUG]  [BUGGY]  int  seg2  =  iterator1.currentSegment(d1);  if(seg2!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  int  seg2  =  iterator1.currentSegment(d1);  if(seg2!=  seg2)  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	int  seg2  =  iterator1.currentSegment(d1);  if(seg2!=  seg2)  {  return  false;  }	  int    seg2    =    iterator2.currentSegment(d1);    if(seg2!=    seg2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
