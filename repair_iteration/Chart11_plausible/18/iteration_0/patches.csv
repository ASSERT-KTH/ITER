bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	add	    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();		compilable	  [FE]  AssertionFailedError  	36	2	add
2	[BUG]  [BUGGY]    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();		compilable	  [FE]  AssertionFailedError  	36	2	add
3	[BUG]  [BUGGY]    if(does  >  0)  {  int  seg2  =  iterator2.currentSegment(d1);  if(seg2!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]    if(does  >  0)  {  int  seg2  =  iterator2.currentSegment(d1);  if(seg2!=  seg2)  {  return  false;  }  [BUGGY]  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	    if(does  >  0)  {  int  seg2  =  iterator2.currentSegment(d1);  if(seg2!=  seg2)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	36	None	add
4	[BUG]  [BUGGY]  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	done  =  iterator1.isDone()  &&  iterator2.isDone();	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
5	[BUG]  [BUGGY]  if(does  >  0)  {  int  seg2  =  iterator2.currentSegment(seg1);  if(seg2!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]  if(does  >  0)  {  int  seg2  =  iterator2.currentSegment(seg1);  if(seg2!=  seg2)  {  return  false;  }  [BUGGY]  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	if(does  >  0)  {  int  seg2  =  iterator2.currentSegment(seg1);  if(seg2!=  seg2)  {  return  false;  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
6	[BUG]  [BUGGY]    iterator2.next();  done  =  iterator1.isDone()  &&  iterator3.isDone();  [CE]  cannot  find  symbol  iterator3  [FE]    AssertionFailedError  [CONTEXT]  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]    iterator2.next();  done  =  iterator1.isDone()  &&  iterator3.isDone();  [BUGGY]  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	    iterator2.next();  done  =  iterator1.isDone()  &&  iterator3.isDone();		non-compiled	[CE]  cannot  find  symbol  iterator3	36	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [BUGGY]  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	add	    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();		compilable	  [FE]  AssertionFailedError  	36	2	add
8	[BUG]  [BUGGY]    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [BUGGY]  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();		compilable	  [FE]  AssertionFailedError  	36	2	add
9	[BUG]  [BUGGY]  if(does  >  0)  {  PathIterator  iterator2  =  iterator2.currentSegment(d1);  if(iterator2.next()!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]  if(does  >  0)  {  PathIterator  iterator2  =  iterator2.currentSegment(d1);  if(iterator2.next()!=  seg2)  {  return  false;  }  [BUGGY]  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	if(does  >  0)  {  PathIterator  iterator2  =  iterator2.currentSegment(d1);  if(iterator2.next()!=  seg2)  {  return  false;  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
10	[BUG]  [BUGGY]  if(does  >  0)  {  PathIterator  iterator2  =  iterator2.currentSegment(d1);  if(iterator2!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]  if(does  >  0)  {  PathIterator  iterator2  =  iterator2.currentSegment(d1);  if(iterator2!=  seg2)  {  return  false;  }  [BUGGY]  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	if(does  >  0)  {  PathIterator  iterator2  =  iterator2.currentSegment(d1);  if(iterator2!=  seg2)  {  return  false;  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
11	[BUG]  [BUGGY]  int  seg2  =  iterator2.currentSegment(seg1);  if(seg2!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]  int  seg2  =  iterator2.currentSegment(seg1);  if(seg2!=  seg2)  {  return  false;  }  [BUGGY]  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	int  seg2  =  iterator2.currentSegment(seg1);  if(seg2!=  seg2)  {  return  false;  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
12	[BUG]  [BUGGY]  int  seg2  =  iterator2.currentSegment(d1);  if(seg2!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]  int  seg2  =  iterator2.currentSegment(d1);  if(seg2!=  seg2)  {  return  false;  }  [BUGGY]  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	int  seg2  =  iterator2.currentSegment(d1);  if(seg2!=  seg2)  {  return  false;  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
