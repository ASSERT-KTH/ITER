bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]      if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
2	[BUG]  [BUGGY]      if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]      if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]      if(p1  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	        if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
4	[BUG]  [BUGGY]      if(p1  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]      if(p1  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	        if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
5	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2  ==  null)  {  return  false;  }  [CE]  cannot  find  symbol  iterator1  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]  if(p1  ==  null  ||  p2  ==  null)  {  return  false;  }  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	if(p1  ==  null  ||  p2  ==  null)  {  return  false;  }	      if(p1    ==    null)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  iterator1	9	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]      if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
7	[BUG]  [BUGGY]      if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]      if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]      if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
9	[BUG]  [BUGGY]      if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]      if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]      if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
11	[BUG]  [BUGGY]      if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]      if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]      if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
13	[BUG]  [BUGGY]      if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]      if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
14	[BUG]  [BUGGY]  float  SQRT2  =  p2.getSQRT2();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]  float  SQRT2  =  p2.getSQRT2();  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	float  SQRT2  =  p2.getSQRT2();	      float    SQRT2    =    p1.getSQRT2();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
15	[BUG]  [BUGGY]  PathIterator  iterator1  =  p1.getPathIterator(null,  p2);  [CE]  no  suitable  method  found  for  getPathIterator(<null>,GeneralPath)  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]  PathIterator  iterator1  =  p1.getPathIterator(null,  p2);  [BUGGY]    PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	PathIterator  iterator1  =  p1.getPathIterator(null,  p2);	  PathIterator    iterator1    =    p1.getPathIterator(p2);    	non-compiled	[CE]  no  suitable  method  found  for  getPathIterator(<null>,GeneralPath)	1	None	replace
16	[BUG]  [BUGGY]  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [CE]  cannot  find  symbol  iterator1  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	      if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  iterator1	4	None	replace
17	[BUG]  [BUGGY]  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CE]  cannot  find  symbol  iterator1  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]    PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();	      	non-compiled	[CE]  cannot  find  symbol  iterator1	2	None	replace
18	[BUG]  [BUGGY]  int  seg1  =  iterator1.currentSegment(d1);  [CE]  cannot  find  symbol  d1  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]  int  seg1  =  iterator1.currentSegment(d1);  [BUGGY]    PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	int  seg1  =  iterator1.currentSegment(d1);	      	non-compiled	[CE]  cannot  find  symbol  d1	2	None	replace
19	[BUG]  [BUGGY]  PathIterator  iterator1  =  p2.getPathIterator(p1);  [CE]  no  suitable  method  found  for  getPathIterator(GeneralPath)  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]  PathIterator  iterator1  =  p2.getPathIterator(p1);  [BUGGY]    PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	PathIterator  iterator1  =  p2.getPathIterator(p1);	  PathIterator    iterator1    =    p1.getPathIterator(p2);    	non-compiled	[CE]  no  suitable  method  found  for  getPathIterator(GeneralPath)	1	None	replace
20	[BUG]  [BUGGY]      if(p1  ==  null)  {  return  false;  }  If(p1  ==  null)  {  return  false;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]      if(p1  ==  null)  {  return  false;  }  If(p1  ==  null)  {  return  false;  }  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	        if(p1    ==    null)    {    return    false;    }    If(p1  ==  null)  {  return  false;  }	  	non-compiled	[CE]  ';'  expected	8	None	add
21	[BUG]  [BUGGY]  if(p1!=  null)  {  return  false;  }  [CE]  cannot  find  symbol  iterator1  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]  if(p1!=  null)  {  return  false;  }  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	if(p1!=  null)  {  return  false;  }	      if(p1    ==    null)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  iterator1	9	None	replace
22	[BUG]  [BUGGY]  PathIterator  iterator2  =  p1.getPathIterator(null);  [CE]  variable  iterator2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]  PathIterator  iterator2  =  p1.getPathIterator(null);  [BUGGY]    PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	PathIterator  iterator2  =  p1.getPathIterator(null);	      	non-compiled	[CE]  variable  iterator2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	2	None	replace
