bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }	          if(p1    ==    null)    {    return    false;    }    if(p1    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }	          if(p1    ==    null)    {    return    false;    }    if(p1    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  PathIterator  iterator1  =  p1.getPathIterator(p1,  p2);  [CE]  no  suitable  method  found  for  getPathIterator(GeneralPath,GeneralPath)  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]  PathIterator  iterator1  =  p1.getPathIterator(p1,  p2);  [BUGGY]      PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	PathIterator  iterator1  =  p1.getPathIterator(p1,  p2);	  PathIterator    iterator1    =    p1.getPathIterator(null,    p2);    	non-compiled	[CE]  no  suitable  method  found  for  getPathIterator(GeneralPath,GeneralPath)	15	None	replace
4	[BUG]  [BUGGY]  PathIterator  iterator1  =  p1.getPathIterator(p2,  null);  [CE]  no  suitable  method  found  for  getPathIterator(GeneralPath,<null>)  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]  PathIterator  iterator1  =  p1.getPathIterator(p2,  null);  [BUGGY]      PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	PathIterator  iterator1  =  p1.getPathIterator(p2,  null);	  PathIterator    iterator1    =    p1.getPathIterator(null,    p2);    	non-compiled	[CE]  no  suitable  method  found  for  getPathIterator(GeneralPath,<null>)	15	None	replace
5	[BUG]  [BUGGY]  if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]  if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }	          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
7	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
9	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
11	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
12	[BUG]  [BUGGY]  if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]  if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
14	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
16	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
18	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
19	[BUG]  [BUGGY]  int  seg1  =  iterator1.currentSegment(d2);  [CE]  cannot  find  symbol  d2  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]  int  seg1  =  iterator1.currentSegment(d2);  [BUGGY]      PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	int  seg1  =  iterator1.currentSegment(d2);	  int    seg1    =    iterator1.currentSegment(d1);    	non-compiled	[CE]  cannot  find  symbol  d2	18	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
21	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
22	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.	  	non-compiled	[CE]  ')'  expected	10	None	add
23	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
25	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
26	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.	  	non-compiled	[CE]  ')'  expected	6	None	add
27	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p	  	non-compiled	[CE]  ')'  expected	6	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
29	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
30	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.	  	non-compiled	[CE]  ')'  expected	12	None	add
31	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.	  	non-compiled	[CE]  ')'  expected	12	None	add
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
33	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
34	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.	  	non-compiled	[CE]  ')'  expected	8	None	add
35	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.	  	non-compiled	[CE]  ')'  expected	8	None	add
36	[BUG]  [BUGGY]  PathIterator  iterator2  =  p1.getPathIterator(p2);  [CE]  no  suitable  method  found  for  getPathIterator(GeneralPath)  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]  PathIterator  iterator2  =  p1.getPathIterator(p2);  [BUGGY]      PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	PathIterator  iterator2  =  p1.getPathIterator(p2);	  PathIterator    iterator2    =    p1.getPathIterator(null);    	non-compiled	[CE]  no  suitable  method  found  for  getPathIterator(GeneralPath)	22	None	replace
37	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  return  false;  }  [CE]  cannot  find  symbol  iterator1  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	if(p1  ==  null  ||  p2!=  null)  {  return  false;  }	  if(p1    ==    null    ||    p2    ==    null)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  iterator1	5	None	replace
38	[BUG]  [BUGGY]  if(p2  ==  null)  {  return  false;  }  [CE]  cannot  find  symbol  iterator1  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]  if(p2  ==  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	if(p2  ==  null)  {  return  false;  }	          if(p1    ==    null)    {    return    false;    }    If(p1    ==    null)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  iterator1	20	None	replace
39	[BUG]  [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
41	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
43	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
44	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p3.getWindingRule())  {  return  false;  }  [CE]  cannot  find  symbol  p3  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p3.getWindingRule())  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p3.getWindingRule())  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  p3	6	None	add
45	[BUG]  [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }	          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
46	[BUG]  [BUGGY]  if(p2!=  null)  {  return  false;  }  [CE]  cannot  find  symbol  iterator1  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]  if(p2!=  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	if(p2!=  null)  {  return  false;  }	  if(p1!=    null)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  iterator1	21	None	replace
47	[BUG]  [BUGGY]  boolean  done  =  iterator2.isDone()  &&  iterator1.isDone();  [CE]  cannot  find  symbol  iterator2  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]  boolean  done  =  iterator2.isDone()  &&  iterator1.isDone();  [BUGGY]      PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	boolean  done  =  iterator2.isDone()  &&  iterator1.isDone();	  boolean    done    =    iterator1.isDone()    &&    iterator2.isDone();    	non-compiled	[CE]  cannot  find  symbol  iterator2	17	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
49	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
50	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
51	[BUG]  [BUGGY]  PathIterator  iterator2  =  p2.getPathIterator(null);  [CE]  variable  iterator2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]  PathIterator  iterator2  =  p2.getPathIterator(null);  [BUGGY]      PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	PathIterator  iterator2  =  p2.getPathIterator(null);	  PathIterator    iterator2    =    p1.getPathIterator(null);    	non-compiled	[CE]  variable  iterator2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	22	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
53	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
54	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p3.getWindingRule())  {  return  false;  }  [CE]  cannot  find  symbol  p3  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p3.getWindingRule())  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p3.getWindingRule())  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  p3	8	None	add
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
56	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
57	[BUG]  [BUGGY]  PathIterator  iterator2  =  p1.getPathIterator(null,  p2);  [CE]  no  suitable  method  found  for  getPathIterator(<null>,GeneralPath)  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]  PathIterator  iterator2  =  p1.getPathIterator(null,  p2);  [BUGGY]      PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	PathIterator  iterator2  =  p1.getPathIterator(null,  p2);	  PathIterator    iterator2    =    p1.getPathIterator(null);    	non-compiled	[CE]  no  suitable  method  found  for  getPathIterator(<null>,GeneralPath)	22	None	replace
58	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.	  	non-compiled	[CE]  ')'  expected	6	None	add
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
60	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
61	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.	  	non-compiled	[CE]  ')'  expected	8	None	add
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
63	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
64	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2  ==  null)return  false;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]  if(p1  ==  null  ||  p2  ==  null)return  false;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	if(p1  ==  null  ||  p2  ==  null)return  false;  }	  if(p1    ==    null    ||    p2    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
65	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.	  	non-compiled	[CE]  ')'  expected	10	None	add
66	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p	  	non-compiled	[CE]  ')'  expected	10	None	add
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
68	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
69	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p1.  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p1.  [BUGGY]      PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p1.	  	non-compiled	[CE]  ')'  expected	12	None	add
