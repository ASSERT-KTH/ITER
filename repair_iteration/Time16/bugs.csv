bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength()); [FE] AssertionFailedError [CONTEXT] public String print(ReadableInstant instant) { [BUGGY] StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength()); [BUGGY] printTo(buf, instant); return buf.toString(); } [CLASS] DateTimeFormatter [METHOD] print [RETURN_TYPE] String  ReadableInstant instant [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser ReadableInstant instant StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear pivotYear  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7337993857053429	582	582	7	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public String print(ReadableInstant instant) { [BUGGY] [BUGGY] StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength()); printTo(buf, instant); return buf.toString(); } [CLASS] DateTimeFormatter [METHOD] print [RETURN_TYPE] String  ReadableInstant instant [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser ReadableInstant instant StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear pivotYear  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7337993857053429	582	582	7	add	
3	[BUG] [BUGGY] printTo(buf, instant); [FE] AssertionFailedError [CONTEXT] public String print(ReadableInstant instant) { StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength()); [BUGGY] printTo(buf, instant); [BUGGY] return buf.toString(); } [CLASS] DateTimeFormatter [METHOD] print [RETURN_TYPE] String  ReadableInstant instant [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser ReadableInstant instant StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear pivotYear  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7337993857053429	583	583	7	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public String print(ReadableInstant instant) { StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength()); [BUGGY] [BUGGY] printTo(buf, instant); return buf.toString(); } [CLASS] DateTimeFormatter [METHOD] print [RETURN_TYPE] String  ReadableInstant instant [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser ReadableInstant instant StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear pivotYear  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7337993857053429	583	583	7	add	
5	[BUG] [BUGGY] return buf.toString(); [FE] AssertionFailedError [CONTEXT] public String print(ReadableInstant instant) { StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength()); printTo(buf, instant); [BUGGY] return buf.toString(); [BUGGY] } [CLASS] DateTimeFormatter [METHOD] print [RETURN_TYPE] String  ReadableInstant instant [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser ReadableInstant instant StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear pivotYear  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7337993857053429	584	584	7	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public String print(ReadableInstant instant) { StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength()); printTo(buf, instant); [BUGGY] [BUGGY] return buf.toString(); } [CLASS] DateTimeFormatter [METHOD] print [RETURN_TYPE] String  ReadableInstant instant [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser ReadableInstant instant StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear pivotYear  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7337993857053429	584	584	7	add	
7	[BUG] [BUGGY] long millis = DateTimeUtils.getInstantMillis(instant); [FE] AssertionFailedError [CONTEXT] public void printTo(StringBuffer buf, ReadableInstant instant) { [BUGGY] long millis = DateTimeUtils.getInstantMillis(instant); [BUGGY] Chronology chrono = DateTimeUtils.getInstantChronology(instant); printTo(buf, millis, chrono); } [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf ReadableInstant instant [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf ReadableInstant instant boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear pivotYear long millis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	459	459	7	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void printTo(StringBuffer buf, ReadableInstant instant) { [BUGGY] [BUGGY] long millis = DateTimeUtils.getInstantMillis(instant); Chronology chrono = DateTimeUtils.getInstantChronology(instant); printTo(buf, millis, chrono); } [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf ReadableInstant instant [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf ReadableInstant instant boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear pivotYear long millis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	459	459	7	add	
9	[BUG] [BUGGY] Chronology chrono = DateTimeUtils.getInstantChronology(instant); [FE] AssertionFailedError [CONTEXT] public void printTo(StringBuffer buf, ReadableInstant instant) { long millis = DateTimeUtils.getInstantMillis(instant); [BUGGY] Chronology chrono = DateTimeUtils.getInstantChronology(instant); [BUGGY] printTo(buf, millis, chrono); } [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf ReadableInstant instant [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf ReadableInstant instant boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear pivotYear long millis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	460	460	7	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void printTo(StringBuffer buf, ReadableInstant instant) { long millis = DateTimeUtils.getInstantMillis(instant); [BUGGY] [BUGGY] Chronology chrono = DateTimeUtils.getInstantChronology(instant); printTo(buf, millis, chrono); } [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf ReadableInstant instant [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf ReadableInstant instant boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear pivotYear long millis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	460	460	7	add	
11	[BUG] [BUGGY] printTo(buf, millis, chrono); [FE] AssertionFailedError [CONTEXT] public void printTo(StringBuffer buf, ReadableInstant instant) { long millis = DateTimeUtils.getInstantMillis(instant); Chronology chrono = DateTimeUtils.getInstantChronology(instant); [BUGGY] printTo(buf, millis, chrono); [BUGGY] } [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf ReadableInstant instant [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf ReadableInstant instant boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear pivotYear long millis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	461	461	7	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void printTo(StringBuffer buf, ReadableInstant instant) { long millis = DateTimeUtils.getInstantMillis(instant); Chronology chrono = DateTimeUtils.getInstantChronology(instant); [BUGGY] [BUGGY] printTo(buf, millis, chrono); } [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf ReadableInstant instant [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf ReadableInstant instant boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear pivotYear long millis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	461	461	7	add	
13	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public void printTo(StringBuffer buf, ReadableInstant instant) { long millis = DateTimeUtils.getInstantMillis(instant); Chronology chrono = DateTimeUtils.getInstantChronology(instant); printTo(buf, millis, chrono); [BUGGY] } [BUGGY]  [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf ReadableInstant instant [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf ReadableInstant instant boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear pivotYear long millis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	462	462	7	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void printTo(StringBuffer buf, ReadableInstant instant) { long millis = DateTimeUtils.getInstantMillis(instant); Chronology chrono = DateTimeUtils.getInstantChronology(instant); printTo(buf, millis, chrono); [BUGGY] [BUGGY] } [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf ReadableInstant instant [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf ReadableInstant instant boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear pivotYear long millis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	462	462	7	add	
15	[BUG] [BUGGY] DateTimeParser parser = requireParser(); [FE] AssertionFailedError [CONTEXT] public int parseInto(ReadWritableInstant instant, String text, int position) { [BUGGY] DateTimeParser parser = requireParser(); [BUGGY] if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	698	698	7	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int parseInto(ReadWritableInstant instant, String text, int position) { [BUGGY] [BUGGY] DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	698	698	7	add	
17	[BUG] [BUGGY] if (instant == null) { [FE] AssertionFailedError [CONTEXT] public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); [BUGGY] if (instant == null) { [BUGGY] throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	699	699	7	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); [BUGGY] [BUGGY] if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	699	699	7	add	
19	[BUG] [BUGGY] long instantMillis = instant.getMillis(); [FE] AssertionFailedError [CONTEXT] public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } [BUGGY] long instantMillis = instant.getMillis(); [BUGGY] Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	703	703	7	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } [BUGGY] [BUGGY] long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	703	703	7	add	
21	[BUG] [BUGGY] Chronology chrono = instant.getChronology(); [FE] AssertionFailedError [CONTEXT] public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); [BUGGY] Chronology chrono = instant.getChronology(); [BUGGY] long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	704	704	7	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); [BUGGY] [BUGGY] Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	704	704	7	add	
23	[BUG] [BUGGY] long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); [FE] AssertionFailedError [CONTEXT] public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); [BUGGY] long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); [BUGGY] chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	705	705	7	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); [BUGGY] [BUGGY] long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	705	705	7	add	
25	[BUG] [BUGGY] chrono = selectChronology(chrono); [FE] AssertionFailedError [CONTEXT] public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); [BUGGY] chrono = selectChronology(chrono); [BUGGY]  DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	706	706	7	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); [BUGGY] [BUGGY] chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	706	706	7	add	
27	[BUG] [BUGGY] DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); [FE] AssertionFailedError [CONTEXT] DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); [BUGGY] DateTimeParserBucket bucket = new DateTimeParserBucket(   instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); [BUGGY] instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	708	709	7	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); [BUGGY] [BUGGY] DateTimeParserBucket bucket = new DateTimeParserBucket(   instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	708	709	7	add	
29	[BUG] [BUGGY] int newPos = parser.parseInto(bucket, text, position); [FE] AssertionFailedError [CONTEXT] throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); [BUGGY] int newPos = parser.parseInto(bucket, text, position); [BUGGY] instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	710	710	7	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); [BUGGY] [BUGGY] int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	710	710	7	add	
31	[BUG] [BUGGY] instant.setMillis(bucket.computeMillis(false, text)); [FE] AssertionFailedError [CONTEXT] } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); [BUGGY] instant.setMillis(bucket.computeMillis(false, text)); [BUGGY] if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	711	711	7	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); [BUGGY] [BUGGY] instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	711	711	7	add	
33	[BUG] [BUGGY] if (iOffsetParsed && bucket.getOffsetInteger() != null) { [FE] AssertionFailedError [CONTEXT] long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); [BUGGY] if (iOffsetParsed && bucket.getOffsetInteger() != null) { [BUGGY] int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); } [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	712	712	7	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); [BUGGY] [BUGGY] if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); } [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	712	712	7	add	
35	[BUG] [BUGGY] } else if (bucket.getZone() != null) { [FE] AssertionFailedError [CONTEXT] chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); [BUGGY] } else if (bucket.getZone() != null) { [BUGGY] chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); } return newPos; } [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	716	716	7	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); [BUGGY] [BUGGY] } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); } return newPos; } [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	716	716	7	add	
37	[BUG] [BUGGY] chrono = chrono.withZone(bucket.getZone()); [FE] AssertionFailedError [CONTEXT] DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { [BUGGY] chrono = chrono.withZone(bucket.getZone()); [BUGGY] } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); } return newPos; } [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	717	717	7	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { [BUGGY] [BUGGY] chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); } return newPos; } [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	717	717	7	add	
39	[BUG] [BUGGY] instant.setChronology(chrono); [FE] AssertionFailedError [CONTEXT] instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } [BUGGY] instant.setChronology(chrono); [BUGGY] if (iZone != null) { instant.setZone(iZone); } return newPos; } [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	719	719	7	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } [BUGGY] [BUGGY] instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); } return newPos; } [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	719	719	7	add	
41	[BUG] [BUGGY] if (iZone != null) { [FE] AssertionFailedError [CONTEXT] int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); [BUGGY] if (iZone != null) { [BUGGY] instant.setZone(iZone); } return newPos; } [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	720	720	7	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); [BUGGY] [BUGGY] if (iZone != null) { instant.setZone(iZone); } return newPos; } [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	720	720	7	add	
43	[BUG] [BUGGY] return newPos; [FE] AssertionFailedError [CONTEXT] int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); } [BUGGY] return newPos; [BUGGY] } [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	723	723	7	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); } [BUGGY] [BUGGY] return newPos; } [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	723	723	7	add	
45	[BUG] [BUGGY] DateTimePrinter printer = requirePrinter(); [FE] AssertionFailedError [CONTEXT] private void printTo(StringBuffer buf, long instant, Chronology chrono) { [BUGGY] DateTimePrinter printer = requirePrinter(); [BUGGY] chrono = selectChronology(chrono);   DateTimeZone zone = chrono.getZone(); int offset = zone.getOffset(instant); long adjustedInstant = instant + offset; if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {  zone = DateTimeZone.UTC; offset = 0; [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf long instant Chronology chrono [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear long adjustedInstant instant  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6831300510639733	618	618	7	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void printTo(StringBuffer buf, long instant, Chronology chrono) { [BUGGY] [BUGGY] DateTimePrinter printer = requirePrinter(); chrono = selectChronology(chrono);   DateTimeZone zone = chrono.getZone(); int offset = zone.getOffset(instant); long adjustedInstant = instant + offset; if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {  zone = DateTimeZone.UTC; offset = 0; [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf long instant Chronology chrono [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear long adjustedInstant instant  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6831300510639733	618	618	7	add	
47	[BUG] [BUGGY] chrono = selectChronology(chrono); [FE] AssertionFailedError [CONTEXT] private void printTo(StringBuffer buf, long instant, Chronology chrono) { DateTimePrinter printer = requirePrinter(); [BUGGY] chrono = selectChronology(chrono); [BUGGY]   DateTimeZone zone = chrono.getZone(); int offset = zone.getOffset(instant); long adjustedInstant = instant + offset; if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {  zone = DateTimeZone.UTC; offset = 0; adjustedInstant = instant; [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf long instant Chronology chrono [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear long adjustedInstant instant  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6831300510639733	619	619	7	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void printTo(StringBuffer buf, long instant, Chronology chrono) { DateTimePrinter printer = requirePrinter(); [BUGGY] [BUGGY] chrono = selectChronology(chrono);   DateTimeZone zone = chrono.getZone(); int offset = zone.getOffset(instant); long adjustedInstant = instant + offset; if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {  zone = DateTimeZone.UTC; offset = 0; adjustedInstant = instant; [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf long instant Chronology chrono [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear long adjustedInstant instant  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6831300510639733	619	619	7	add	
49	[BUG] [BUGGY] DateTimeZone zone = chrono.getZone(); [FE] AssertionFailedError [CONTEXT] private void printTo(StringBuffer buf, long instant, Chronology chrono) { DateTimePrinter printer = requirePrinter(); chrono = selectChronology(chrono);   [BUGGY] DateTimeZone zone = chrono.getZone(); [BUGGY] int offset = zone.getOffset(instant); long adjustedInstant = instant + offset; if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {  zone = DateTimeZone.UTC; offset = 0; adjustedInstant = instant; } printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale); } [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf long instant Chronology chrono [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear long adjustedInstant instant  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6831300510639733	622	622	7	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void printTo(StringBuffer buf, long instant, Chronology chrono) { DateTimePrinter printer = requirePrinter(); chrono = selectChronology(chrono);   [BUGGY] [BUGGY] DateTimeZone zone = chrono.getZone(); int offset = zone.getOffset(instant); long adjustedInstant = instant + offset; if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {  zone = DateTimeZone.UTC; offset = 0; adjustedInstant = instant; } printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale); } [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf long instant Chronology chrono [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear long adjustedInstant instant  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6831300510639733	622	622	7	add	
51	[BUG] [BUGGY] int offset = zone.getOffset(instant); [FE] AssertionFailedError [CONTEXT] private void printTo(StringBuffer buf, long instant, Chronology chrono) { DateTimePrinter printer = requirePrinter(); chrono = selectChronology(chrono);   DateTimeZone zone = chrono.getZone(); [BUGGY] int offset = zone.getOffset(instant); [BUGGY] long adjustedInstant = instant + offset; if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {  zone = DateTimeZone.UTC; offset = 0; adjustedInstant = instant; } printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale); } [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf long instant Chronology chrono [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear long adjustedInstant instant  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6831300510639733	623	623	7	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void printTo(StringBuffer buf, long instant, Chronology chrono) { DateTimePrinter printer = requirePrinter(); chrono = selectChronology(chrono);   DateTimeZone zone = chrono.getZone(); [BUGGY] [BUGGY] int offset = zone.getOffset(instant); long adjustedInstant = instant + offset; if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {  zone = DateTimeZone.UTC; offset = 0; adjustedInstant = instant; } printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale); } [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf long instant Chronology chrono [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear long adjustedInstant instant  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6831300510639733	623	623	7	add	
53	[BUG] [BUGGY] long adjustedInstant = instant + offset; [FE] AssertionFailedError [CONTEXT] private void printTo(StringBuffer buf, long instant, Chronology chrono) { DateTimePrinter printer = requirePrinter(); chrono = selectChronology(chrono);   DateTimeZone zone = chrono.getZone(); int offset = zone.getOffset(instant); [BUGGY] long adjustedInstant = instant + offset; [BUGGY] if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {  zone = DateTimeZone.UTC; offset = 0; adjustedInstant = instant; } printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale); } [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf long instant Chronology chrono [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear long adjustedInstant instant  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6831300510639733	624	624	7	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void printTo(StringBuffer buf, long instant, Chronology chrono) { DateTimePrinter printer = requirePrinter(); chrono = selectChronology(chrono);   DateTimeZone zone = chrono.getZone(); int offset = zone.getOffset(instant); [BUGGY] [BUGGY] long adjustedInstant = instant + offset; if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {  zone = DateTimeZone.UTC; offset = 0; adjustedInstant = instant; } printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale); } [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf long instant Chronology chrono [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear long adjustedInstant instant  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6831300510639733	624	624	7	add	
55	[BUG] [BUGGY] if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) { [FE] AssertionFailedError [CONTEXT] private void printTo(StringBuffer buf, long instant, Chronology chrono) { DateTimePrinter printer = requirePrinter(); chrono = selectChronology(chrono);   DateTimeZone zone = chrono.getZone(); int offset = zone.getOffset(instant); long adjustedInstant = instant + offset; [BUGGY] if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) { [BUGGY]  zone = DateTimeZone.UTC; offset = 0; adjustedInstant = instant; } printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale); } [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf long instant Chronology chrono [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear long adjustedInstant instant  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6831300510639733	625	625	7	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void printTo(StringBuffer buf, long instant, Chronology chrono) { DateTimePrinter printer = requirePrinter(); chrono = selectChronology(chrono);   DateTimeZone zone = chrono.getZone(); int offset = zone.getOffset(instant); long adjustedInstant = instant + offset; [BUGGY] [BUGGY] if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {  zone = DateTimeZone.UTC; offset = 0; adjustedInstant = instant; } printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale); } [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf long instant Chronology chrono [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear long adjustedInstant instant  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6831300510639733	625	625	7	add	
57	[BUG] [BUGGY] printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale); [FE] AssertionFailedError [CONTEXT]  DateTimeZone zone = chrono.getZone(); int offset = zone.getOffset(instant); long adjustedInstant = instant + offset; if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {  zone = DateTimeZone.UTC; offset = 0; adjustedInstant = instant; } [BUGGY] printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale); [BUGGY] } [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf long instant Chronology chrono [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear long adjustedInstant instant  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6831300510639733	631	631	7	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  DateTimeZone zone = chrono.getZone(); int offset = zone.getOffset(instant); long adjustedInstant = instant + offset; if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {  zone = DateTimeZone.UTC; offset = 0; adjustedInstant = instant; } [BUGGY] [BUGGY] printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale); } [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf long instant Chronology chrono [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear long adjustedInstant instant  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6831300510639733	631	631	7	add	
59	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] DateTimeZone zone = chrono.getZone(); int offset = zone.getOffset(instant); long adjustedInstant = instant + offset; if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {  zone = DateTimeZone.UTC; offset = 0; adjustedInstant = instant; } printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale); [BUGGY] } [BUGGY]  [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf long instant Chronology chrono [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear long adjustedInstant instant  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6831300510639733	632	632	7	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] DateTimeZone zone = chrono.getZone(); int offset = zone.getOffset(instant); long adjustedInstant = instant + offset; if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {  zone = DateTimeZone.UTC; offset = 0; adjustedInstant = instant; } printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale); [BUGGY] [BUGGY] } [CLASS] DateTimeFormatter [METHOD] printTo [RETURN_TYPE] void  StringBuffer buf long instant Chronology chrono [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser StringBuffer buf boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear long adjustedInstant instant  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6831300510639733	632	632	7	add	
61	[BUG] [BUGGY] DateTimePrinter printer = iPrinter; [FE] AssertionFailedError [CONTEXT] private DateTimePrinter requirePrinter() { [BUGGY] DateTimePrinter printer = iPrinter; [BUGGY] if (printer == null) { throw new UnsupportedOperationException("Printing not supported"); } return printer; } [CLASS] DateTimeFormatter [METHOD] requirePrinter [RETURN_TYPE] DateTimePrinter  [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6614378277661476	657	657	7	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private DateTimePrinter requirePrinter() { [BUGGY] [BUGGY] DateTimePrinter printer = iPrinter; if (printer == null) { throw new UnsupportedOperationException("Printing not supported"); } return printer; } [CLASS] DateTimeFormatter [METHOD] requirePrinter [RETURN_TYPE] DateTimePrinter  [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6614378277661476	657	657	7	add	
63	[BUG] [BUGGY] if (printer == null) { [FE] AssertionFailedError [CONTEXT] private DateTimePrinter requirePrinter() { DateTimePrinter printer = iPrinter; [BUGGY] if (printer == null) { [BUGGY] throw new UnsupportedOperationException("Printing not supported"); } return printer; } [CLASS] DateTimeFormatter [METHOD] requirePrinter [RETURN_TYPE] DateTimePrinter  [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6614378277661476	658	658	7	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private DateTimePrinter requirePrinter() { DateTimePrinter printer = iPrinter; [BUGGY] [BUGGY] if (printer == null) { throw new UnsupportedOperationException("Printing not supported"); } return printer; } [CLASS] DateTimeFormatter [METHOD] requirePrinter [RETURN_TYPE] DateTimePrinter  [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6614378277661476	658	658	7	add	
65	[BUG] [BUGGY] return printer; [FE] AssertionFailedError [CONTEXT] private DateTimePrinter requirePrinter() { DateTimePrinter printer = iPrinter; if (printer == null) { throw new UnsupportedOperationException("Printing not supported"); } [BUGGY] return printer; [BUGGY] } [CLASS] DateTimeFormatter [METHOD] requirePrinter [RETURN_TYPE] DateTimePrinter  [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6614378277661476	661	661	7	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private DateTimePrinter requirePrinter() { DateTimePrinter printer = iPrinter; if (printer == null) { throw new UnsupportedOperationException("Printing not supported"); } [BUGGY] [BUGGY] return printer; } [CLASS] DateTimeFormatter [METHOD] requirePrinter [RETURN_TYPE] DateTimePrinter  [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear offset pivotYear  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6614378277661476	661	661	7	add	
67	[BUG] [BUGGY] if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) { [FE] AssertionFailedError [CONTEXT] public DateTimeFormatter withLocale(Locale locale) { [BUGGY] if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) { [BUGGY] return this; } return new DateTimeFormatter(iPrinter, iParser, locale, iOffsetParsed, iChrono, iZone, iPivotYear, iDefaultYear); } [CLASS] DateTimeFormatter [METHOD] withLocale [RETURN_TYPE] DateTimeFormatter  Locale locale [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6060915267313265	188	188	7	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public DateTimeFormatter withLocale(Locale locale) { [BUGGY] [BUGGY] if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) { return this; } return new DateTimeFormatter(iPrinter, iParser, locale, iOffsetParsed, iChrono, iZone, iPivotYear, iDefaultYear); } [CLASS] DateTimeFormatter [METHOD] withLocale [RETURN_TYPE] DateTimeFormatter  Locale locale [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6060915267313265	188	188	7	add	
69	[BUG] [BUGGY] return new DateTimeFormatter(iPrinter, iParser, locale, iOffsetParsed, iChrono, iZone, iPivotYear, iDefaultYear); [FE] AssertionFailedError [CONTEXT] public DateTimeFormatter withLocale(Locale locale) { if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) { return this; } [BUGGY] return new DateTimeFormatter(iPrinter, iParser, locale,    iOffsetParsed, iChrono, iZone, iPivotYear, iDefaultYear); [BUGGY] iOffsetParsed, iChrono, iZone, iPivotYear, iDefaultYear); } [CLASS] DateTimeFormatter [METHOD] withLocale [RETURN_TYPE] DateTimeFormatter  Locale locale [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6060915267313265	191	192	7	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public DateTimeFormatter withLocale(Locale locale) { if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) { return this; } [BUGGY] [BUGGY] return new DateTimeFormatter(iPrinter, iParser, locale,    iOffsetParsed, iChrono, iZone, iPivotYear, iDefaultYear); iOffsetParsed, iChrono, iZone, iPivotYear, iDefaultYear); } [CLASS] DateTimeFormatter [METHOD] withLocale [RETURN_TYPE] DateTimeFormatter  Locale locale [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6060915267313265	191	192	7	add	
71	[BUG] [BUGGY] return iLocale; [FE] AssertionFailedError [CONTEXT] public Locale getLocale() { [BUGGY] return iLocale; [BUGGY] } [CLASS] DateTimeFormatter [METHOD] getLocale [RETURN_TYPE] Locale  [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6060915267313265	202	202	7	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Locale getLocale() { [BUGGY] [BUGGY] return iLocale; } [CLASS] DateTimeFormatter [METHOD] getLocale [RETURN_TYPE] Locale  [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone zone int defaultYear iDefaultYear  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.6060915267313265	202	202	7	add	
73	[BUG] [BUGGY] DateTimeParser parser = iParser; [FE] AssertionFailedError [CONTEXT] private DateTimeParser requireParser() { [BUGGY] DateTimeParser parser = iParser; [BUGGY] if (parser == null) { throw new UnsupportedOperationException("Parsing not supported"); } return parser; } [CLASS] DateTimeFormatter [METHOD] requireParser [RETURN_TYPE] DateTimeParser  [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.3779644730092272	924	924	7	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private DateTimeParser requireParser() { [BUGGY] [BUGGY] DateTimeParser parser = iParser; if (parser == null) { throw new UnsupportedOperationException("Parsing not supported"); } return parser; } [CLASS] DateTimeFormatter [METHOD] requireParser [RETURN_TYPE] DateTimeParser  [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.3779644730092272	924	924	7	add	
75	[BUG] [BUGGY] if (parser == null) { [FE] AssertionFailedError [CONTEXT] private DateTimeParser requireParser() { DateTimeParser parser = iParser; [BUGGY] if (parser == null) { [BUGGY] throw new UnsupportedOperationException("Parsing not supported"); } return parser; } [CLASS] DateTimeFormatter [METHOD] requireParser [RETURN_TYPE] DateTimeParser  [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.3779644730092272	925	925	7	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private DateTimeParser requireParser() { DateTimeParser parser = iParser; [BUGGY] [BUGGY] if (parser == null) { throw new UnsupportedOperationException("Parsing not supported"); } return parser; } [CLASS] DateTimeFormatter [METHOD] requireParser [RETURN_TYPE] DateTimeParser  [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed Chronology chrono iChrono DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.3779644730092272	925	925	7	add	
77	[BUG] [BUGGY] return parser; [FE] AssertionFailedError [CONTEXT] private DateTimeParser requireParser() { DateTimeParser parser = iParser; if (parser == null) { throw new UnsupportedOperationException("Parsing not supported"); } [BUGGY] return parser; [BUGGY] }     [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.3779644730092272	928	928	7	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private DateTimeParser requireParser() { DateTimeParser parser = iParser; if (parser == null) { throw new UnsupportedOperationException("Parsing not supported"); } [BUGGY] [BUGGY] return parser; }     [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.3779644730092272	928	928	7	add	
79	[BUG] [BUGGY] super(); [FE] AssertionFailedError [CONTEXT] private DateTimeFormatter( DateTimePrinter printer, DateTimeParser parser, Locale locale, boolean offsetParsed, Chronology chrono, DateTimeZone zone, Integer pivotYear, int defaultYear) { [BUGGY] super(); [BUGGY] iPrinter = printer; iParser = parser; iLocale = locale; iOffsetParsed = offsetParsed; iChrono = chrono; [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	127	127	7	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private DateTimeFormatter( DateTimePrinter printer, DateTimeParser parser, Locale locale, boolean offsetParsed, Chronology chrono, DateTimeZone zone, Integer pivotYear, int defaultYear) { [BUGGY] [BUGGY] super(); iPrinter = printer; iParser = parser; iLocale = locale; iOffsetParsed = offsetParsed; iChrono = chrono; [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	127	127	7	add	
81	[BUG] [BUGGY] iPrinter = printer; [FE] AssertionFailedError [CONTEXT] DateTimePrinter printer, DateTimeParser parser, Locale locale, boolean offsetParsed, Chronology chrono, DateTimeZone zone, Integer pivotYear, int defaultYear) { super(); [BUGGY] iPrinter = printer; [BUGGY] iParser = parser; iLocale = locale; iOffsetParsed = offsetParsed; iChrono = chrono; iZone = zone; [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	128	128	7	replace	
82	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] DateTimePrinter printer, DateTimeParser parser, Locale locale, boolean offsetParsed, Chronology chrono, DateTimeZone zone, Integer pivotYear, int defaultYear) { super(); [BUGGY] [BUGGY] iPrinter = printer; iParser = parser; iLocale = locale; iOffsetParsed = offsetParsed; iChrono = chrono; iZone = zone; [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	128	128	7	add	
83	[BUG] [BUGGY] iParser = parser; [FE] AssertionFailedError [CONTEXT] Locale locale, boolean offsetParsed, Chronology chrono, DateTimeZone zone, Integer pivotYear, int defaultYear) { super(); iPrinter = printer; [BUGGY] iParser = parser; [BUGGY] iLocale = locale; iOffsetParsed = offsetParsed; iChrono = chrono; iZone = zone; iPivotYear = pivotYear; [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	129	129	7	replace	
84	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Locale locale, boolean offsetParsed, Chronology chrono, DateTimeZone zone, Integer pivotYear, int defaultYear) { super(); iPrinter = printer; [BUGGY] [BUGGY] iParser = parser; iLocale = locale; iOffsetParsed = offsetParsed; iChrono = chrono; iZone = zone; iPivotYear = pivotYear; [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	129	129	7	add	
85	[BUG] [BUGGY] iLocale = locale; [FE] AssertionFailedError [CONTEXT] Chronology chrono, DateTimeZone zone, Integer pivotYear, int defaultYear) { super(); iPrinter = printer; iParser = parser; [BUGGY] iLocale = locale; [BUGGY] iOffsetParsed = offsetParsed; iChrono = chrono; iZone = zone; iPivotYear = pivotYear; iDefaultYear = defaultYear; [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	130	130	7	replace	
86	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Chronology chrono, DateTimeZone zone, Integer pivotYear, int defaultYear) { super(); iPrinter = printer; iParser = parser; [BUGGY] [BUGGY] iLocale = locale; iOffsetParsed = offsetParsed; iChrono = chrono; iZone = zone; iPivotYear = pivotYear; iDefaultYear = defaultYear; [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	130	130	7	add	
87	[BUG] [BUGGY] iOffsetParsed = offsetParsed; [FE] AssertionFailedError [CONTEXT] Integer pivotYear, int defaultYear) { super(); iPrinter = printer; iParser = parser; iLocale = locale; [BUGGY] iOffsetParsed = offsetParsed; [BUGGY] iChrono = chrono; iZone = zone; iPivotYear = pivotYear; iDefaultYear = defaultYear; } [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	131	131	7	replace	
88	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Integer pivotYear, int defaultYear) { super(); iPrinter = printer; iParser = parser; iLocale = locale; [BUGGY] [BUGGY] iOffsetParsed = offsetParsed; iChrono = chrono; iZone = zone; iPivotYear = pivotYear; iDefaultYear = defaultYear; } [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	131	131	7	add	
89	[BUG] [BUGGY] iChrono = chrono; [FE] AssertionFailedError [CONTEXT] super(); iPrinter = printer; iParser = parser; iLocale = locale; iOffsetParsed = offsetParsed; [BUGGY] iChrono = chrono; [BUGGY] iZone = zone; iPivotYear = pivotYear; iDefaultYear = defaultYear; }  [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	132	132	7	replace	
90	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] super(); iPrinter = printer; iParser = parser; iLocale = locale; iOffsetParsed = offsetParsed; [BUGGY] [BUGGY] iChrono = chrono; iZone = zone; iPivotYear = pivotYear; iDefaultYear = defaultYear; }  [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	132	132	7	add	
91	[BUG] [BUGGY] iZone = zone; [FE] AssertionFailedError [CONTEXT] iPrinter = printer; iParser = parser; iLocale = locale; iOffsetParsed = offsetParsed; iChrono = chrono; [BUGGY] iZone = zone; [BUGGY] iPivotYear = pivotYear; iDefaultYear = defaultYear; }   [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	133	133	7	replace	
92	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] iPrinter = printer; iParser = parser; iLocale = locale; iOffsetParsed = offsetParsed; iChrono = chrono; [BUGGY] [BUGGY] iZone = zone; iPivotYear = pivotYear; iDefaultYear = defaultYear; }   [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	133	133	7	add	
93	[BUG] [BUGGY] iPivotYear = pivotYear; [FE] AssertionFailedError [CONTEXT] iParser = parser; iLocale = locale; iOffsetParsed = offsetParsed; iChrono = chrono; iZone = zone; [BUGGY] iPivotYear = pivotYear; [BUGGY] iDefaultYear = defaultYear; }    [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	134	134	7	replace	
94	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] iParser = parser; iLocale = locale; iOffsetParsed = offsetParsed; iChrono = chrono; iZone = zone; [BUGGY] [BUGGY] iPivotYear = pivotYear; iDefaultYear = defaultYear; }    [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	134	134	7	add	
95	[BUG] [BUGGY] iDefaultYear = defaultYear; [FE] AssertionFailedError [CONTEXT] iLocale = locale; iOffsetParsed = offsetParsed; iChrono = chrono; iZone = zone; iPivotYear = pivotYear; [BUGGY] iDefaultYear = defaultYear; [BUGGY] }     [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	135	135	7	replace	
96	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] iLocale = locale; iOffsetParsed = offsetParsed; iChrono = chrono; iZone = zone; iPivotYear = pivotYear; [BUGGY] [BUGGY] iDefaultYear = defaultYear; }     [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	135	135	7	add	
97	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] iOffsetParsed = offsetParsed; iChrono = chrono; iZone = zone; iPivotYear = pivotYear; iDefaultYear = defaultYear; [BUGGY] } [BUGGY]      [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	136	136	7	replace	
98	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] iOffsetParsed = offsetParsed; iChrono = chrono; iZone = zone; iPivotYear = pivotYear; iDefaultYear = defaultYear; [BUGGY] [BUGGY] }      [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.37047928681747416	136	136	7	add	
99	[BUG] [BUGGY] chrono = DateTimeUtils.getChronology(chrono); [FE] AssertionFailedError [CONTEXT]     private Chronology selectChronology(Chronology chrono) { [BUGGY] chrono = DateTimeUtils.getChronology(chrono); [BUGGY] if (iChrono != null) { chrono = iChrono; } if (iZone != null) { chrono = chrono.withZone(iZone); [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.35043832202523123	939	939	7	replace	
100	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]     private Chronology selectChronology(Chronology chrono) { [BUGGY] [BUGGY] chrono = DateTimeUtils.getChronology(chrono); if (iChrono != null) { chrono = iChrono; } if (iZone != null) { chrono = chrono.withZone(iZone); [CLASS] 	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.35043832202523123	939	939	7	add	
