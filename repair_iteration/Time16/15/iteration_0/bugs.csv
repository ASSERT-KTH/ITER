bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); [BUGGY] [BUGGY] DateTimeParserBucket bucket = new DateTimeParserBucket(   instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	708	709	7	add	
29	[BUG] [BUGGY] int newPos = parser.parseInto(bucket, text, position); [FE] AssertionFailedError [CONTEXT] throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); [BUGGY] int newPos = parser.parseInto(bucket, text, position); [BUGGY] instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { [CLASS] DateTimeFormatter [METHOD] parseInto [RETURN_TYPE] int  ReadWritableInstant instant String text int position [VARIABLES] Locale iLocale locale Integer iPivotYear pivotYear DateTimeParser iParser parser boolean iOffsetParsed offsetParsed DateTimeParserBucket bucket ReadWritableInstant instant Chronology chrono iChrono String text DateTimePrinter iPrinter printer DateTimeZone iZone parsedZone zone int defaultYear iDefaultYear newPos offset parsedOffset pivotYear position long instantLocal instantMillis  	projects/Time16/src/main/java/org/joda/time/format/DateTimeFormatter.java	0.7071067811865476	710	710	7	replace	
