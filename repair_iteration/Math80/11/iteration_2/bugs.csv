bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[5  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[5  +  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    1],    Math.min(work[3    +    pingPong],    work[5    +    pingPong]));    	non-compiled	[CE]  ';'  expected	16	None	replace
2	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[3  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[3  +  pingPong],  work[6  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[3  +  pingPong],  work[6  +  pingPong]));	      work[l    -    2    *    pingPong]    =    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	10	None	replace
3	[BUG]  [BUGGY]  work[l  -  2  *  pingPong]  =  Math.min(work[3  +  dMin2,  work[6  +  dMin]));  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  2  *  pingPong]  =  Math.min(work[3  +  dMin2,  work[6  +  dMin]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  2  *  pingPong]  =  Math.min(work[3  +  dMin2,  work[6  +  dMin]));	      work[l    -    2    *    pingPong]    =    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	10	None	replace
4	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[2  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[2  +  pingPong],  work[6  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[2  +  pingPong],  work[6  +  pingPong]));	      work[l    -    2    *    pingPong]    =    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	10	None	replace
5	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[2  *  pingPong],  work[3  +  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    1],    Math.min(work[2    +    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	4	None	replace
6	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    2],    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	3	None	replace
7	[BUG]  [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  2  *  pingPong],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  2  *  pingPong],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.max(work[l  -  2  *  pingPong],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    2],    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	3	None	replace
8	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  dMin2,  work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  dMin2,  work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  2  *  dMin2,  work[3  +  pingPong],  work[7  +  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    2],    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	3	None	replace
9	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pong],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pong],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  2  *  pong],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    2],    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	3	None	replace
10	[BUG]  [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[3  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[3  +  pingPong]));	      int    qMax    =    Math.max(qMax,    Math.max(work[l    -    1],    work[1    +    pingPong]));    	non-compiled	[CE]  ';'  expected	21	None	replace
11	[BUG]  [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[1  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[1  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	int  qMax  =  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[1  +  pingPong]));	      int    qMax    =    Math.max(qMax,    Math.max(work[l    -    1],    work[1    +    pingPong]));    	non-compiled	[CE]  ';'  expected	21	None	replace
12	[BUG]  [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[4  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[4  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[4  +  pingPong]));	      int    qMax    =    Math.max(qMax,    Math.max(work[l    -    1],    work[1    +    pingPong]));    	non-compiled	[CE]  ';'  expected	21	None	replace
13	[BUG]  [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[2  *  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[2  *  pingPong]));	      int    qMax    =    Math.max(qMax,    Math.max(work[l    -    1],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	22	None	replace
14	[BUG]  [BUGGY]  int  qMax  =  Math.max(qMax,  Math.min(work[l  -  1],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  int  qMax  =  Math.max(qMax,  Math.min(work[l  -  1],  work[2  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	int  qMax  =  Math.max(qMax,  Math.min(work[l  -  1],  work[2  +  pingPong]));	      int    qMax    =    Math.max(qMax,    Math.max(work[l    -    1],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	22	None	replace
15	[BUG]  [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));	      work[l    -    1]    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	11	None	replace
16	[BUG]  [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[2  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[2  +  pingPong]));	      work[l    -    1]    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	11	None	replace
17	[BUG]  [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[3  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[3  *  pingPong],  work[6  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[3  *  pingPong],  work[6  +  pingPong]));	      work[l    -    1]    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	11	None	replace
18	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));	      dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	8	None	replace
19	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  *  pingPong],  work[6  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  *  pingPong],  work[6  +  pingPong]));	      dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	8	None	replace
20	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[4  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[4  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[4  +  pingPong]));	      dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	8	None	replace
21	[BUG]  [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.max(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));	      work[l    -    2    *    pingPong]    =    Math.max(work[l    -    2    *    pingPong],    Math.min(work[6    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	7	None	replace
22	[BUG]  [BUGGY]  work[l  -  2]  =  Math.max(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  2]  =  Math.max(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  2]  =  Math.max(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));	      work[l    -    2    *    pingPong]    =    Math.max(work[l    -    2    *    pingPong],    Math.min(work[6    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	7	None	replace
23	[BUG]  [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[1  +  pingPong],  work[1  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[1  +  pingPong],  work[1  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[1  +  pingPong],  work[1  +  pingPong]));	      work[l    -    2    *    pingPong]    =    Math.max(work[l    -    2    *    pingPong],    Math.min(work[6    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	7	None	replace
24	[BUG]  [BUGGY]  dMin2  =  Math.max(dMin2,  work[l  -  9]);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(dMin2,  work[l  -  9]);  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.max(dMin2,  work[l  -  9]);	      dMin2    =    Math.max(dMin2,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	9	None	replace
25	[BUG]  [BUGGY]  dMin2  =  Math.max(dMin2,  work[l  -  2]);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(dMin2,  work[l  -  2]);  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.max(dMin2,  work[l  -  2]);	      dMin2    =    Math.max(dMin2,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	9	None	replace
26	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]);  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1]);	      dMin2    =    Math.max(dMin2,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	9	None	replace
27	[BUG]  [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong]));	      int    qMax    =    Math.max(qMax,    Math.max(work[l    -    1],    work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	19	None	replace
28	[BUG]  [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[3  +  pingPong],  work[4  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[3  +  pingPong],  work[4  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[3  +  pingPong],  work[4  +  pingPong]));	      int    qMax    =    Math.max(qMax,    Math.max(work[l    -    1],    work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	19	None	replace
29	[BUG]  [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[3  +  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[3  +  pingPong],  work[5  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[3  +  pingPong],  work[5  +  pingPong]));	      int    qMax    =    Math.max(qMax,    Math.max(work[l    -    1],    work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	19	None	replace
30	[BUG]  [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[2  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[2  *  pingPong],  work[6  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[2  *  pingPong],  work[6  +  pingPong]));	      work[l    -    1]    =    Math.max(work[l    -    1],    Math.min(work[2    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	12	None	replace
31	[BUG]  [BUGGY]  dMin2  =  Math.max(dMin2,  work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(dMin2,  work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.max(dMin2,  work[l  -  2  *  pingPong],  work[6  +  pingPong]));	      	non-compiled	[CE]  ';'  expected	5	None	replace
32	[BUG]  [BUGGY]  dMin2  =  Math.max(dMin2,  work[l  -  2  *  pingPong],  work[6  +  pingPong]);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(dMin2,  work[l  -  2  *  pingPong],  work[6  +  pingPong]);  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.max(dMin2,  work[l  -  2  *  pingPong],  work[6  +  pingPong]);	      	non-compiled	[CE]  ';'  expected	5	None	replace
33	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  2  *  pingPong],  work[3  +  pingPong]);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.min(work[l  -  2  *  pingPong],  work[3  +  pingPong]);  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.min(work[l  -  2  *  pingPong],  work[3  +  pingPong]);	      	non-compiled	[CE]  ';'  expected	5	None	replace
34	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  2  *  pingPong,  work[3  +  pingPong]);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.min(work[l  -  2  *  pingPong,  work[3  +  pingPong]);  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.min(work[l  -  2  *  pingPong,  work[3  +  pingPong]);	      	non-compiled	[CE]  ';'  expected	5	None	replace
35	[BUG]  [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  2  *  dMin2,  work[2  +  dMin]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  2  *  dMin2,  work[2  +  dMin]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.max(work[l  -  2  *  dMin2,  work[2  +  dMin]));	      work[l    -    1]    =    Math.max(work[l    -    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	14	None	replace
36	[BUG]  [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));	      work[l    -    1]    =    Math.max(work[l    -    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	14	None	replace
37	[BUG]  [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));	      work[l    -    1]    =    Math.max(work[l    -    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	14	None	replace
38	[BUG]  [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  2  *  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  2  *  pingPong],  work[7  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.max(work[l  -  2  *  pingPong],  work[7  +  pingPong]));	      work[l    -    1]    =    Math.max(work[l    -    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	14	None	replace
39	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  Math.min(work[3  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  Math.min(work[3  +  pingPong],  work[6  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  Math.min(work[3  +  pingPong],  work[6  +  pingPong]));	      dMin2    =    Math.min(work[l    -    1],    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	6	None	replace
40	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));	      dMin2    =    Math.min(work[l    -    1],    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	6	None	replace
41	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));	      dMin2    =    Math.min(work[l    -    1],    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	6	None	replace
42	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  Math.min(work[3  +  pingPong],  work[4  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  Math.min(work[3  +  pingPong],  work[4  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  Math.min(work[3  +  pingPong],  work[4  +  pingPong]));	      dMin2    =    Math.min(work[l    -    1],    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	6	None	replace
43	[BUG]  [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[2  *  pingPong],  work[3  +  pingPong]));	      work[l    -    1]    =    Math.max(work[l    -    1],    Math.min(work[2    +    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	13	None	replace
44	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[1  +  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[1  +  pingPong],  work[3  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[1  +  pingPong],  work[3  +  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    1],    Math.min(work[1    +    pingPong],    work[1    +    pingPong]));    	non-compiled	[CE]  ';'  expected	18	None	replace
45	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[7  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[7  +  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    1],    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	1	None	replace
46	[BUG]  [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	int  qMax  =  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));	      int    qMax    =    Math.max(qMax,    Math.max(work[l    -    2    *    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	20	None	replace
47	[BUG]  [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[2  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	int  qMax  =  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[2  +  pingPong]));	      int    qMax    =    Math.max(qMax,    Math.max(work[l    -    2    *    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	20	None	replace
48	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[6  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[6  +  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    1],    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	17	None	replace
49	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));	  work[l    -    2]    =    Math.min(work[l    -    2],    Math.min(work[6    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	2	None	replace
50	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[7  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[7  +  pingPong]));	  work[l    -    2]    =    Math.min(work[l    -    2],    Math.min(work[6    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	2	None	replace
51	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2],  Math.min(work[6  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2],  Math.min(work[6  +  pingPong],  work[7  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  2],  Math.min(work[6  +  pingPong],  work[7  +  pingPong]));	  work[l    -    2]    =    Math.min(work[l    -    2],    Math.min(work[6    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	2	None	replace
52	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[4  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[4  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[4  +  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    1],    Math.min(work[3    +    pingPong],    work[4    +    pingPong]));    	non-compiled	[CE]  ';'  expected	15	None	replace
53	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[2  *  pingPong],  work[3  *  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[2  *  pingPong],  work[3  *  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[2  *  pingPong],  work[3  *  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    1],    Math.min(work[2    +    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	4	None	replace
54	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  work[7  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  work[7  +  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    2],    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	3	None	replace
55	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  work[3  +  pingPong],  work[7  +  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    2],    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	3	None	replace
56	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  work[3  +  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    2],    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	3	None	replace
57	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  work[6  +  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    2],    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	3	None	replace
58	[BUG]  [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[3  +  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[3  +  pingPong],  work[3  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[3  +  pingPong],  work[3  +  pingPong]));	      int    qMax    =    Math.max(qMax,    Math.max(work[l    -    1],    work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	19	None	replace
59	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));	      dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	8	None	replace
60	[BUG]  [BUGGY]  dMin2  =  Math.max(dMin2,  work[l  -  3]);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(dMin2,  work[l  -  3]);  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.max(dMin2,  work[l  -  3]);	      dMin2    =    Math.max(dMin2,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	9	None	replace
61	[BUG]  [BUGGY]  work[l  -  2  *  qMax]  =  Math.min(work[3  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  2  *  qMax]  =  Math.min(work[3  +  pingPong],  work[6  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  2  *  qMax]  =  Math.min(work[3  +  pingPong],  work[6  +  pingPong]));	      work[l    -    2    *    pingPong]    =    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	10	None	replace
62	[BUG]  [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[3  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[3  +  pingPong]));	      work[l    -    2    *    pingPong]    =    Math.max(work[l    -    2    *    pingPong],    Math.min(work[6    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	7	None	replace
63	[BUG]  [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[4  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[4  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[4  +  pingPong]));	      work[l    -    2    *    pingPong]    =    Math.max(work[l    -    2    *    pingPong],    Math.min(work[6    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	7	None	replace
64	[BUG]  [BUGGY]  int  qMax  =  Math.max(qMax,  Math.min(work[l  -  1],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  int  qMax  =  Math.max(qMax,  Math.min(work[l  -  1],  work[3  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	int  qMax  =  Math.max(qMax,  Math.min(work[l  -  1],  work[3  +  pingPong]));	      int    qMax    =    Math.max(qMax,    Math.max(work[l    -    1],    work[1    +    pingPong]));    	non-compiled	[CE]  ';'  expected	21	None	replace
65	[BUG]  [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[6  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	int  qMax  =  Math.max(qMax,  Math.max(work[l  -  1],  work[6  +  pingPong]));	      int    qMax    =    Math.max(qMax,    Math.max(work[l    -    1],    work[1    +    pingPong]));    	non-compiled	[CE]  ';'  expected	21	None	replace
66	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));	      dMin2    =    Math.min(work[l    -    1],    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	6	None	replace
67	[BUG]  [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));	      work[l    -    1]    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	11	None	replace
68	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    1],    Math.min(work[3    +    pingPong],    work[5    +    pingPong]));    	non-compiled	[CE]  ';'  expected	16	None	replace
69	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  2  *  pingPong,  work[3  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  2  *  pingPong,  work[3  +  pingPong],  work[6  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.max(work[l  -  2  *  pingPong,  work[3  +  pingPong],  work[6  +  pingPong]));	      	non-compiled	[CE]  ';'  expected	5	None	replace
70	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  2  *  pingPong,  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  2  *  pingPong,  work[3  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.max(work[l  -  2  *  pingPong,  work[3  +  pingPong]));	      	non-compiled	[CE]  ';'  expected	5	None	replace
71	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  2  *  pingPong,  work[3  +  pingPong]);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  2  *  pingPong,  work[3  +  pingPong]);  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.max(work[l  -  2  *  pingPong,  work[3  +  pingPong]);	      	non-compiled	[CE]  ';'  expected	5	None	replace
72	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  2  *  pingPong,  work[3  +  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  2  *  pingPong,  work[3  +  pingPong],  work[5  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.max(work[l  -  2  *  pingPong,  work[3  +  pingPong],  work[5  +  pingPong]));	      	non-compiled	[CE]  ';'  expected	5	None	replace
73	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[3  +  pingPong],  work[4  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[3  +  pingPong],  work[4  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[3  +  pingPong],  work[4  +  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    1],    Math.min(work[3    +    pingPong],    work[4    +    pingPong]));    	non-compiled	[CE]  ';'  expected	15	None	replace
74	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  2],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  2],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));	  work[l    -    2]    =    Math.min(work[l    -    2],    Math.min(work[6    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	2	None	replace
75	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[3  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[3  +  pingPong]));	  work[l    -    2]    =    Math.min(work[l    -    2],    Math.min(work[6    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	2	None	replace
76	[BUG]  [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[2  *  pingPong],  work[3  *  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[2  *  pingPong],  work[3  *  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.max(work[l  -  1],  Math.min(work[2  *  pingPong],  work[3  *  pingPong]));	      work[l    -    1]    =    Math.max(work[l    -    1],    Math.min(work[2    +    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	13	None	replace
77	[BUG]  [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[2  *  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	int  qMax  =  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[2  *  pingPong]));	      int    qMax    =    Math.max(qMax,    Math.max(work[l    -    2    *    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	20	None	replace
78	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));	      	non-compiled	[CE]  ';'  expected	5	None	replace
79	[BUG]  [BUGGY]  dMin2  =  Math.max(work[2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.max(work[2  *  pingPong],  work[3  +  pingPong]));	      	non-compiled	[CE]  ';'  expected	5	None	replace
80	[BUG]  [BUGGY]  dMin2  =  Math.max(work[2  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[2  *  pingPong],  work[6  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.max(work[2  *  pingPong],  work[6  +  pingPong]));	      	non-compiled	[CE]  ';'  expected	5	None	replace
81	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  2  *  pingPong,  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  2  *  pingPong,  work[6  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.max(work[l  -  2  *  pingPong,  work[6  +  pingPong]));	      	non-compiled	[CE]  ';'  expected	5	None	replace
82	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  dMin2  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	dMin2  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));	      dMin2    =    Math.min(work[l    -    1],    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	6	None	replace
83	[BUG]  [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[4  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[4  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	int  qMax  =  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[4  +  pingPong]));	      int    qMax    =    Math.max(qMax,    Math.max(work[l    -    2    *    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	20	None	replace
84	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[2  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[2  +  pingPong],  work[6  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[2  +  pingPong],  work[6  +  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    1],    Math.min(work[2    +    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	4	None	replace
85	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[1  +  pingPong],  work[1  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[1  +  pingPong],  work[1  +  pingPong]));  [BUGGY]    work[l  -  2  *  pingPong]  =      Math.min(work[l  -  2  *  pingPong],                Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[1  +  pingPong],  work[1  +  pingPong]));	      work[l    -    2    *    pingPong]    =    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	10	None	replace
86	[BUG]  [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));    [BUGGY]  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));  [BUGGY]    Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1059	1061	1	replace	work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));	  work[l    -    1]    =    Math.min(work[l    -    1],    Math.min(work[1    +    pingPong],    work[1    +    pingPong]));    	non-compiled	[CE]  ';'  expected	18	None	replace
