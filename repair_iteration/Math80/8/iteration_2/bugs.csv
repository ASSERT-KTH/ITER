bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }  else  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }  else  {  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }  else  {	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    =    TOLERANCE_2    *    d))    {    d    =    work[i    +    2];    }    else    {    	non-compiled	[CE]  ';'  expected	12	None	replace
2	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  TOLERANCE_2)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }  else  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  TOLERANCE_2)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }  else  {  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  TOLERANCE_2)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }  else  {	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    =    TOLERANCE_2    *    d))    {    d    =    work[i    +    2];    }    else    {    	non-compiled	[CE]  ';'  expected	12	None	replace
3	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    work[j    	non-compiled	[CE]  ';'  expected	11	None	replace
4	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    work[j    	non-compiled	[CE]  ';'  expected	11	None	replace
5	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    work[j    	non-compiled	[CE]  ';'  expected	11	None	replace
6	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    work[j    	non-compiled	[CE]  ';'  expected	11	None	replace
7	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  d  =  work[i  +  2];  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  d  =  work[i  +  2];  }  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  d  =  work[i  +  2];  }	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    d    =    work[i    +    2];    }    else    if((    MathUtils.SAFE_MIN    *    work[    	non-compiled	[CE]  ';'  expected	9	None	replace
8	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  d  =  work[i  +  2];  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  d  =  work[i  +  2];  }  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  d  =  work[i  +  2];  }	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    d    =    work[i    +    2];    }    else    if((    MathUtils.SAFE_MIN    *    work[    	non-compiled	[CE]  ';'  expected	9	None	replace
9	[BUG]  [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];	      if((    MathUtils.SAFE_SIZE    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_SIZE    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    work[j];    	non-compiled	[CE]  ';'  expected	13	None	replace
10	[BUG]  [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];	      if((    MathUtils.SAFE_SIZE    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_SIZE    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    work[j];    	non-compiled	[CE]  ';'  expected	13	None	replace
11	[BUG]  [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];  }  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];  }	      if((    MathUtils.SAFE_SIZE    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_SIZE    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    work[j];    	non-compiled	[CE]  ';'  expected	13	None	replace
12	[BUG]  [BUGGY]  d  =  work[j  +  3];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  d  =  work[j  +  3];  [BUGGY]    }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	d  =  work[j  +  3];	  d    =    work[i    +    3];    	non-compiled	[CE]  ';'  expected	7	None	replace
13	[BUG]  [BUGGY]  d  *=  work[i  +  2]  *  work[j];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  d  *=  work[i  +  2]  *  work[j];  [BUGGY]    }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	d  *=  work[i  +  2]  *  work[j];	  d    =    work[i    +    2]    *    work[j];    	non-compiled	[CE]  ';'  expected	8	None	replace
14	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  work[j];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  d  =  work[i  +  1]  *  work[j];  [BUGGY]    }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	d  =  work[i  +  1]  *  work[j];	  d    =    work[i    +    2]    *    work[j];    	non-compiled	[CE]  ';'  expected	8	None	replace
15	[BUG]  [BUGGY]  d  =  work[i  +  3]  *  work[j];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  d  =  work[i  +  3]  *  work[j];  [BUGGY]    }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	d  =  work[i  +  3]  *  work[j];	  d    =    work[i    +    2]    *    work[j];    	non-compiled	[CE]  ';'  expected	8	None	replace
16	[BUG]  [BUGGY]  d  =  work[j  +  1];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  d  =  work[j  +  1];  [BUGGY]    }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	d  =  work[j  +  1];	  d    =    work[j    +    2];    	non-compiled	[CE]  ';'  expected	6	None	replace
17	[BUG]  [BUGGY]  d  *=  work[j  +  2];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  d  *=  work[j  +  2];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	d  *=  work[j  +  2];	      d    *=    work[i    +    2];    	non-compiled	[CE]  ';'  expected	3	None	replace
18	[BUG]  [BUGGY]  d  *=  work[i  +  1];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  d  *=  work[i  +  1];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	d  *=  work[i  +  1];	      d    *=    work[i    +    2];    	non-compiled	[CE]  ';'  expected	3	None	replace
19	[BUG]  [BUGGY]  d  *=  work[i  +  3];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  d  *=  work[i  +  3];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	d  *=  work[i  +  3];	      d    *=    work[i    +    2];    	non-compiled	[CE]  ';'  expected	3	None	replace
20	[BUG]  [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];	      if((    MathUtils.SAFE_SIZE    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_SIZE    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    	non-compiled	[CE]  ';'  expected	15	None	replace
21	[BUG]  [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_SIZE  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];	      if((    MathUtils.SAFE_SIZE    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_SIZE    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    	non-compiled	[CE]  ';'  expected	15	None	replace
22	[BUG]  [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_SIZE  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];	      if((    MathUtils.SAFE_SIZE    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_SIZE    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    	non-compiled	[CE]  ';'  expected	15	None	replace
23	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  2]  /  TOLERANCE_2  *  d);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  2]  /  TOLERANCE_2  *  d);  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	work[i  +  1]  =  work[i  +  1]  *(work[i  +  2]  /  TOLERANCE_2  *  d);	      work[i    +    2]    =    work[i    +    2]    *(work[i    +    2]    /    TOLERANCE_2    *    d);    	non-compiled	[CE]  ';'  expected	4	None	replace
24	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  2]  *(work[j  +  2]  /  TOLERANCE_2  *  d);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  work[i  +  2]  =  work[i  +  2]  *(work[j  +  2]  /  TOLERANCE_2  *  d);  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	work[i  +  2]  =  work[i  +  2]  *(work[j  +  2]  /  TOLERANCE_2  *  d);	      work[i    +    2]    =    work[i    +    2]    *(work[i    +    2]    /    TOLERANCE_2    *    d);    	non-compiled	[CE]  ';'  expected	4	None	replace
25	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  2]  *(work[i  +  3]  /  TOLERANCE_2  *  d);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  work[i  +  2]  =  work[i  +  2]  *(work[i  +  3]  /  TOLERANCE_2  *  d);  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	work[i  +  2]  =  work[i  +  2]  *(work[i  +  3]  /  TOLERANCE_2  *  d);	      work[i    +    2]    =    work[i    +    2]    *(work[i    +    2]    /    TOLERANCE_2    *    d);    	non-compiled	[CE]  ';'  expected	4	None	replace
26	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  work[  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  work[  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  work[	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    d    *=    work[    	non-compiled	[CE]  ';'  expected	14	None	replace
27	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    d    *=    work[    	non-compiled	[CE]  ';'  expected	14	None	replace
28	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    d    *=    work[    	non-compiled	[CE]  ';'  expected	14	None	replace
29	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  work[i  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  work[i  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  work[i	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    d    *=    work[i    	non-compiled	[CE]  ';'  expected	16	None	replace
30	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  work[  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  work[  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  work[	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    d    *=    work[i    	non-compiled	[CE]  ';'  expected	16	None	replace
31	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  2]  /  MATERANCE_2  *  d);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  2]  /  MATERANCE_2  *  d);  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	work[i  +  1]  =  work[i  +  1]  *(work[i  +  2]  /  MATERANCE_2  *  d);	      work[i    +    2]    =    work[i    +    2]    *(work[i    +    2]    /    MATERANCE_2    *    d);    	non-compiled	[CE]  ';'  expected	5	None	replace
32	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  2]  *(work[j  +  2]  /  MATERANCE_2  *  d);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  work[i  +  2]  =  work[i  +  2]  *(work[j  +  2]  /  MATERANCE_2  *  d);  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	work[i  +  2]  =  work[i  +  2]  *(work[j  +  2]  /  MATERANCE_2  *  d);	      work[i    +    2]    =    work[i    +    2]    *(work[i    +    2]    /    MATERANCE_2    *    d);    	non-compiled	[CE]  ';'  expected	5	None	replace
33	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    =    TOLERANCE_2    *    d))    {    d    =    work[i    +    2];    }    	non-compiled	[CE]  ';'  expected	10	None	replace
34	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  TOLERANCE_2)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  TOLERANCE_2)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  TOLERANCE_2)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    =    TOLERANCE_2    *    d))    {    d    =    work[i    +    2];    }    	non-compiled	[CE]  ';'  expected	10	None	replace
35	[BUG]  [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_SIZE  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];	      if((    MathUtils.SAFE_SIZE    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_SIZE    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    	non-compiled	[CE]  ';'  expected	15	None	replace
36	[BUG]  [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  1]  /  work[j];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  1]  /  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_SIZE  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  1]  /  work[j];	      if((    MathUtils.SAFE_SIZE    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_SIZE    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    	non-compiled	[CE]  ';'  expected	15	None	replace
37	[BUG]  [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  }  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  }	      if((    MathUtils.SAFE_SIZE    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_SIZE    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    	non-compiled	[CE]  ';'  expected	15	None	replace
38	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    work[j    	non-compiled	[CE]  ';'  expected	11	None	replace
39	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    work[j    	non-compiled	[CE]  ';'  expected	11	None	replace
40	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    work[j    	non-compiled	[CE]  ';'  expected	11	None	replace
41	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }  else  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }  else  {  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }  else  {	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    =    TOLERANCE_2    *    d))    {    d    =    work[i    +    2];    }    else    {    	non-compiled	[CE]  ';'  expected	12	None	replace
42	[BUG]  [BUGGY]  (MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  (MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	(MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    =    TOLERANCE_2    *    d))    {    d    =    work[i    +    2];    }    	non-compiled	[CE]  ';'  expected	10	None	replace
43	[BUG]  [BUGGY]  (MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  (MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	(MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  d  =  work[i  +  2];  }	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    =    TOLERANCE_2    *    d))    {    d    =    work[i    +    2];    }    	non-compiled	[CE]  ';'  expected	10	None	replace
44	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  2]  *(work[i  +  3]  /  MATERANCE_2  *  d);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  work[i  +  2]  =  work[i  +  2]  *(work[i  +  3]  /  MATERANCE_2  *  d);  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	work[i  +  2]  =  work[i  +  2]  *(work[i  +  3]  /  MATERANCE_2  *  d);	      work[i    +    2]    =    work[i    +    2]    *(work[i    +    2]    /    MATERANCE_2    *    d);    	non-compiled	[CE]  ';'  expected	5	None	replace
45	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    d    *=    work[i    	non-compiled	[CE]  ';'  expected	16	None	replace
46	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    d    *=    work[i    	non-compiled	[CE]  ';'  expected	16	None	replace
47	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  work[  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  work[  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  work[	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    d    *=    work[i    	non-compiled	[CE]  ';'  expected	16	None	replace
48	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    d    *=    work[    	non-compiled	[CE]  ';'  expected	14	None	replace
49	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  d  =  work[i  +  2];  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  d  =  work[i  +  2];  }  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  d  =  work[i  +  2];  }	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    d    =    work[i    +    2];    }    else    if((    MathUtils.SAFE_MIN    *    work[    	non-compiled	[CE]  ';'  expected	9	None	replace
50	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  d  =  work[i  +  2];  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  d  =  work[i  +  2];  }  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  d  =  work[i  +  2];  }	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    d    =    work[i    +    2];    }    else    if((    MathUtils.SAFE_MIN    *    work[    	non-compiled	[CE]  ';'  expected	9	None	replace
51	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  d  =  work[i  +  2];  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  d  =  work[i  +  2];  }  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  d  =  work[i  +  2];  }	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    d    =    work[i    +    2];    }    else    if((    MathUtils.SAFE_MIN    *    work[    	non-compiled	[CE]  ';'  expected	9	None	replace
52	[BUG]  [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_SIZE  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];	      if((    MathUtils.SAFE_SIZE    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_SIZE    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    work[j];    	non-compiled	[CE]  ';'  expected	13	None	replace
53	[BUG]  [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  1]  *  work[j];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  1]  *  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_SIZE  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  1]  *  work[j];	      if((    MathUtils.SAFE_SIZE    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_SIZE    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    work[j];    	non-compiled	[CE]  ';'  expected	13	None	replace
54	[BUG]  [BUGGY]  d  =  work[j  +  2]  *  work[i];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  d  =  work[j  +  2]  *  work[i];  [BUGGY]    }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	d  =  work[j  +  2]  *  work[i];	  d    =    work[i    +    2]    *    work[j];    	non-compiled	[CE]  ';'  expected	8	None	replace
55	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  3]  *(work[i  +  2]  /  TOLERANCE_2  *  d);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  work[i  +  2]  =  work[i  +  3]  *(work[i  +  2]  /  TOLERANCE_2  *  d);  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	work[i  +  2]  =  work[i  +  3]  *(work[i  +  2]  /  TOLERANCE_2  *  d);	      work[i    +    2]    =    work[i    +    2]    *(work[i    +    2]    /    TOLERANCE_2    *    d);    	non-compiled	[CE]  ';'  expected	4	None	replace
56	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  2]  *(work[i  +  4]  /  TOLERANCE_2  *  d);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  work[i  +  2]  =  work[i  +  2]  *(work[i  +  4]  /  TOLERANCE_2  *  d);  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	work[i  +  2]  =  work[i  +  2]  *(work[i  +  4]  /  TOLERANCE_2  *  d);	      work[i    +    2]    =    work[i    +    2]    *(work[i    +    2]    /    TOLERANCE_2    *    d);    	non-compiled	[CE]  ';'  expected	4	None	replace
57	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  d  =  work[i  +  2];  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  d  =  work[i  +  2];  }  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  d  =  work[i  +  2];  }	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    d    =    work[i    +    2];    }    else    if((    MathUtils.SAFE_MIN    *    work[    	non-compiled	[CE]  ';'  expected	9	None	replace
58	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    work[j    	non-compiled	[CE]  ';'  expected	11	None	replace
59	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    work[j    	non-compiled	[CE]  ';'  expected	11	None	replace
60	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    work[j    	non-compiled	[CE]  ';'  expected	11	None	replace
61	[BUG]  [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];	      if((    MathUtils.SAFE_SIZE    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_SIZE    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    work[j];    	non-compiled	[CE]  ';'  expected	13	None	replace
62	[BUG]  [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];	      if((    MathUtils.SAFE_SIZE    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_SIZE    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    work[j];    	non-compiled	[CE]  ';'  expected	13	None	replace
63	[BUG]  [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];  }  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  work[j];  }	      if((    MathUtils.SAFE_SIZE    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_SIZE    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    work[j];    	non-compiled	[CE]  ';'  expected	13	None	replace
64	[BUG]  [BUGGY]  d  *=  work[  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  d  *=  work[  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	d  *=  work[	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    d    *=    work[    	non-compiled	[CE]  ';'  expected	14	None	replace
65	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  work[  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  work[  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  d  *=  work[	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    d    *=    work[    	non-compiled	[CE]  ';'  expected	14	None	replace
66	[BUG]  [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_SIZE  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];	      if((    MathUtils.SAFE_SIZE    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_SIZE    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    	non-compiled	[CE]  ';'  expected	15	None	replace
67	[BUG]  [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	if((  MathUtils.SAFE_SIZE  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_SIZE  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  /  work[j];	      if((    MathUtils.SAFE_SIZE    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_SIZE    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    	non-compiled	[CE]  ';'  expected	15	None	replace
68	[BUG]  [BUGGY]  d  *=  work[i  >>  ';'  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;    [BUGGY]  d  *=  work[i  >>  ';'  [BUGGY]    d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	960	960	1	replace	d  *=  work[i  >>  ';'	      if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    /    work[j];    d    *=    work[i    	non-compiled	[CE]  ';'  expected	16	None	replace
