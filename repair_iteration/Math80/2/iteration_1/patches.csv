bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]      work[i  +  2]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	        work[i    +    2]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];	  	compilable	  [FE]  AssertionFailedError  	19	1	add
2	[BUG]  [BUGGY]      work[i  +  2]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]      work[i  +  2]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	        work[i    +    2]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];	  	compilable	  [FE]  AssertionFailedError  	19	1	add
3	[BUG]  [BUGGY]      work[i  +  2]  =  work[i  +  3];  Work[i  +  2]  =  work[i  +  3];  [CE]  cannot  find  symbol  Work  [FE]      AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]      work[i  +  2]  =  work[i  +  3];  Work[i  +  2]  =  work[i  +  3];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	        work[i    +    2]    =    work[i    +    3];    Work[i  +  2]  =  work[i  +  3];	  	non-compiled	[CE]  cannot  find  symbol  Work	19	None	add
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]      work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  work[i  +  3];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	        work[i    +    2]    =    work[i    +    3];    work[i  +  3]  =  work[i  +  3];	  	compilable	  [FE]  AssertionFailedError  	19	1	add
5	[BUG]  [BUGGY]      work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  work[i  +  3];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]      work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  work[i  +  3];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	        work[i    +    2]    =    work[i    +    3];    work[i  +  3]  =  work[i  +  3];	  	compilable	  [FE]  AssertionFailedError  	19	1	add
6	[BUG]  [BUGGY]      work[i  +  2]  =  work[i  +  3];  works[i  +  2]  =  work[i  +  3];  [CE]  cannot  find  symbol  works  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]      work[i  +  2]  =  work[i  +  3];  works[i  +  2]  =  work[i  +  3];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	        work[i    +    2]    =    work[i    +    3];    works[i  +  2]  =  work[i  +  3];	  	non-compiled	[CE]  cannot  find  symbol  works	19	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	13	1	replace
8	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	13	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	13	1	replace
10	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	13	1	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	13	1	replace
12	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	13	1	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	13	1	replace
14	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	13	1	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	10	1	replace
16	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	10	1	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	10	1	replace
18	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	10	1	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	10	1	replace
20	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	10	1	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	10	1	replace
22	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	10	1	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	9	1	replace
24	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	9	1	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	9	1	replace
26	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	9	1	replace
27	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  2;  i0  =  1  +  i  /  2;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	i0    =    1    +    i    /    2;    i0  =  1  +  i  /  2;	  	compilable	timeout	4	1	add
28	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  i0  =  1  +  i  /  2;  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  2;  i0  =  1  +  i  /  2;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    2;    i0  =  1  +  i  /  2;	  	compilable	timeout	4	1	add
29	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  int  i0  =  1  +  i  /  2;  [CE]  variable  i0  is  already  defined  in  method  processGeneralBlock(int)  [FE]      AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  2;  int  i0  =  1  +  i  /  2;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    2;    int  i0  =  1  +  i  /  2;	  	non-compiled	[CE]  variable  i0  is  already  defined  in  method  processGeneralBlock(int)	4	None	add
30	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  2;  i0  =  2  +  i  /  2;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	i0    =    1    +    i    /    2;    i0  =  2  +  i  /  2;	  	compilable	timeout	4	1	add
31	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  i0  =  2  +  i  /  2;  timeout  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  2;  i0  =  2  +  i  /  2;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    2;    i0  =  2  +  i  /  2;	  	compilable	timeout	4	1	add
32	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  2;  i0  =  1  +  i  /  3;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	i0    =    1    +    i    /    2;    i0  =  1  +  i  /  3;	  	compilable	timeout	4	1	add
33	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  i0  =  1  +  i  /  3;  timeout  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  2;  i0  =  1  +  i  /  3;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    2;    i0  =  1  +  i  /  3;	  	compilable	timeout	4	1	add
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.min(diagMin,  work[i  +  2]);	      i0    =    Math.max(work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
35	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.min(diagMin,  work[i  +  2]);	      i0    =    Math.max(work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
36	[BUG]  [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);	      i0    =    Math.max(work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
37	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2],  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  2],  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2],  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);	      i0    =    Math.max(work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
38	[BUG]  [BUGGY]      if(work[i  +  2]  <  =  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {  offDiagMax  =  Math.min(diagMax,  work[i  +  2]  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]      if(work[i  +  2]  <  =  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {  offDiagMax  =  Math.min(diagMax,  work[i  +  2]  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	        if(work[i  +  2]  <  =  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {  offDiagMax  =  Math.min(diagMax,  work[i  +  2]	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  3;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	i0  =  1  +  i  /  3;	  i0    =    1    +    i    /    2;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
40	[BUG]  [BUGGY]  i0  =  1  +  i  /  3;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  3;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  3;	  i0    =    1    +    i    /    2;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	11	1	replace
42	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	11	1	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	11	1	replace
44	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	11	1	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	15	1	replace
46	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	15	1	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	15	1	replace
48	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	15	1	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	15	1	replace
50	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	15	1	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	15	1	replace
52	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	15	1	replace
53	[BUG]  [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  4]);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  4]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMin,  work[i  +  4]);	  i0    =    Math.max(diagMin,    work[i    +    2]);    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
54	[BUG]  [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  3]);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  3]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMin,  work[i  +  3]);	  i0    =    Math.max(diagMin,    work[i    +    2]);    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	14	1	replace
56	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	14	1	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	14	1	replace
58	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	14	1	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	14	1	replace
60	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	14	1	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	8	1	replace
62	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	8	1	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	8	1	replace
64	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	8	1	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	8	1	replace
66	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	8	1	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  work[i  +  2]  =  work[i  +  4];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	work[i  +  2]  =  work[i  +  4];	      work[i    +    2]    =    work[i    +    3];    	compilable	  [FE]  AssertionFailedError  	20	1	replace
68	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  4];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  work[i  +  2]  =  work[i  +  4];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[i  +  4];	      work[i    +    2]    =    work[i    +    3];    	compilable	  [FE]  AssertionFailedError  	20	1	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  work[i  +  2]  =  work[i  +  6];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	work[i  +  2]  =  work[i  +  6];	      work[i    +    2]    =    work[i    +    3];    	compilable	  [FE]  AssertionFailedError  	20	1	replace
70	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  6];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  work[i  +  2]  =  work[i  +  6];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[i  +  6];	      work[i    +    2]    =    work[i    +    3];    	compilable	  [FE]  AssertionFailedError  	20	1	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  work[i  +  2]  =  work[i  +  1];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	work[i  +  2]  =  work[i  +  1];	      work[i    +    2]    =    work[i    +    3];    	compilable	  [FE]  AssertionFailedError  	20	1	replace
72	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  1];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  work[i  +  2]  =  work[i  +  1];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[i  +  1];	      work[i    +    2]    =    work[i    +    3];    	compilable	  [FE]  AssertionFailedError  	20	1	replace
73	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2],  work[i  +  4]);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  2],  work[i  +  4]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2],  work[i  +  4]);	  i0    =    Math.max(work[i    +    2]);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
74	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2],  work[i  +  3]);  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  2],  work[i  +  3]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2],  work[i  +  3]);	  i0    =    Math.max(work[i    +    2]);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
75	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  4]);  [CE]  no  suitable  method  found  for  max(double)  [FE]              AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  4]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  4]);	  i0    =    Math.max(work[i    +    2]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	3	None	replace
76	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  2]);  [CE]  no  suitable  method  found  for  max(double)  [FE]                AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  2]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2]  +  work[i  +  2]);	  i0    =    Math.max(work[i    +    2]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	3	None	replace
77	[BUG]  [BUGGY]  i0  =  Math.max(diagMax,  work[i  +  4]);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(diagMax,  work[i  +  4]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMax,  work[i  +  4]);	  i0    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  possible  loss  of  precision	17	None	replace
78	[BUG]  [BUGGY]  i0  =  Math.max(diagMax,  work[i  +  3]);  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMax,  work[i  +  3]);	  i0    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  possible  loss  of  precision	17	None	replace
79	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMin);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMin);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMin);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    2]);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
80	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMax);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMax);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMax);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    2]);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
81	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1],  work[i  +  2]);  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  1],  work[i  +  2]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1],  work[i  +  2]);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    2]);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
83	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
84	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  4;  i0  =  2  +  i  /  4;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	i0    =    1    +    i    /    4;    i0  =  2  +  i  /  4;	  	compilable	timeout	1	1	add
85	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  i0  =  2  +  i  /  4;  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  4;  i0  =  2  +  i  /  4;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    4;    i0  =  2  +  i  /  4;	  	compilable	timeout	1	1	add
86	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  int  i0  =  1  +  i  /  4;  [CE]  variable  i0  is  already  defined  in  method  processGeneralBlock(int)  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  4;  int  i0  =  1  +  i  /  4;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    4;    int  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  variable  i0  is  already  defined  in  method  processGeneralBlock(int)	1	None	add
87	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  3;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	i0    =    1    +    i    /    4;    i0  =  1  +  i  /  3;	  	compilable	timeout	1	1	add
88	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  3;  timeout  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  3;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    4;    i0  =  1  +  i  /  3;	  	compilable	timeout	1	1	add
89	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  4]);  [CE]  no  suitable  method  found  for  max(double)  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  4]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]  +  work[i  +  4]);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    2]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	21	None	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	8	1	replace
91	[BUG]  [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	8	1	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	14	1	replace
93	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	14	1	replace
94	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]);  [CE]  no  suitable  method  found  for  max(double)  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  1]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]);	  i0    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	17	None	replace
95	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  4]);  [CE]  no  suitable  method  found  for  max(double)  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  4]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2]  +  work[i  +  4]);	  i0    =    Math.max(work[i    +    2]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	3	None	replace
96	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  3]);  [CE]  no  suitable  method  found  for  max(double)  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  3]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2]  +  work[i  +  3]);	  i0    =    Math.max(work[i    +    2]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	3	None	replace
97	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  3]);  [CE]  no  suitable  method  found  for  max(double)  [FE]              AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  3]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  3]);	  i0    =    Math.max(work[i    +    2]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	3	None	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[i  +  3];  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	i0    =    1    +    i    /    4;    work[i  +  2]  =  work[i  +  3];	  	compilable	  [FE]  AssertionFailedError  	1	1	add
99	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[i  +  3];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[i  +  3];  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    4;    work[i  +  2]  =  work[i  +  3];	  	compilable	  [FE]  AssertionFailedError  	1	1	add
100	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  I0  =  1  +  i  /  4;  [CE]  cannot  find  symbol  I0  [FE]      AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  4;  I0  =  1  +  i  /  4;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    4;    I0  =  1  +  i  /  4;	  	non-compiled	[CE]  cannot  find  symbol  I0	1	None	add
101	[BUG]  [BUGGY]  i0  =  1  +  work[i  -  2]  /  2;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  work[i  -  2]  /  2;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  work[i  -  2]  /  2;	  i0    =    1    +    i    /    2;    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  work[i  +  2]  =  work[i0];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	work[i  +  2]  =  work[i0];	      work[i    +    2]    =    work[i    +    3];    	compilable	  [FE]  AssertionFailedError  	20	1	replace
103	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  work[i  +  2]  =  work[i0];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[i0];	      work[i    +    2]    =    work[i    +    3];    	compilable	  [FE]  AssertionFailedError  	20	1	replace
104	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  work[i  +  2]  =  work[i0  -  3];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	work[i  +  2]  =  work[i0  -  3];	      work[i    +    2]    =    work[i    +    3];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
105	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0  -  3];  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  work[i  +  2]  =  work[i0  -  3];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[i0  -  3];	      work[i    +    2]    =    work[i    +    3];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  work[i  +  2]  =  work[i0  +  3];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	work[i  +  2]  =  work[i0  +  3];	      work[i    +    2]    =    work[i    +    3];    	compilable	  [FE]  AssertionFailedError  	20	1	replace
107	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0  +  3];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  work[i  +  2]  =  work[i0  +  3];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[i0  +  3];	      work[i    +    2]    =    work[i    +    3];    	compilable	  [FE]  AssertionFailedError  	20	1	replace
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	9	1	replace
109	[BUG]  [BUGGY]  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	9	1	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	9	1	replace
111	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	9	1	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	15	1	replace
113	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	15	1	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	15	1	replace
115	[BUG]  [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	15	1	replace
116	[BUG]  [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  2]  +  work[i  +  4]);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  2]  +  work[i  +  4]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMin,  work[i  +  2]  +  work[i  +  4]);	  i0    =    Math.max(diagMin,    work[i    +    2]);    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
117	[BUG]  [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  2]  +  work[i  +  3]);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  2]  +  work[i  +  3]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMin,  work[i  +  2]  +  work[i  +  3]);	  i0    =    Math.max(diagMin,    work[i    +    2]);    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	11	1	replace
119	[BUG]  [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	11	1	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	10	1	replace
121	[BUG]  [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	10	1	replace
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	18	1	replace
123	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	18	1	replace
124	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [CE]  no  suitable  method  found  for  max(double)  [FE]                AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2]  +  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);	      i0    =    Math.max(work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	12	None	replace
125	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  [CE]  no  suitable  method  found  for  max(double)  [FE]                  AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);	      i0    =    Math.max(work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	12	None	replace
126	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  3]);  [CE]  no  suitable  method  found  for  max(double)  [FE]                    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  3]);	      i0    =    Math.max(work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	12	None	replace
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	13	1	replace
128	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	13	1	replace
129	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  I0  =  1  +  i  /  2;  [CE]  cannot  find  symbol  I0  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  2;  I0  =  1  +  i  /  2;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    2;    I0  =  1  +  i  /  2;	  	non-compiled	[CE]  cannot  find  symbol  I0	4	None	add
130	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  3]);  [CE]  no  suitable  method  found  for  max(double)  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  3]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]  +  work[i  +  3]);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    2]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	21	None	replace
131	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  work[i  +  4]);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  work[i  +  4]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  work[i  +  4]);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    2]);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  work[i  +  1]  =  work[i  +  1];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	work[i  +  1]  =  work[i  +  1];	      work[i    +    2]    =    work[i    +    3];    	compilable	  [FE]  AssertionFailedError  	20	1	replace
133	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  work[i  +  1]  =  work[i  +  1];  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  1]  =  work[i  +  1];	      work[i    +    2]    =    work[i    +    3];    	compilable	  [FE]  AssertionFailedError  	20	1	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	10	1	replace
135	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	10	1	replace
136	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
137	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	11	1	replace
139	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	11	1	replace
140	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  2;  i0  =  3  +  i  /  2;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	i0    =    1    +    i    /    2;    i0  =  3  +  i  /  2;	  	compilable	timeout	4	1	add
141	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  i0  =  3  +  i  /  2;  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  2;  i0  =  3  +  i  /  2;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    2;    i0  =  3  +  i  /  2;	  	compilable	timeout	4	1	add
142	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  2;  i0  =  4  +  i  /  2;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	i0    =    1    +    i    /    2;    i0  =  4  +  i  /  2;	  	compilable	timeout	4	1	add
143	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  i0  =  4  +  i  /  2;  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  2;  i0  =  4  +  i  /  2;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    2;    i0  =  4  +  i  /  2;	  	compilable	timeout	4	1	add
144	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2],  work[i  +  2]);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i  +  2],  work[i  +  2]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2],  work[i  +  2]);	  i0    =    Math.max(diagMin,    work[i    +    2]);    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
145	[BUG]  [BUGGY]  i0  =  Math.max(work[i,  work[i  +  2]);  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  Math.max(work[i,  work[i  +  2]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i,  work[i  +  2]);	  i0    =    Math.max(diagMin,    work[i    +    2]);    	non-compiled	[CE]  ']'  expected	16	None	replace
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
147	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
149	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
151	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);	  	compilable	  [FE]  AssertionFailedError  	1	1	add
153	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);	  	compilable	  [FE]  AssertionFailedError  	1	1	add
154	[BUG]  [BUGGY]      if(work[i  +  2]  <  =  work[i  +  3])  {  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]      if(work[i  +  2]  <  =  work[i  +  3])  {  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	        if(work[i  +  2]  <  =  work[i  +  3])  {  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
155	[BUG]  [BUGGY]      if(work[i  +  2]  <  =  work[i  +  3])  {  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]      if(work[i  +  2]  <  =  work[i  +  3])  {  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	        if(work[i  +  2]  <  =  work[i  +  3])  {  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
156	[BUG]  [BUGGY]      if(work[i  +  2]  <  =  work[i  +  3])  {  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]      if(work[i  +  2]  <  =  work[i  +  3])  {  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  }  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	        if(work[i  +  2]  <  =  work[i  +  3])  {  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
157	[BUG]  [BUGGY]      if(work[i  +  2]  <  =  work[i  +  3])  {  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]      if(work[i  +  2]  <  =  work[i  +  3])  {  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	        if(work[i  +  2]  <  =  work[i  +  3])  {  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
158	[BUG]  [BUGGY]  i0  =  1  +  work[i  /  2];  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  work[i  /  2];  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  work[i  /  2];	  i0    =    1    +    i    /    2;    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	15	1	replace
160	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	15	1	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	9	1	replace
162	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	      if(work[i    +    2]    <    =    0)    {    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	compilable	  [FE]  AssertionFailedError  	9	1	replace
163	[BUG]  [BUGGY]  i0  =  1  +  work[i  /  4];  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  i0  =  1  +  work[i  /  4];  [BUGGY]    }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  work[i  /  4];	  i0    =    1    +    i    /    4;    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	18	1	replace
165	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;    [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  [BUGGY]    break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);	      if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	compilable	  [FE]  AssertionFailedError  	18	1	replace
