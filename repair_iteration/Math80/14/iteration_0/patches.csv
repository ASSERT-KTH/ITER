bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  4  *  step  -  1;  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	add	int  j  =  4  *  step  -  1;	int  j  =  4  *  n  -  1;  	compilable	  [FE]  AssertionFailedError  	27	1	replace
2	[BUG]  [BUGGY]  int  j  =  4  *  step  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  4  *  step  -  1;  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  step  -  1;	int  j  =  4  *  n  -  1;  	compilable	  [FE]  AssertionFailedError  	27	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  4  *  n  +  1;  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	add	int  j  =  4  *  n  +  1;	int  j  =  4  *  n  -  1;  	compilable	  [FE]  AssertionFailedError  	27	1	replace
4	[BUG]  [BUGGY]  int  j  =  4  *  n  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  4  *  n  +  1;  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  n  +  1;	int  j  =  4  *  n  -  1;  	compilable	  [FE]  AssertionFailedError  	27	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  1  *  n  -  1;  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	add	int  j  =  1  *  n  -  1;	int  j  =  4  *  n  -  1;  	compilable	  [FE]  AssertionFailedError  	27	1	replace
6	[BUG]  [BUGGY]  int  j  =  1  *  n  -  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  1  *  n  -  1;  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  *  n  -  1;	int  j  =  4  *  n  -  1;  	compilable	  [FE]  AssertionFailedError  	27	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  3  *  n  -  1;  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	add	int  j  =  3  *  n  -  1;	int  j  =  4  *  n  -  1;  	compilable	  [FE]  AssertionFailedError  	27	1	replace
8	[BUG]  [BUGGY]  int  j  =  3  *  n  -  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  3  *  n  -  1;  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  3  *  n  -  1;	int  j  =  4  *  n  -  1;  	compilable	  [FE]  AssertionFailedError  	27	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  5  *  n  -  1;  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	add	int  j  =  5  *  n  -  1;	int  j  =  4  *  n  -  1;  	compilable	  [FE]  AssertionFailedError  	27	1	replace
10	[BUG]  [BUGGY]  int  j  =  5  *  n  -  1;  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  5  *  n  -  1;  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  5  *  n  -  1;	int  j  =  4  *  n  -  1;  	compilable	  [FE]  AssertionFailedError  	27	1	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  2  *  n  -  1;  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	add	int  j  =  2  *  n  -  1;	int  j  =  4  *  n  -  1;  	compilable	  [FE]  AssertionFailedError  	27	1	replace
12	[BUG]  [BUGGY]  int  j  =  2  *  n  -  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  2  *  n  -  1;  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  2  *  n  -  1;	int  j  =  4  *  n  -  1;  	compilable	  [FE]  AssertionFailedError  	27	1	replace
13	[BUG]  [BUGGY]    [CE]  'else'  without  'if'  [FE]                  AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	  	int  j  =  4  *  n  -  1;  	non-compiled	[CE]  'else'  without  'if'	27	None	replace
14	[BUG]  [BUGGY]    ArrayRealVector[]  work  =(ArrayRealVector[])n.clone();  [CE]  'else'  without  'if'  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    ArrayRealVector[]  work  =(ArrayRealVector[])n.clone();  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    ArrayRealVector[]  work  =(ArrayRealVector[])n.clone();		non-compiled	[CE]  'else'  without  'if'	28	None	add
15	[BUG]  [BUGGY]    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];		non-compiled	[CE]  illegal  start  of  expression	28	None	add
16	[BUG]  [BUGGY]    ArrayRealVector  work  =(ArrayRealVector)n.clone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    ArrayRealVector  work  =(ArrayRealVector)n.clone();  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    ArrayRealVector  work  =(ArrayRealVector)n.clone();		non-compiled	[CE]  illegal  start  of  expression	28	None	add
17	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];		non-compiled	[CE]  illegal  start  of  expression	28	None	add
18	[BUG]  [BUGGY]    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	28	None	add
19	[BUG]  [BUGGY]    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	28	None	add
20	[BUG]  [BUGGY]    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  >=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  >=  null)  {  return  false;  }  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  >=  null)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	28	None	add
21	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	28	None	add
22	[BUG]  [BUGGY]    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  1];  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  1];		non-compiled	[CE]  illegal  start  of  expression	28	None	add
23	[BUG]  [BUGGY]  int  j  =  4  *  (n  -  1);  [CE]  'else'  without  'if'  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  4  *  (n  -  1);  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  (n  -  1);	int  j  =  4  *  n  -  1;  	non-compiled	[CE]  'else'  without  'if'	27	None	replace
24	[BUG]  [BUGGY]  int  j  =  4  *  work[n  -  1]  -  1;  [CE]  'else'  without  'if'  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  4  *  work[n  -  1]  -  1;  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[n  -  1]  -  1;	int  j  =  4  *  n  -  1;  	non-compiled	[CE]  'else'  without  'if'	27	None	replace
25	[BUG]  [BUGGY]    final  double  j  =  4  *  n  -  1;  [CE]  'else'  without  'if'  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    final  double  j  =  4  *  n  -  1;  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    final  double  j  =  4  *  n  -  1;		non-compiled	[CE]  'else'  without  'if'	28	None	add
26	[BUG]  [BUGGY]    final  double[]  work  =(double[])n.clone();  [CE]  'else'  without  'if'  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    final  double[]  work  =(double[])n.clone();  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    final  double[]  work  =(double[])n.clone();		non-compiled	[CE]  'else'  without  'if'	28	None	add
27	[BUG]  [BUGGY]    final  double  tmp  =  work[4  *(n  -  1)];  [CE]  'else'  without  'if'  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    final  double  tmp  =  work[4  *(n  -  1)];  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    final  double  tmp  =  work[4  *(n  -  1)];		non-compiled	[CE]  'else'  without  'if'	28	None	add
28	[BUG]  [BUGGY]    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[0];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[0];  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[0];		non-compiled	[CE]  illegal  start  of  expression	28	None	add
29	[BUG]  [BUGGY]    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  j];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  j];  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  j];		non-compiled	[CE]  illegal  start  of  expression	28	None	add
30	[BUG]  [BUGGY]    final  double  j  =  work[4  *(n  -  1)];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    final  double  j  =  work[4  *(n  -  1)];  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    final  double  j  =  work[4  *(n  -  1)];		non-compiled	[CE]  illegal  start  of  expression	28	None	add
31	[BUG]  [BUGGY]    for(int  j  =  0;  j  <  n;  j++)  {  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    for(int  j  =  0;  j  <  n;  j++)  {  double  tmp  =  work[j  -  1];  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    for(int  j  =  0;  j  <  n;  j++)  {  double  tmp  =  work[j  -  1];		non-compiled	[CE]  illegal  start  of  expression	28	None	add
32	[BUG]  [BUGGY]  int  j  =  4  *  work[n  -  1];  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  4  *  work[n  -  1];  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[n  -  1];	int  j  =  4  *  n  -  1;  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
33	[BUG]  [BUGGY]  int  j  =  4  *  workPong  -  1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  4  *  workPong  -  1;  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  workPong  -  1;	int  j  =  4  *  n  -  1;  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
34	[BUG]  [BUGGY]  int  j  =  4  *  work.length  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  4  *  work.length  -  1;  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work.length  -  1;	int  j  =  4  *  n  -  1;  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
35	[BUG]  [BUGGY]    final  double[]  work  =(double[])work.clone();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    final  double[]  work  =(double[])work.clone();  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    final  double[]  work  =(double[])work.clone();		non-compiled	[CE]  illegal  start  of  expression	28	None	add
36	[BUG]  [BUGGY]    final  double  tmp  =  work[1  +  n  -  1];  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    final  double  tmp  =  work[1  +  n  -  1];  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    final  double  tmp  =  work[1  +  n  -  1];		non-compiled	[CE]  illegal  start  of  expression	28	None	add
37	[BUG]  [BUGGY]    final  double[]  work  =(double[])work.get(n  -  1);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    final  double[]  work  =(double[])work.get(n  -  1);  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    final  double[]  work  =(double[])work.get(n  -  1);		non-compiled	[CE]  illegal  start  of  expression	28	None	add
38	[BUG]  [BUGGY]    final  double  j  =  Math.min(n,  step);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    final  double  j  =  Math.min(n,  step);  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    final  double  j  =  Math.min(n,  step);		non-compiled	[CE]  illegal  start  of  expression	28	None	add
39	[BUG]  [BUGGY]    final  double  tmp  =  work[0];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    final  double  tmp  =  work[0];  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    final  double  tmp  =  work[0];		non-compiled	[CE]  illegal  start  of  expression	28	None	add
40	[BUG]  [BUGGY]    final  double  j  =(double)work[1];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    final  double  j  =(double)work[1];  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    final  double  j  =(double)work[1];		non-compiled	[CE]  illegal  start  of  expression	28	None	add
41	[BUG]  [BUGGY]    final  double  j  =  Math.max(work[0],  step);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    final  double  j  =  Math.max(work[0],  step);  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    final  double  j  =  Math.max(work[0],  step);		non-compiled	[CE]  illegal  start  of  expression	28	None	add
42	[BUG]  [BUGGY]    final  double  j  =  Math.min(work.length,  n  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    final  double  j  =  Math.min(work.length,  n  -  1);  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    final  double  j  =  Math.min(work.length,  n  -  1);		non-compiled	[CE]  illegal  start  of  expression	28	None	add
43	[BUG]  [BUGGY]    final  double  tmp  =  work[1];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    final  double  tmp  =  work[1];  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    final  double  tmp  =  work[1];		non-compiled	[CE]  illegal  start  of  expression	28	None	add
44	[BUG]  [BUGGY]    int  j  =  1  <  <  work.length;  [CE]  >  expected  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    int  j  =  1  <  <  work.length;  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    int  j  =  1  <  <  work.length;		non-compiled	[CE]  >  expected	28	None	add
45	[BUG]  [BUGGY]    if(step  ==  1)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    if(step  ==  1)  {  return  false;  }  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    if(step  ==  1)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	28	None	add
46	[BUG]  [BUGGY]    final  double  tmp  =  work[1]  *(n  -  1);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    final  double  tmp  =  work[1]  *(n  -  1);  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    final  double  tmp  =  work[1]  *(n  -  1);		non-compiled	[CE]  illegal  start  of  expression	28	None	add
47	[BUG]  [BUGGY]    final  double  tmp  =  work[1  +  step];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    final  double  tmp  =  work[1  +  step];  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    final  double  tmp  =  work[1  +  step];		non-compiled	[CE]  illegal  start  of  expression	28	None	add
48	[BUG]  [BUGGY]    final  double  tmp  =  work[2  *(n  -  1)];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    final  double  tmp  =  work[2  *(n  -  1)];  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    final  double  tmp  =  work[2  *(n  -  1)];		non-compiled	[CE]  illegal  start  of  expression	28	None	add
49	[BUG]  [BUGGY]    int  j  =  1  <  <  work[1];  [CE]  ']'  expected  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    int  j  =  1  <  <  work[1];  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    int  j  =  1  <  <  work[1];		non-compiled	[CE]  ']'  expected	28	None	add
50	[BUG]  [BUGGY]    final  double  tmp  =  work[1]  *(n  +  step);  [CE]  ']'  expected  [FE]                AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]    final  double  tmp  =  work[1]  *(n  +  step);  [BUGGY]  int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	    final  double  tmp  =  work[1]  *(n  +  step);		non-compiled	[CE]  ']'  expected	28	None	add
51	[BUG]  [BUGGY]  int  j  =  4;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  4;  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4;	int  j  =  4  *  n  -  1;  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
52	[BUG]  [BUGGY]  int  j  =  6  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  6  *  n  -  1;  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  6  *  n  -  1;	int  j  =  4  *  n  -  1;  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
53	[BUG]  [BUGGY]  int  j  =  4  +  n  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {    [BUGGY]  int  j  =  4  +  n  -  1;  [BUGGY]  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  +  n  -  1;	int  j  =  4  *  n  -  1;  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
