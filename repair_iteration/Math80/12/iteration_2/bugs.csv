bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  2  *  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  2  *  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    9],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	20	None	replace
2	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  9],  work[l  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  9],  work[l  -  2  *  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  9],  work[l  -  2  *  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    9],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	20	None	replace
3	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  3],  work[l  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  3],  work[l  -  2  *  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  3],  work[l  -  2  *  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    9],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	20	None	replace
4	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  1],  work[l  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  1],  work[l  -  2  *  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  1],  work[l  -  2  *  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    9],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	20	None	replace
5	[BUG]  [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	(MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	14	None	replace
6	[BUG]  [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	(MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	14	None	replace
7	[BUG]  [BUGGY]  dMin  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	14	None	replace
8	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	15	None	replace
9	[BUG]  [BUGGY]  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	15	None	replace
10	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	15	None	replace
11	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    9],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	7	None	replace
12	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[3  +  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    9],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	7	None	replace
13	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3],  work[3  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3],  work[3  +  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    9],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	7	None	replace
14	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  4],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  4],  work[3  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  4],  work[3  +  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    9],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	7	None	replace
15	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[2]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[2]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[2]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[2    +    1]));    	non-compiled	[CE]  ';'  expected	1	None	replace
16	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[2  +  3]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[2  +  3]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[2  +  3]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[2    +    1]));    	non-compiled	[CE]  ';'  expected	1	None	replace
17	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[2  +  2]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[2  +  2]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[2  +  2]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[2    +    1]));    	non-compiled	[CE]  ';'  expected	1	None	replace
18	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin  =  -0.0;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin  =  -0.0;  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin  =  -0.0;	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	17	None	replace
19	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	24	None	replace
20	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[3  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[3  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	24	None	replace
21	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[2  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	24	None	replace
22	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[1  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[1  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[1  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	24	None	replace
23	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	12	None	replace
24	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[2  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	12	None	replace
25	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[2  +  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[2  +  pingPong],  work[3  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[2  +  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	12	None	replace
26	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[3]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[3]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[3]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[3    +    1]));    	non-compiled	[CE]  ';'  expected	11	None	replace
27	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[3  +  2]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[3  +  2]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[3  +  2]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[3    +    1]));    	non-compiled	[CE]  ';'  expected	11	None	replace
28	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[3  +  3]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[3  +  3]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[3  +  3]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[3    +    1]));    	non-compiled	[CE]  ';'  expected	11	None	replace
29	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[2  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[2  +  pingPong]));	      dMin    =    Math.max(dMin,    Math.max(work[3    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	9	None	replace
30	[BUG]  [BUGGY]  dMin  =  Math.max(dMin,  Math.min(work[3  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(dMin,  Math.min(work[3  +  pingPong],  work[2  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin,  Math.min(work[3  +  pingPong],  work[2  +  pingPong]));	      dMin    =    Math.max(dMin,    Math.max(work[3    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	9	None	replace
31	[BUG]  [BUGGY]  dMin  =  Math.min(dMin,  Math.max(work[3  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.min(dMin,  Math.max(work[3  +  pingPong],  work[2  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin,  Math.max(work[3  +  pingPong],  work[2  +  pingPong]));	      dMin    =    Math.max(dMin,    Math.max(work[3    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	9	None	replace
32	[BUG]  [BUGGY]  dMin  =  Math.max(dMin,  Math.max(work[3  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(dMin,  Math.max(work[3  +  pingPong],  work[2  *  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin,  Math.max(work[3  +  pingPong],  work[2  *  pingPong]));	      dMin    =    Math.max(dMin,    Math.max(work[3    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	9	None	replace
33	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[7  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[7  +  pingPong]));	      dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	19	None	replace
34	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  3  *  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  3  *  pingPong],  work[7  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  3  *  pingPong],  work[7  +  pingPong]));	      dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	19	None	replace
35	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  2],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  2],  work[3  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  2],  work[3  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    3],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	3	None	replace
36	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[3  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[3  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    3],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	3	None	replace
37	[BUG]  [BUGGY]  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	18	None	replace
38	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[3  *  pingPong]);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[3  *  pingPong]);  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  work[3  *  pingPong]);	      dMin2    =    Math.max(work[l    -    1],    work[3    +    pingPong]);    	non-compiled	[CE]  ';'  expected	22	None	replace
39	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[3  +  2  *  pingPong]);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[3  +  2  *  pingPong]);  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  work[3  +  2  *  pingPong]);	      dMin2    =    Math.max(work[l    -    1],    work[3    +    pingPong]);    	non-compiled	[CE]  ';'  expected	22	None	replace
40	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  work[3  +  pingPong]);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  work[3  +  pingPong]);  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  work[3  +  pingPong]);	      dMin2    =    Math.max(work[l    -    1],    work[3    +    pingPong]);    	non-compiled	[CE]  ';'  expected	22	None	replace
41	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[6  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[6  +  pingPong]));	      dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	23	None	replace
42	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  3  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  3  *  pingPong],  work[6  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  3  *  pingPong],  work[6  +  pingPong]));	      dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	23	None	replace
43	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[3  *  pingPong]);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[3  *  pingPong]);  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  work[3  *  pingPong]);	      dMin    =    Math.min(work[l    -    1],    work[3    +    pingPong]);    	non-compiled	[CE]  ';'  expected	21	None	replace
44	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[3  +  2  *  pingPong]);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[3  +  2  *  pingPong]);  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  work[3  +  2  *  pingPong]);	      dMin    =    Math.min(work[l    -    1],    work[3    +    pingPong]);    	non-compiled	[CE]  ';'  expected	21	None	replace
45	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[2  +  pingPong]);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[2  +  pingPong]);  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  work[2  +  pingPong]);	      dMin    =    Math.min(work[l    -    1],    work[3    +    pingPong]);    	non-compiled	[CE]  ';'  expected	21	None	replace
46	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	13	None	replace
47	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	13	None	replace
48	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));	      dMin    =    Math.max(dMin,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	6	None	replace
49	[BUG]  [BUGGY]  dMin  =  Math.max(dMin,  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(dMin,  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin,  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));	      dMin    =    Math.max(dMin,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	6	None	replace
50	[BUG]  [BUGGY]  dMin  =  Math.max(dMin,  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(dMin,  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin,  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));	      dMin    =    Math.max(dMin,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	6	None	replace
51	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMax,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	16	None	replace
52	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));	      dMin    =    Math.max(dMin,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	8	None	replace
53	[BUG]  [BUGGY]  dMin  =  Math.max(dMin,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(dMin,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));	      dMin    =    Math.max(dMin,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	8	None	replace
54	[BUG]  [BUGGY]  dMin  =  Math.max(dMin,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(dMin,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));	      dMin    =    Math.max(dMin,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	8	None	replace
55	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[2  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	4	None	replace
56	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  +  2  *  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  +  2  *  pingPong],  work[2  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[l  +  2  *  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	4	None	replace
57	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  2  *  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  2  *  pingPong],  work[7  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  2  *  pingPong],  work[7  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	4	None	replace
58	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    9],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	10	None	replace
59	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2],  work[2  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2],  work[2  +  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    9],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	10	None	replace
60	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[2  *  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[2  *  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    9],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	10	None	replace
61	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[2  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[2  +  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    9],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	10	None	replace
62	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1]);	      	non-compiled	[CE]  ';'  expected	5	None	replace
63	[BUG]  [BUGGY]  dMin  =  Math.min(0.0,  work[l  -  1]);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.min(0.0,  work[l  -  1]);  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(0.0,  work[l  -  1]);	      	non-compiled	[CE]  ';'  expected	5	None	replace
64	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1]);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1]);  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  work[l  -  1]);	      	non-compiled	[CE]  ';'  expected	5	None	replace
65	[BUG]  [BUGGY]  dMin  =  Math.min(dMax,  work[l  -  1]);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.min(dMax,  work[l  -  1]);  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMax,  work[l  -  1]);	      	non-compiled	[CE]  ';'  expected	5	None	replace
66	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    2    *    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	2	None	replace
67	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	24	None	replace
68	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	24	None	replace
69	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	24	None	replace
70	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[5  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[5  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	24	None	replace
71	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    9],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	20	None	replace
72	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	16	None	replace
73	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	16	None	replace
74	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	16	None	replace
75	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	16	None	replace
76	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));	      dMin    =    Math.max(dMin,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	6	None	replace
77	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));	      dMin    =    Math.max(dMin,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	6	None	replace
78	[BUG]  [BUGGY]  if(qMax!=  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax!=  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	17	None	replace
79	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	17	None	replace
80	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	17	None	replace
81	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	17	None	replace
82	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[3  -  2  *  pingPong]);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[3  -  2  *  pingPong]);  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  work[3  -  2  *  pingPong]);	      dMin2    =    Math.max(work[l    -    1],    work[3    +    pingPong]);    	non-compiled	[CE]  ';'  expected	22	None	replace
83	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	13	None	replace
84	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));	      dMin    =    Math.max(dMin,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	8	None	replace
85	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));	      dMin    =    Math.max(dMin,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	8	None	replace
86	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  1],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  1],  work[3  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  -  1],  work[3  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    3],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	3	None	replace
87	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	18	None	replace
88	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	18	None	replace
89	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	18	None	replace
90	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	18	None	replace
91	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	15	None	replace
92	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	15	None	replace
93	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1  *  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1  *  pingPong],  work[2  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  1  *  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	4	None	replace
94	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  1],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  1],  work[2  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  -  1],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	4	None	replace
95	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEn  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEn  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEn	      	non-compiled	[CE]  ';'  expected	5	None	replace
96	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[7  +  pingPong]))))  {  computeShiftIncrement(start,  deflat  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[7  +  pingPong]))))  {  computeShiftIncrement(start,  deflat  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[7  +  pingPong]))))  {  computeShiftIncrement(start,  deflat	      	non-compiled	[CE]  ';'  expected	5	None	replace
97	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[7  +  pingPong]))))  {  computeShiftIncrement(start,  deflate  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[7  +  pingPong]))))  {  computeShiftIncrement(start,  deflate  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[7  +  pingPong]))))  {  computeShiftIncrement(start,  deflate	      	non-compiled	[CE]  ';'  expected	5	None	replace
98	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  computeShiftIncrement(start,  deflat  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  computeShiftIncrement(start,  deflat  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  computeShiftIncrement(start,  deflat	      	non-compiled	[CE]  ';'  expected	5	None	replace
99	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[4  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[4  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[4  +  pingPong]));	      dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	19	None	replace
100	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));	      dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	19	None	replace
101	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[3  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[3  +  pingPong]));	      dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	23	None	replace
102	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[3  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[3  +  pingPong],  work[2  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  Math.max(work[3  +  pingPong],  work[2  +  pingPong]));	      dMin    =    Math.max(dMin,    Math.max(work[3    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	9	None	replace
103	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[2  *  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[2  *  pingPong]));	      dMin    =    Math.max(dMin,    Math.max(work[3    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	9	None	replace
104	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[2  *  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[2  *  pingPong],  work[2  *  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[2  *  pingPong],  work[2  *  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	12	None	replace
105	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	12	None	replace
106	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	14	None	replace
107	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[2  *  pingPong]);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[2  *  pingPong]);  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  work[2  *  pingPong]);	      dMin    =    Math.min(work[l    -    1],    work[3    +    pingPong]);    	non-compiled	[CE]  ';'  expected	21	None	replace
108	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    9],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	7	None	replace
109	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[2  *  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[2  *  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[2    +    1]));    	non-compiled	[CE]  ';'  expected	1	None	replace
110	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[6  +  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    9],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	10	None	replace
111	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2],  work[6  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2],  work[6  +  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    9],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	10	None	replace
112	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(work,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	12	None	replace
113	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[2  +  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(work,  Math.max(work[2  +  pingPong],  work[3  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[2  +  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	12	None	replace
114	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	24	None	replace
115	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[4  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[4  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[4  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	24	None	replace
116	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  2  *  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  2  *  pingPong],  work[2  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  -  2  *  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	4	None	replace
117	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  2  *  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  2  *  pingPong],  work[2  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[l  -  2  *  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	4	None	replace
118	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[7  +  pingPong]);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[7  +  pingPong]);  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  work[7  +  pingPong]);	      dMin2    =    Math.max(work[l    -    1],    work[3    +    pingPong]);    	non-compiled	[CE]  ';'  expected	22	None	replace
119	[BUG]  [BUGGY]  if(qMax  >=  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax  >=  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	17	None	replace
120	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    2    *    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	2	None	replace
121	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    2    *    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	2	None	replace
122	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	16	None	replace
123	[BUG]  [BUGGY]  if(qMax  >=  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax  >=  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	16	None	replace
124	[BUG]  [BUGGY]  if(qMax!=  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax!=  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	16	None	replace
125	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[3  +  1]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[3  +  1]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[3  +  1]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[3    +    1]));    	non-compiled	[CE]  ';'  expected	11	None	replace
126	[BUG]  [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  deflat  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  deflat  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  deflat	      	non-compiled	[CE]  ';'  expected	5	None	replace
127	[BUG]  [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,	      	non-compiled	[CE]  ';'  expected	5	None	replace
128	[BUG]  [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  deflate  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  deflate  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  deflate	      	non-compiled	[CE]  ';'  expected	5	None	replace
129	[BUG]  [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  end  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  end  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  end	      	non-compiled	[CE]  ';'  expected	5	None	replace
130	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3],  work[2  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3],  work[2  +  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    9],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	10	None	replace
131	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]),  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]),  work[2  *  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]),  work[2  *  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    9],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	10	None	replace
132	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));	      dMin    =    Math.max(dMin,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	6	None	replace
133	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  1],  work[l  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  1],  work[l  -  2  *  pingPong]));  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  1],  work[l  -  2  *  pingPong]));	      dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    9],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	20	None	replace
134	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  3],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  3],  work[3  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  3],  work[3  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    3],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	3	None	replace
135	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[2  +  1]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[2  +  1]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[2  +  1]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[2    +    1]));    	non-compiled	[CE]  ';'  expected	1	None	replace
136	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	14	None	replace
137	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]    qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	      if(dMin    <    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	14	None	replace
138	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));    [BUGGY]  qMax=  Math.max(work,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  [BUGGY]    dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	13	None	replace
