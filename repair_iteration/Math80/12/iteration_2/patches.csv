bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  work[3  *  pingPong]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  work[3  *  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  work[3  *  pingPong]);	  dMin2    =    Math.max(work[l    -    1],    work[3    *    pingPong]);    	non-compiled	[CE]  ';'  expected	38	None	replace
2	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[2  *  pingPong]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[2  *  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  work[2  *  pingPong]);	  dMin2    =    Math.max(work[l    -    1],    work[3    *    pingPong]);    	non-compiled	[CE]  ';'  expected	38	None	replace
3	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  computeShiftIncrement(start,  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  computeShiftIncrement(start,  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  computeShiftIncrement(start,	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    2],    work[3    +    pingPong],    work[7    +    pingPong]))))    {    computeShiftIncrement(start,    deflate    	non-compiled	[CE]  ';'  expected	97	None	replace
4	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  computeShiftIncrement(start,  deflate  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  computeShiftIncrement(start,  deflate  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  computeShiftIncrement(start,  deflate	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    2],    work[3    +    pingPong],    work[7    +    pingPong]))))    {    computeShiftIncrement(start,    deflate    	non-compiled	[CE]  ';'  expected	97	None	replace
5	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[5  +  pingPong]))))  {  computeShiftIncrement(start,  deflat  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[5  +  pingPong]))))  {  computeShiftIncrement(start,  deflat  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[5  +  pingPong]))))  {  computeShiftIncrement(start,  deflat	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    2],    work[3    +    pingPong],    work[7    +    pingPong]))))    {    computeShiftIncrement(start,    deflate    	non-compiled	[CE]  ';'  expected	97	None	replace
6	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[5  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[5  +  pingPong]));	  dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    2    *    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	33	None	replace
7	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[4  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[4  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[4  +  pingPong]));	  dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    2    *    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	33	None	replace
8	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[6  +  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	111	None	replace
9	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[1    +    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	47	None	replace
10	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[4  +  pingPong]));  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[4  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[4  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[4    +    pingPong]));    	non-compiled	[CE]  	115	None	replace
11	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[4  +  pingPong]));  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[4  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[4  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[4    +    pingPong]));    	non-compiled	[CE]  	115	None	replace
12	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  3],  work[4  +  pingPong]));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  3],  work[4  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  3],  work[4  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[4    +    pingPong]));    	non-compiled	[CE]  	115	None	replace
13	[BUG]  [BUGGY]  if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +	  if(qMax    >=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  	119	None	replace
14	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +	  if(qMax    >=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	119	None	replace
15	[BUG]  [BUGGY]  if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3	  if(qMax    >=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	119	None	replace
16	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[7  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[7  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    -    2    *    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	66	None	replace
17	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    -    2    *    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	66	None	replace
18	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[3]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[3]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[3]));	  qMax=    Math.max(dMin2,    Math.max(work[l    +    1],    work[3    +    1]));    	non-compiled	[CE]  ';'  expected	125	None	replace
19	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[3  +  2]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[3  +  2]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[3  +  2]));	  qMax=    Math.max(dMin2,    Math.max(work[l    +    1],    work[3    +    1]));    	non-compiled	[CE]  ';'  expected	125	None	replace
20	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[7  +  1]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[7  +  1]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[7  +  1]));	  qMax=    Math.max(dMin2,    Math.max(work[l    +    1],    work[3    +    1]));    	non-compiled	[CE]  ';'  expected	125	None	replace
21	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[1    +    pingPong],    work[1    +    pingPong]));    	non-compiled	[CE]  ';'  expected	67	None	replace
22	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	79	None	replace
23	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  2  *  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  2  *  pingPong],  work[7  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  -  2  *  pingPong],  work[7  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[l    -    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	116	None	replace
24	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[l    -    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	116	None	replace
25	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1]);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    work[3    +    pingPong]);    	non-compiled	[CE]  ';'  expected	40	None	replace
26	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  work[3  +  2  *  pingPong]);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  work[3  +  2  *  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  work[3  +  2  *  pingPong]);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    work[3    +    pingPong]);    	non-compiled	[CE]  ';'  expected	40	None	replace
27	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  +  1],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  +  1],  work[2  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[l  +  1],  work[2  *  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	109	None	replace
28	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[2  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[2  *  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	109	None	replace
29	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[1  +  2  *  pingPong]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[1  +  2  *  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  work[1  +  2  *  pingPong]);	  dMin    =    Math.min(work[l    -    1],    work[3    +    2    *    pingPong]);    	non-compiled	[CE]  ';'  expected	44	None	replace
30	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[7  +  2  *  pingPong]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[7  +  2  *  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  work[7  +  2  *  pingPong]);	  dMin    =    Math.min(work[l    -    1],    work[3    +    2    *    pingPong]);    	non-compiled	[CE]  ';'  expected	44	None	replace
31	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  2]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  2]);  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  2]);	  dMin    =    Math.min(dMin2,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	62	None	replace
32	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  3]);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  3]);  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  3]);	  dMin    =    Math.min(dMin2,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	62	None	replace
33	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  9]);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  9]);  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  9]);	  dMin    =    Math.min(dMin2,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	62	None	replace
34	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));	  dMin    =    Math.min(dMin2,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	132	None	replace
35	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));	  dMin    =    Math.min(dMin2,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	132	None	replace
36	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[3  +  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[3  +  pingPong],  work[5  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  Math.max(work[3  +  pingPong],  work[5  +  pingPong]));	  dMin    =    Math.min(dMin2,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	132	None	replace
37	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >>  ';'  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >>  ';'  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >>  ';'	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work    	non-compiled	[CE]  ';'  expected	106	None	replace
38	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[6  *  pingPong]));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[6  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[6  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2    *    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	60	None	replace
39	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[3  *  pingPong]));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[3  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[3  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2    *    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	60	None	replace
40	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	88	None	replace
41	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	88	None	replace
42	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	88	None	replace
43	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  }  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  }	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	88	None	replace
44	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  4],  work[3  *  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  4],  work[3  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  4],  work[3  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    4],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	14	None	replace
45	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  4],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  4],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  4],  work[2  +  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    4],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	14	None	replace
46	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  3],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  3],  work[6  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  3],  work[6  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	114	None	replace
47	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));	  dMin    =    Math.max(dMin2,    Math.max(work[1    +    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	84	None	replace
48	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.min(work[1  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.min(work[1  +  pingPong],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.min(work[1  +  pingPong],  work[2  *  pingPong]));	  dMin    =    Math.max(dMin2,    Math.max(work[1    +    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	84	None	replace
49	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  2  *  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  2  *  pingPong],  work[7  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[l  -  2  *  pingPong],  work[7  +  pingPong]));	  qMax=    Math.max(work,    Math.max(work[l    -    2    *    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	121	None	replace
50	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  2  *  dMin2,  work[3  +  dMin]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  2  *  dMin2,  work[3  +  dMin]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[l  -  2  *  dMin2,  work[3  +  dMin]));	  qMax=    Math.max(work,    Math.max(work[l    -    2    *    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	121	None	replace
51	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  1  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  1  *  pingPong],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[l  -  1  *  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(work,    Math.max(work[l    -    2    *    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	121	None	replace
52	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3],  work[2  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    3],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	130	None	replace
53	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3  *  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3  *  pingPong],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3  *  pingPong],  work[2  +  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    3],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	130	None	replace
54	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[1  *  pingPong]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[1  *  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  work[1  *  pingPong]);	  dMin    =    Math.min(work[l    -    1],    work[3    *    pingPong]);    	non-compiled	[CE]  ';'  expected	43	None	replace
55	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(dMin,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	46	None	replace
56	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  -  2  *  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  -  2  *  pingPong],  work[2  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[l  -  2  *  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    -    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	55	None	replace
57	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    -    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	55	None	replace
58	[BUG]  [BUGGY]  dMin  =  Math.max(dMin,  Math.max(work[l  +  2  *  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin,  Math.max(work[l  +  2  *  pingPong],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin,  Math.max(work[l  +  2  *  pingPong],  work[2  *  pingPong]));	  dMin    =    Math.max(dMin,    Math.max(work[3    +    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	32	None	replace
59	[BUG]  [BUGGY]  dMin  =  Math.max(dMin,  Math.max(work[l  +  1],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin,  Math.max(work[l  +  1],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin,  Math.max(work[l  +  1],  work[2  *  pingPong]));	  dMin    =    Math.max(dMin,    Math.max(work[3    +    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	32	None	replace
60	[BUG]  [BUGGY]  dMin  =  Math.max(dMin,  Math.min(work[3  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin,  Math.min(work[3  +  pingPong],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin,  Math.min(work[3  +  pingPong],  work[2  *  pingPong]));	  dMin    =    Math.max(dMin,    Math.max(work[3    +    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	32	None	replace
61	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMax,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));	  Integer    qMax    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	8	None	replace
62	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[l  +  1],  work[2  +  1]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[l  +  1],  work[2  +  1]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMax,  Math.max(work[l  +  1],  work[2  +  1]));	  Integer    qMax    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	8	None	replace
63	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[l  +  2  *  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[l  +  2  *  pingPong],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMax,  Math.max(work[l  +  2  *  pingPong],  work[2  +  pingPong]));	  Integer    qMax    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	8	None	replace
64	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[l  +  2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[l  +  2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMax,  Math.max(work[l  +  2  *  pingPong],  work[3  +  pingPong]));	  Integer    qMax    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	8	None	replace
65	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	89	None	replace
66	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  }  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  }	  if(qMax    ==    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	136	None	replace
67	[BUG]  [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[2  +  pingPong])))  {  computeShiftIncrement(start,  end  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[2  +  pingPong])))  {  computeShiftIncrement(start,  end  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[2  +  pingPong])))  {  computeShiftIncrement(start,  end	  if((    dMin    <    0)||(MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    work[3    +    pingPong],    work[7    +    pingPong])))    {    computeShiftIncrement(start,    end    	non-compiled	[CE]  ';'  expected	129	None	replace
68	[BUG]  [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement(start,  end  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement(start,  end  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement(start,  end	  if((    dMin    <    0)||(MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    work[3    +    pingPong],    work[7    +    pingPong])))    {    computeShiftIncrement(start,    end    	non-compiled	[CE]  ';'  expected	129	None	replace
69	[BUG]  [BUGGY]  if((  dMin  <  =  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  end  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if((  dMin  <  =  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  end  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if((  dMin  <  =  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  end	  if((    dMin    <    0)||(MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    work[3    +    pingPong],    work[7    +    pingPong])))    {    computeShiftIncrement(start,    end    	non-compiled	[CE]  ';'  expected	129	None	replace
70	[BUG]  [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[2  +  pingPong])))  {  computeShiftIncrement(start,  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[2  +  pingPong])))  {  computeShiftIncrement(start,  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[2  +  pingPong])))  {  computeShiftIncrement(start,	  if((    dMin    <    0)||(MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    work[3    +    pingPong],    work[7    +    pingPong])))    {    computeShiftIncrement(start,    end    	non-compiled	[CE]  ';'  expected	129	None	replace
71	[BUG]  [BUGGY]  dMin  =  Math.min(dMin,  Math.max(work[l  +  1],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin,  Math.max(work[l  +  1],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin,  Math.max(work[l  +  1],  work[2  +  pingPong]));	  dMin    =    Math.min(dMin,    Math.max(work[3    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	31	None	replace
72	[BUG]  [BUGGY]  dMin  =  Math.min(dMin,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));	  dMin    =    Math.min(dMin,    Math.max(work[3    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	31	None	replace
73	[BUG]  [BUGGY]  dMin  =  Math.min(dMin,  Math.max(work[3  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin,  Math.max(work[3  +  pingPong],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin,  Math.max(work[3  +  pingPong],  work[2  *  pingPong]));	  dMin    =    Math.min(dMin,    Math.max(work[3    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	31	None	replace
74	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	69	None	replace
75	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[4  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[4  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[4  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	69	None	replace
76	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[2  *  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[2  *  pingPong],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[2  *  pingPong],  work[2  *  pingPong]));	  dMin    =    Math.max(dMin2,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	77	None	replace
77	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[3  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[3  +  pingPong]));	  dMin    =    Math.max(dMin2,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	77	None	replace
78	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[2  *  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[2  *  pingPong],  work[2  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[2  *  pingPong],  work[2  *  pingPong]));	  qMax=    Math.max(work,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	112	None	replace
79	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));	  qMax=    Math.max(work,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	112	None	replace
80	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[l  -  1],  Math.max(work[l  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[l  -  1],  Math.max(work[l  -  2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  Math.max(work[l  -  1],  Math.max(work[l  -  2  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	1	None	replace
81	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  2  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	1	None	replace
82	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[2  *  pingPong]));	  dMin    =    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	103	None	replace
83	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[3  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[3  +  pingPong],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  Math.max(work[3  +  pingPong],  work[2  *  pingPong]));	  dMin    =    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	103	None	replace
84	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[l  +  1],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[l  +  1],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[l  +  1],  work[2  *  pingPong]));	  dMin    =    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	103	None	replace
85	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  work[2  *  pingPong]));	  dMin    =    Math.min(work[l    -    1],    work[2    *    pingPong]);    	non-compiled	[CE]  ';'  expected	107	None	replace
86	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[1    +    pingPong],    work[1    +    pingPong]));    	non-compiled	[CE]  ';'  expected	105	None	replace
87	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[1  +  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[1  +  pingPong],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[1  +  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[1    +    pingPong],    work[1    +    pingPong]));    	non-compiled	[CE]  ';'  expected	105	None	replace
88	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[7  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[7  +  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2    *    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	110	None	replace
89	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[5  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[5  +  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2    *    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	110	None	replace
90	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  3],  work[l  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  3],  work[l  -  2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  3],  work[l  -  2  *  pingPong]));	  dMin    =    Math.min(dMin2,    work[l    -    1],    Math.max(work[l    -    9],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	2	None	replace
91	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  4],  work[l  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  4],  work[l  -  2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  4],  work[l  -  2  *  pingPong]));	  dMin    =    Math.min(dMin2,    work[l    -    1],    Math.max(work[l    -    9],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	2	None	replace
92	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  3  +  work[l  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  3  +  work[l  -  2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  3  +  work[l  -  2  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    3],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	3	None	replace
93	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  1  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  1  *  pingPong],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  -  1  *  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[l    -    2    *    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	120	None	replace
94	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	68	None	replace
95	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[2  +  0]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[2  +  0]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[2  +  0]));	  qMax=    Math.max(dMin2,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	68	None	replace
96	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[2  +  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[2  +  pingPong],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[2  +  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(dMin,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	23	None	replace
97	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[2  *  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[2  *  pingPong],  work[2  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[2  *  pingPong],  work[2  *  pingPong]));	  qMax=    Math.max(dMin,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	23	None	replace
98	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3	  dMin    =    Math.max(dMin,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	9	None	replace
99	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3	  dMin    =    Math.max(dMin,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	9	None	replace
100	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  >>  ';'  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  >>  ';'  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  >>  ';'	  dMin    =    Math.max(dMin,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	9	None	replace
101	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  }  ';'  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  }  ';'  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  }  ';'	  dMin    =    Math.max(dMin,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	9	None	replace
102	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    ping    	non-compiled	[CE]  ';'  expected	73	None	replace
103	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  9]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  9]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  9]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	  dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	137	None	replace
104	[BUG]  [BUGGY]  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  }  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  }	  dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	137	None	replace
105	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  2]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  2]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  2]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	  dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	137	None	replace
106	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[2  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[2  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[l    +    1],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	20	None	replace
107	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[7  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[7  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[l    +    1],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	20	None	replace
108	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  +  1],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  +  1],  work[2  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[l  +  1],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	24	None	replace
109	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	58	None	replace
110	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  9  *  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  9  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  9  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	58	None	replace
111	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pong]));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	58	None	replace
112	[BUG]  [BUGGY]  if(dMin!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(dMin!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(dMin!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingPong],    	non-compiled	[CE]  ';'  expected	75	None	replace
113	[BUG]  [BUGGY]  if(dMin!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(dMin!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(dMin!=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingPong],    	non-compiled	[CE]  ';'  expected	75	None	replace
114	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	80	None	replace
115	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	80	None	replace
116	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[3  +  pingPong]));	  dMin    =    Math.min(work[l    -    1],    Math.min(work[l    -    2],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	108	None	replace
117	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[7  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[7  +  pingPong]));	  dMin    =    Math.min(work[l    -    1],    Math.min(work[l    -    2],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	108	None	replace
118	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[6  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[6  +  pingPong]));	  dMin    =    Math.min(work[l    -    1],    Math.min(work[l    -    2],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	108	None	replace
119	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  1],  work[l  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  1],  work[l  -  2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  1],  work[l  -  2  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    1],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	4	None	replace
120	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  1],  work[3  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  1],  work[3  -  2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  1],  work[3  -  2  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    1],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	4	None	replace
121	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  1],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  1],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  1],  work[2  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    1],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	4	None	replace
122	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  work[3  -  2  *  pingPong]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  work[3  -  2  *  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  work[3  -  2  *  pingPong]);	  dMin2    =    Math.max(work[l    -    1],    work[3    -    2    *    pingPong]);    	non-compiled	[CE]  ';'  expected	82	None	replace
123	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[1  +  2  *  pingPong]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[1  +  2  *  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  work[1  +  2  *  pingPong]);	  dMin2    =    Math.max(work[l    -    1],    work[3    -    2    *    pingPong]);    	non-compiled	[CE]  ';'  expected	82	None	replace
124	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[2  +  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	59	None	replace
125	[BUG]  [BUGGY]  dMin  =  Math.max(dMin,  Math.min(work[1  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin,  Math.min(work[1  +  pingPong],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin,  Math.min(work[1  +  pingPong],  work[2  *  pingPong]));	  dMin    =    Math.max(dMin,    Math.max(work[1    +    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	53	None	replace
126	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  2]);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  2]);  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  work[l  -  2]);	  dMin    =    Math.max(dMin2,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	64	None	replace
127	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  3]);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  3]);  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  work[l  -  3]);	  dMin    =    Math.max(dMin2,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	64	None	replace
128	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  2],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  2],  work[7  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  2],  work[7  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    2],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	35	None	replace
129	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.max(work[3  +  ping  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.max(work[3  +  ping  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.max(work[3  +  ping	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	72	None	replace
130	[BUG]  [BUGGY]  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.max(work[3  +  ping  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.max(work[3  +  ping  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.max(work[3  +  ping	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	72	None	replace
131	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3],  work[3  *  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3],  work[3  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3],  work[3  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    3],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	13	None	replace
132	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[5  +  pingPong]))))  {  computeShiftIncrement(start,  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[5  +  pingPong]))))  {  computeShiftIncrement(start,  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[5  +  pingPong]))))  {  computeShiftIncrement(start,	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    2],    work[3    +    pingPong],    work[7    +    pingPong]))))    {    computeShiftIncrement(start,    deflat    	non-compiled	[CE]  ';'  expected	96	None	replace
133	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  2  *  pingPong],  work[3  +  pingPong]));	  dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	101	None	replace
134	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  3  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  3  *  pingPong],  work[3  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  3  *  pingPong],  work[3  +  pingPong]));	  dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	101	None	replace
135	[BUG]  [BUGGY]  dMin  =  -0.0;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  -0.0;  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  -0.0;	  Integer    qMax    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    dMin    =    -0.0;    	non-compiled	[CE]  ';'  expected	18	None	replace
136	[BUG]  [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin  =  -0.0;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  int  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin  =  -0.0;  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	int  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin  =  -0.0;	  Integer    qMax    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    dMin    =    -0.0;    	non-compiled	[CE]  ';'  expected	18	None	replace
137	[BUG]  [BUGGY]  Integer  qMax  =  Math.min(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin  =  -0.0;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.min(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin  =  -0.0;  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.min(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin  =  -0.0;	  Integer    qMax    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    dMin    =    -0.0;    	non-compiled	[CE]  ';'  expected	18	None	replace
138	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[l  +  1],  work[2  +  1]));  dMin  =  -0.0;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[l  +  1],  work[2  +  1]));  dMin  =  -0.0;  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMax,  Math.max(work[l  +  1],  work[2  +  1]));  dMin  =  -0.0;	  Integer    qMax    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    dMin    =    -0.0;    	non-compiled	[CE]  ';'  expected	18	None	replace
139	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.min(work[1  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.min(work[1  +  pingPong],  work[2  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.min(work[1  +  pingPong],  work[2  *  pingPong]));	  qMax=    Math.max(qMax,    Math.min(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	83	None	replace
140	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[5  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[5  +  pingPong]));	  dMin    =    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	76	None	replace
141	[BUG]  [BUGGY]  if(dMin  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(dMin  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(dMin  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	81	None	replace
142	[BUG]  [BUGGY]  if(dMin  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(dMin  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(dMin  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	81	None	replace
143	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  >>  ';'  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  >>  ';'  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  >>  ';'	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	81	None	replace
144	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingPong    	non-compiled	[CE]  ';'  expected	74	None	replace
145	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong  >>  qMax,  Math.max(work[3  +  ping  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong  >>  qMax,  Math.max(work[3  +  ping  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong  >>  qMax,  Math.max(work[3  +  ping	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingPong    	non-compiled	[CE]  ';'  expected	74	None	replace
146	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  *  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  *  pingPong],  work[2  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  *  pingPong],  work[2  *  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[2    *    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	104	None	replace
147	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[2  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  -  2  *  pingPong],  work[2  *  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[2    *    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	104	None	replace
148	[BUG]  [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement(start,  deflat  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement(start,  deflat  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement(start,  deflat	  if((    dMin    <    0)||(MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    work[3    +    pingPong],    work[7    +    pingPong])))    {    computeShiftIncrement(start,    deflate    	non-compiled	[CE]  ';'  expected	128	None	replace
149	[BUG]  [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement(start,  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement(start,  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement(start,	  if((    dMin    <    0)||(MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    work[3    +    pingPong],    work[7    +    pingPong])))    {    computeShiftIncrement(start,    deflate    	non-compiled	[CE]  ';'  expected	128	None	replace
150	[BUG]  [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[2  +  pingPong])))  {  computeShiftIncrement(start,  deflat  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[2  +  pingPong])))  {  computeShiftIncrement(start,  deflat  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[2  +  pingPong])))  {  computeShiftIncrement(start,  deflat	  if((    dMin    <    0)||(MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    work[3    +    pingPong],    work[7    +    pingPong])))    {    computeShiftIncrement(start,    deflate    	non-compiled	[CE]  ';'  expected	128	None	replace
151	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[7  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[7  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[l    +    2    *    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	19	None	replace
152	[BUG]  [BUGGY]  dMin  =  Math.max(qMin,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(qMin,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(qMin,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));	  dMin    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	7	None	replace
153	[BUG]  [BUGGY]  dMin  =  Math.min(qMin,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(qMin,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(qMin,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));	  dMin    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	7	None	replace
154	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  -  2  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  -  2  *  pingPong],  work[6  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  -  2  *  pingPong],  work[6  +  pingPong]));	  dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    3    *    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	42	None	replace
155	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[7  +  pingPong]))))  {  computeShiftIncrement(start,  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[7  +  pingPong]))))  {  computeShiftIncrement(start,  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[7  +  pingPong]))))  {  computeShiftIncrement(start,	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    2],    work[3    +    pingPong],    work[6    +    pingPong]))))    {    computeShiftIncrement(start,    deflat    	non-compiled	[CE]  ';'  expected	98	None	replace
156	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  1],  work[3  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  1],  work[3  -  2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  1],  work[3  -  2  *  pingPong]));	  dMin    =    Math.min(work[l    -    1],    Math.max(work[l    -    1],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	133	None	replace
157	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  1],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  1],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  1],  work[2  *  pingPong]));	  dMin    =    Math.min(work[l    -    1],    Math.max(work[l    -    1],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	133	None	replace
158	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  1],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  1],  work[3  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  1],  work[3  +  pingPong]));	  dMin    =    Math.min(work[l    -    1],    Math.max(work[l    -    1],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	133	None	replace
159	[BUG]  [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	(MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));	  (MathUtils.SAFE_MIN    *    qMax    <    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	6	None	replace
160	[BUG]  [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	(MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[2  +  pingPong]));	  (MathUtils.SAFE_MIN    *    qMax    <    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	6	None	replace
161	[BUG]  [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	(MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));	  (MathUtils.SAFE_MIN    *    qMax    <    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	6	None	replace
162	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[2  *  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(work,    Math.max(work[2    +    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	113	None	replace
163	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  +  1],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  +  1],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[l  +  1],  work[3  +  pingPong]));	  qMax=    Math.max(work,    Math.max(work[2    +    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	113	None	replace
164	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[2  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[2  +  pingPong],  work[7  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[2  +  pingPong],  work[7  +  pingPong]));	  qMax=    Math.max(work,    Math.max(work[2    +    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	113	None	replace
165	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    2    *    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	71	None	replace
166	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  2  *  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  2  *  pingPong],  work[7  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  2  *  pingPong],  work[7  +  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    2    *    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	71	None	replace
167	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  2  *  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  2  *  pingPong],  work[5  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  2  *  pingPong],  work[5  +  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    2    *    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	71	None	replace
168	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[1  +  pingPong],  work[2  +  0]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[1  +  pingPong],  work[2  +  0]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  Math.max(work[1  +  pingPong],  work[2  +  0]));	  dMin    =    Math.min(dMin2,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	85	None	replace
169	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[1  +  pingPong],  work[2  +  qMax]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[1  +  pingPong],  work[2  +  qMax]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  Math.max(work[1  +  pingPong],  work[2  +  qMax]));	  dMin    =    Math.min(dMin2,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	85	None	replace
170	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));	  dMin    =    Math.max(dMin,    Math.min(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	54	None	replace
171	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));	  dMin    =    Math.max(dMin,    Math.min(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	54	None	replace
172	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  +  2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  +  2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[l  +  2  *  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(dMin,    Math.max(work[l    +    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	56	None	replace
173	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  +  2  *  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  +  2  *  pingPong],  work[7  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[l  +  2  *  pingPong],  work[7  +  pingPong]));	  qMax=    Math.max(dMin,    Math.max(work[l    +    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	56	None	replace
174	[BUG]  [BUGGY]  dMin  =  Math.min(0.0,  work[l  -  2]);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(0.0,  work[l  -  2]);  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(0.0,  work[l  -  2]);	  dMin    =    Math.min(0.0,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	63	None	replace
175	[BUG]  [BUGGY]  dMin  =  Math.min(0.0,  work[l  -  9]);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(0.0,  work[l  -  9]);  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(0.0,  work[l  -  9]);	  dMin    =    Math.min(0.0,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	63	None	replace
176	[BUG]  [BUGGY]  dMin  =  Math.min(0.0,  work[l  -  1]  *  qMax);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(0.0,  work[l  -  1]  *  qMax);  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(0.0,  work[l  -  1]  *  qMax);	  dMin    =    Math.min(0.0,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	63	None	replace
177	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));	  qMax=    Math.max(work,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	138	None	replace
178	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.max(work[3  +  pingP  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.max(work[3  +  pingP  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  Math.max(work[3  +  pingP	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	122	None	replace
179	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  2  *  pingPong],  work[1  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  2  *  pingPong],  work[1  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  -  2  *  pingPong],  work[1  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[l    +    2    *    pingPong],    work[1    +    pingPong]));    	non-compiled	[CE]  ';'  expected	22	None	replace
180	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  +  1],  work[3]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  +  1],  work[3]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[l  +  1],  work[3]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[3]));    	non-compiled	[CE]  ';'  expected	26	None	replace
181	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  +  1],  work[2]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  +  1],  work[2]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[l  +  1],  work[2]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[2]));    	non-compiled	[CE]  ';'  expected	15	None	replace
182	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[2]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[2]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[2]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[2]));    	non-compiled	[CE]  ';'  expected	15	None	replace
183	[BUG]  [BUGGY]  dMin  =  Math.min(dMin,  work[l  -  1]);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin,  work[l  -  1]);  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin,  work[l  -  1]);	  dMin    =    Math.min(dMax,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	65	None	replace
184	[BUG]  [BUGGY]  dMin  =  Math.min(dMin1,  work[l  -  1]);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin1,  work[l  -  1]);  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin1,  work[l  -  1]);	  dMin    =    Math.min(dMax,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	65	None	replace
185	[BUG]  [BUGGY]  dMin  =  Math.min(dMax2,  work[l  -  1]);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMax2,  work[l  -  1]);  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMax2,  work[l  -  1]);	  dMin    =    Math.min(dMax,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	65	None	replace
186	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  [Delete]  ';'  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  [Delete]  ';'  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  [Delete]  ';'	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work    	non-compiled	[CE]  ';'  expected	92	None	replace
187	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1	  dMin    =    Math.max(dMin,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	37	None	replace
188	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  >>  ';'  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  >>  ';'  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  >>  ';'	  dMin    =    Math.max(dMin,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	37	None	replace
189	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  }  ';'  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  }  ';'  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  }  ';'	  dMin    =    Math.max(dMin,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	37	None	replace
190	[BUG]  [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[5  +  pingPong])))  {  computeShiftIncrement(start,  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[5  +  pingPong])))  {  computeShiftIncrement(start,  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[5  +  pingPong])))  {  computeShiftIncrement(start,	  if((    dMin    <    0)||(MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    work[3    +    pingPong],    work[7    +    pingPong])))    {    computeShiftIncrement(start,    	non-compiled	[CE]  ';'  expected	127	None	replace
191	[BUG]  [BUGGY]  if((  dMin  <  =  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if((  dMin  <  =  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if((  dMin  <  =  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,	  if((    dMin    <    0)||(MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    work[3    +    pingPong],    work[7    +    pingPong])))    {    computeShiftIncrement(start,    	non-compiled	[CE]  ';'  expected	127	None	replace
192	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2],  work[7  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2],  work[7  +  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	11	None	replace
193	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2],  work[3  *  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2],  work[3  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2],  work[3  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	11	None	replace
194	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[2  +  3]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[2  +  3]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[2  +  3]));	  qMax=    Math.max(dMin2,    Math.max(work[l    +    1],    work[2    +    1]));    	non-compiled	[CE]  ';'  expected	135	None	replace
195	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.min(work[3  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.min(work[3  +  pingPong],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.min(work[3  +  pingPong],  work[2  +  pingPong]));	  dMin    =    Math.max(dMin,    Math.min(work[3    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	30	None	replace
196	[BUG]  [BUGGY]  dMin  =  Math.max(dMin,  Math.min(work[2  +  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin,  Math.min(work[2  +  pingPong],  work[3  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin,  Math.min(work[2  +  pingPong],  work[3  +  pingPong]));	  dMin    =    Math.max(dMin,    Math.min(work[3    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	30	None	replace
197	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  2  *  dMin2,  work[2  +  dMin]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  2  *  dMin2,  work[2  +  dMin]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[l  -  2  *  dMin2,  work[2  +  dMin]));	  qMax=    Math.max(work,    Math.max(work[l    -    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	117	None	replace
198	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  1  *  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  1  *  pingPong],  work[2  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[l  -  1  *  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(work,    Math.max(work[l    -    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	117	None	replace
199	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[1  +  pingPong]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[1  +  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  work[1  +  pingPong]);	  dMin    =    Math.min(work[l    -    1],    work[2    +    pingPong]);    	non-compiled	[CE]  ';'  expected	45	None	replace
200	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  work[7  +  pingPong]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  work[7  +  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  work[7  +  pingPong]);	  dMin2    =    Math.max(work[l    -    1],    work[7    +    pingPong]);    	non-compiled	[CE]  ';'  expected	118	None	replace
201	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[2  +  pingPong]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[2  +  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  work[2  +  pingPong]);	  dMin2    =    Math.max(work[l    -    1],    work[7    +    pingPong]);    	non-compiled	[CE]  ';'  expected	118	None	replace
202	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[1  +  pingPong]);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[1  +  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  work[1  +  pingPong]);	  dMin2    =    Math.max(work[l    -    1],    work[7    +    pingPong]);    	non-compiled	[CE]  ';'  expected	118	None	replace
203	[BUG]  [BUGGY]  if(qMax!=  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax!=  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping	  if(qMax!=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	124	None	replace
204	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  dMin  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEn  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  dMin  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEn  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  dMin  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEn	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    9],    work[l    -    2    *    pingPong]))))    {    computeShiftIncrement(start,    deflatedEn    	non-compiled	[CE]  ';'  expected	95	None	replace
205	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  dMin2  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEn  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  dMin2  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEn  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  dMin2  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEn	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    9],    work[l    -    2    *    pingPong]))))    {    computeShiftIncrement(start,    deflatedEn    	non-compiled	[CE]  ';'  expected	95	None	replace
206	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    9],    work[l    -    2    *    pingPong]))))    {    computeShiftIncrement(start,    deflatedEn    	non-compiled	[CE]  ';'  expected	95	None	replace
207	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflat  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflat  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflat	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    9],    work[l    -    2    *    pingPong]))))    {    computeShiftIncrement(start,    deflatedEn    	non-compiled	[CE]  ';'  expected	95	None	replace
208	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  2],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  2],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  2],  work[3  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[l    +    3],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	134	None	replace
209	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  1],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  1],  work[2  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  -  1],  work[2  *  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    -    1],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	94	None	replace
210	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  -  1],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  -  1],  work[2  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[l  -  1],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    -    1],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	94	None	replace
211	[BUG]  [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[l  +  1],  work[3  +  pingPong]));  dMin=  -0.0;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[l  +  1],  work[3  +  pingPong]));  dMin=  -0.0;  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	(MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[l  +  1],  work[3  +  pingPong]));  dMin=  -0.0;	  (MathUtils.SAFE_MIN    *    qMax    <    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    dMin=    -0.0;    	non-compiled	[CE]  ';'  expected	5	None	replace
212	[BUG]  [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  dMin=  -0.0;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  dMin=  -0.0;  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	(MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  dMin=  -0.0;	  (MathUtils.SAFE_MIN    *    qMax    <    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    dMin=    -0.0;    	non-compiled	[CE]  ';'  expected	5	None	replace
213	[BUG]  [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[2  +  pingPong]));  dMin=  -0.0;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[2  +  pingPong]));  dMin=  -0.0;  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	(MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[2  +  pingPong]));  dMin=  -0.0;	  (MathUtils.SAFE_MIN    *    qMax    <    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    dMin=    -0.0;    	non-compiled	[CE]  ';'  expected	5	None	replace
214	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[7  +  2  *  pingPong]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[7  +  2  *  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  work[7  +  2  *  pingPong]);	  dMin2    =    Math.max(work[l    -    1],    work[3    +    2    *    pingPong]);    	non-compiled	[CE]  ';'  expected	39	None	replace
215	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	90	None	replace
216	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  }  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  }	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	90	None	replace
217	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  1],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  1],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  -  1],  work[3  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    -    1],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	86	None	replace
218	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  -  1],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  -  1],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[l  -  1],  work[3  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    -    1],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	86	None	replace
219	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMax,  Math.max(work[1  +  pingPong],  work[2  *  pingPong]));	  Integer    qMax    =    Math.max(qMax,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	51	None	replace
220	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMax,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));	  Integer    qMax    =    Math.max(qMax,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	51	None	replace
221	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[2  +  pingPong]));	  Integer    qMax    =    Math.max(qMax,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	51	None	replace
222	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  +  1  *  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[l  +  1  *  pingPong],  work[2  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[l  +  1  *  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	93	None	replace
223	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1  *  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1  *  pingPong],  work[2  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  1  *  pingPong],  work[2  *  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	93	None	replace
224	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[5  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[5  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[5    +    pingPong]));    	non-compiled	[CE]  ';'  expected	70	None	replace
225	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[5  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  2  *  pingPong],  work[5  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[5    +    pingPong]));    	non-compiled	[CE]  ';'  expected	70	None	replace
226	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[4  *  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[4  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[4  *  pingPong]));	  dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[4    +    pingPong]));    	non-compiled	[CE]  ';'  expected	99	None	replace
227	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]),  work[3  *  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]),  work[3  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]),  work[3  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2    *    pingPong]),    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	131	None	replace
228	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]),  work[6  *  pingPong]));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]),  work[6  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]),  work[6  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2    *    pingPong]),    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	131	None	replace
229	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]),  work[5  *  pingPong]));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]),  work[5  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]),  work[5  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2    *    pingPong]),    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	131	None	replace
230	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  -  2  *  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  -  2  *  pingPong],  work[7  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  -  2  *  pingPong],  work[7  +  pingPong]));	  dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    3    *    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	34	None	replace
231	[BUG]  [BUGGY]  dMin  =  Math.max(dMin,  Math.min(work[2  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin,  Math.min(work[2  +  pingPong],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin,  Math.min(work[2  +  pingPong],  work[2  +  pingPong]));	  dMin    =    Math.max(dMin,    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	50	None	replace
232	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));	  dMin    =    Math.max(dMin,    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	50	None	replace
233	[BUG]  [BUGGY]  dMin  =  Math.max(dMin,  Math.min(work[3  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin,  Math.min(work[3  +  pingPong],  work[6  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin,  Math.min(work[3  +  pingPong],  work[6  +  pingPong]));	  dMin    =    Math.max(dMin,    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	50	None	replace
234	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[l  -  2  *  pingPong]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[l  -  2  *  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  work[l  -  2  *  pingPong]);	  dMin2    =    Math.max(work[l    -    1],    work[3    +    2    *    pingPong]);    	non-compiled	[CE]  ';'  expected	39	None	replace
235	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[1  +  pingPong],  work[2]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[1  +  pingPong],  work[2]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  Math.max(work[1  +  pingPong],  work[2]));	  dMin    =    Math.min(dMin2,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	85	None	replace
236	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin2,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin2,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin2,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	91	None	replace
237	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	91	None	replace
238	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  computeShiftIncrement  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  computeShiftIncrement  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  computeShiftIncrement	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    2],    work[3    +    pingPong],    work[7    +    pingPong]))))    {    computeShiftIncrement(start,    deflate    	non-compiled	[CE]  ';'  expected	97	None	replace
239	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    2],    work[3    +    pingPong],    work[7    +    pingPong]))))    {    computeShiftIncrement(start,    deflate    	non-compiled	[CE]  ';'  expected	97	None	replace
240	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  computeShiftIncrement(start  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  computeShiftIncrement(start  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  computeShiftIncrement(start	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    2],    work[3    +    pingPong],    work[7    +    pingPong]))))    {    computeShiftIncrement(start,    deflate    	non-compiled	[CE]  ';'  expected	97	None	replace
241	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  }  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  }	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work    	non-compiled	[CE]  ';'  expected	106	None	replace
242	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >>  '  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >>  '  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >>  '	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work    	non-compiled	[CE]  ';'  expected	106	None	replace
243	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  }  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  }	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work    	non-compiled	[CE]  ';'  expected	106	None	replace
244	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work!=  '  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work!=  '  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work!=  '	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work    	non-compiled	[CE]  ';'  expected	106	None	replace
245	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[3  +  3]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[3  +  3]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  1],  work[3  +  3]));	  qMax=    Math.max(dMin2,    Math.max(work[l    +    1],    work[3    +    1]));    	non-compiled	[CE]  ';'  expected	125	None	replace
246	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.min(work[l  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.min(work[l  -  2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1],  Math.min(work[l  -  2  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	58	None	replace
247	[BUG]  [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[4  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[4  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	(MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[4  +  pingPong]));	  (MathUtils.SAFE_MIN    *    qMax    <    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	6	None	replace
248	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1  *  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  +  1  *  pingPong],  work[2  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  +  1  *  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[l    +    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	21	None	replace
249	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  1],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  1],  work[2  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  -  1],  work[2  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[l    +    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	21	None	replace
250	[BUG]  [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  dMin=  -0.0;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  dMin=  -0.0;  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	(MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  dMin=  -0.0;	  (MathUtils.SAFE_MIN    *    qMax    <    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    dMin=    -0.0;    	non-compiled	[CE]  ';'  expected	5	None	replace
251	[BUG]  [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[3  +  pingPong]));  dMin=  -0.0;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[3  +  pingPong]));  dMin=  -0.0;  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	(MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[3  +  pingPong]));  dMin=  -0.0;	  (MathUtils.SAFE_MIN    *    qMax    <    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    dMin=    -0.0;    	non-compiled	[CE]  ';'  expected	5	None	replace
252	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  4],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  4],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  4],  work[2  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    4],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	14	None	replace
253	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  1],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  1],  work[7  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  -  1],  work[7  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    -    1],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	86	None	replace
254	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[2  *  pingPong],  work[3  *  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[2  *  pingPong],  work[3  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[2  *  pingPong],  work[3  *  pingPong]));	  qMax=    Math.max(work,    Math.max(work[2    +    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	113	None	replace
255	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[3  +  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[3  +  pingPong],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[3  +  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(work,    Math.max(work[2    +    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	113	None	replace
256	[BUG]  [BUGGY]  if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	  if(qMax    >=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	123	None	replace
257	[BUG]  [BUGGY]  if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping	  if(qMax    >=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	123	None	replace
258	[BUG]  [BUGGY]  if(qMax  >=  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >=  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	  if(qMax    >=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	123	None	replace
259	[BUG]  [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	  if(qMax    >=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	123	None	replace
260	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingPong    	non-compiled	[CE]  ';'  expected	74	None	replace
261	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingPong    	non-compiled	[CE]  ';'  expected	74	None	replace
262	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[3  *  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[3  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[3  *  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	109	None	replace
263	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[l  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[l  +  pingPong],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[l  +  pingPong],  work[2  *  pingPong]));	  dMin    =    Math.max(dMin,    Math.max(work[3    +    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	32	None	replace
264	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  1  *  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  1  *  pingPong],  work[2  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  -  1  *  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[l    -    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	116	None	replace
265	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.min(work[3  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.min(work[3  +  pingPong],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.min(work[3  +  pingPong],  work[2  *  pingPong]));	  dMin    =    Math.max(dMin,    Math.min(work[3    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	30	None	replace
266	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	122	None	replace
267	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	122	None	replace
268	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedMin2,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedMin2,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedMin2,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	122	None	replace
269	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	122	None	replace
270	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[6  +  pingPong]));	  dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    2    *    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	33	None	replace
271	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[3  +  pingPong]));	  dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    2    *    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	33	None	replace
272	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  2],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  2],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  -  2],  work[3  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    2],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	35	None	replace
273	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMax,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));	  Integer    qMax    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	8	None	replace
274	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  1  *  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  1  *  pingPong],  work[2  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  -  1  *  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	93	None	replace
275	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[1  *  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[1  *  pingPong],  work[2  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[1  *  pingPong],  work[2  *  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[2    *    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	104	None	replace
276	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  -  3  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  -  3  *  pingPong],  work[6  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  -  3  *  pingPong],  work[6  +  pingPong]));	  dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    3    *    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	42	None	replace
277	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[4]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[4]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[4]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[3    +    3]));    	non-compiled	[CE]  ';'  expected	28	None	replace
278	[BUG]  [BUGGY]  if(l  >  0)  {  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  >>  ';'  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(l  >  0)  {  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  >>  ';'  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(l  >  0)  {  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  >>  ';'	  dMin    =    Math.max(dMin,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	9	None	replace
279	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  }  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  }	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work    	non-compiled	[CE]  ';'  expected	92	None	replace
280	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work!=  '  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work!=  '  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work!=  '	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work    	non-compiled	[CE]  ';'  expected	92	None	replace
281	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >>  '  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >>  '  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >>  '	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work    	non-compiled	[CE]  ';'  expected	92	None	replace
282	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >=  '  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >=  '  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >=  '	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work    	non-compiled	[CE]  ';'  expected	92	None	replace
283	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  pingPong],  work[2  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  pingPong],  work[2  *  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[1    +    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	47	None	replace
284	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  1],  work[l  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  1],  work[l  -  2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  1],  work[l  -  2  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    1],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	4	None	replace
285	[BUG]  [BUGGY]  if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	  if(qMax    >=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	119	None	replace
286	[BUG]  [BUGGY]  if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work	  if(qMax    >=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	119	None	replace
287	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));	  dMin    =    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	76	None	replace
288	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.min(work[2  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.min(work[2  +  pingPong],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.min(work[2  +  pingPong],  work[2  +  pingPong]));	  dMin    =    Math.max(dMin,    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	50	None	replace
289	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[7  +  pingPong]))))  {  computeShiftIncrement  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[7  +  pingPong]))))  {  computeShiftIncrement  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[7  +  pingPong]))))  {  computeShiftIncrement	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    2],    work[3    +    pingPong],    work[6    +    pingPong]))))    {    computeShiftIncrement(start,    deflat    	non-compiled	[CE]  ';'  expected	98	None	replace
290	[BUG]  [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement(start  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement(start  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement(start	  if((    dMin    <    0)||(MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    work[3    +    pingPong],    work[7    +    pingPong])))    {    computeShiftIncrement(start,    	non-compiled	[CE]  ';'  expected	127	None	replace
291	[BUG]  [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement	  if((    dMin    <    0)||(MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    work[3    +    pingPong],    work[7    +    pingPong])))    {    computeShiftIncrement(start,    	non-compiled	[CE]  ';'  expected	127	None	replace
292	[BUG]  [BUGGY]  if(l  >  0)  {  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  >>  ';'  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(l  >  0)  {  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  >>  ';'  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(l  >  0)  {  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  >>  ';'	  dMin    =    Math.max(dMin,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	37	None	replace
293	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  }  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  }	  dMin    =    Math.max(dMin,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	37	None	replace
294	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedMin2,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedMin2,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedMin2,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	88	None	replace
295	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	88	None	replace
296	[BUG]  [BUGGY]  if((  dMin  <  =  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  deflat  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if((  dMin  <  =  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  deflat  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if((  dMin  <  =  0)||(MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong])))  {  computeShiftIncrement(start,  deflat	  if((    dMin    <    0)||(MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    work[3    +    pingPong],    work[7    +    pingPong])))    {    computeShiftIncrement(start,    deflat    	non-compiled	[CE]  ';'  expected	126	None	replace
297	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[2  *  pingPong]));	  dMin    =    Math.max(dMin2,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	77	None	replace
298	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[l  -  2  *  pingPong]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[l  -  2  *  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  work[l  -  2  *  pingPong]);	  dMin    =    Math.min(work[l    -    1],    work[3    +    2    *    pingPong]);    	non-compiled	[CE]  ';'  expected	44	None	replace
299	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[2  *  pingPong],  work[3  *  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[2  *  pingPong],  work[3  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[2  *  pingPong],  work[3  *  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[2    +    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	25	None	replace
300	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[2    +    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	25	None	replace
301	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[5  *  pingPong]));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[5  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[5  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2    *    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	60	None	replace
302	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingPong],    	non-compiled	[CE]  ';'  expected	75	None	replace
303	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingPong],    	non-compiled	[CE]  ';'  expected	75	None	replace
304	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  }  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  }	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingPong],    	non-compiled	[CE]  ';'  expected	75	None	replace
305	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	89	None	replace
306	[BUG]  [BUGGY]  dMin  =  Math.min(0.0,  work[l  -  3]);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(0.0,  work[l  -  3]);  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(0.0,  work[l  -  3]);	  dMin    =    Math.min(0.0,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	63	None	replace
307	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflate  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflate  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflate	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    9],    work[l    -    2    *    pingPong]))))    {    computeShiftIncrement(start,    deflatedEn    	non-compiled	[CE]  ';'  expected	95	None	replace
308	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflat  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflat  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflat	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    9],    work[l    -    2    *    pingPong]))))    {    computeShiftIncrement(start,    deflatedEn    	non-compiled	[CE]  ';'  expected	95	None	replace
309	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEn  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEn  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEn	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    9],    work[l    -    2    *    pingPong]))))    {    computeShiftIncrement(start,    deflatedEn    	non-compiled	[CE]  ';'  expected	95	None	replace
310	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflate  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflate  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflate	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    9],    work[l    -    2    *    pingPong]))))    {    computeShiftIncrement(start,    deflatedEn    	non-compiled	[CE]  ';'  expected	95	None	replace
311	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[5]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[5]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[5]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[3]));    	non-compiled	[CE]  ';'  expected	26	None	replace
312	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[l  +  1],  work[3  +  1]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[l  +  1],  work[3  +  1]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMax,  Math.max(work[l  +  1],  work[3  +  1]));	  Integer    qMax    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	10	None	replace
313	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  Math.max(work[1  +  pingPong],  work[1  +  pingPong]));	  dMin    =    Math.min(dMin2,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	132	None	replace
314	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	79	None	replace
315	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  1],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  1],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[l  -  1],  work[3  +  pingPong]));	  qMax=    Math.max(work,    Math.max(work[l    -    2    *    pingPong],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	121	None	replace
316	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	  if(qMax    ==    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	136	None	replace
317	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	  if(qMax    ==    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	136	None	replace
318	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	  if(qMax    ==    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	136	None	replace
319	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],	  if(qMax    ==    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	136	None	replace
320	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  *  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  *  pingPong]));	  dMin    =    Math.min(work[l    -    1],    Math.min(work[l    -    2],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	108	None	replace
321	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  1],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  1],  work[2  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[l  -  1],  work[2  +  pingPong]));	  qMax=    Math.max(work,    Math.max(work[l    -    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	117	None	replace
322	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));	  dMin    =    Math.min(dMin2,    work[l    -    1],    Math.max(work[l    -    9],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	2	None	replace
323	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  2  *  pingPong]),  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  2  *  pingPong]),  work[3  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  2  *  pingPong]),  work[3  +  pingPong]));	  dMin    =    Math.min(dMin2,    work[l    -    1],    Math.max(work[l    -    9],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	2	None	replace
324	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedMin2,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedMin2,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedMin2,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	90	None	replace
325	[BUG]  [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +	  if(qMax!=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	78	None	replace
326	[BUG]  [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3	  if(qMax!=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	78	None	replace
327	[BUG]  [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	  if(qMax!=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	78	None	replace
328	[BUG]  [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work	  if(qMax!=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	78	None	replace
329	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    ping    	non-compiled	[CE]  ';'  expected	73	None	replace
330	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    ping    	non-compiled	[CE]  ';'  expected	73	None	replace
331	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.min(work[1  +  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.min(work[1  +  pingPong],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMax,  Math.min(work[1  +  pingPong],  work[2  *  pingPong]));	  Integer    qMax    =    Math.max(qMax,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	51	None	replace
332	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[l  +  1],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[l  +  1],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  Math.max(work[l  +  1],  work[2  +  pingPong]));	  dMin    =    Math.min(dMin2,    Math.max(work[3    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	102	None	replace
333	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[2  *  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[2  *  pingPong],  work[2  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[2  *  pingPong],  work[2  *  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	69	None	replace
334	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMin,  Math.max(work[l  +  1],  work[2  +  1]));  dMin  =  -0.0;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.max(qMin,  Math.max(work[l  +  1],  work[2  +  1]));  dMin  =  -0.0;  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMin,  Math.max(work[l  +  1],  work[2  +  1]));  dMin  =  -0.0;	  Integer    qMax    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    dMin    =    -0.0;    	non-compiled	[CE]  ';'  expected	18	None	replace
335	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.min(work[l  +  1],  work[2  +  1]));  dMin  =  -0.0;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.min(work[l  +  1],  work[2  +  1]));  dMin  =  -0.0;  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMax,  Math.min(work[l  +  1],  work[2  +  1]));  dMin  =  -0.0;	  Integer    qMax    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    dMin    =    -0.0;    	non-compiled	[CE]  ';'  expected	18	None	replace
336	[BUG]  [BUGGY]  dMin  =  Math.max(qMin,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(qMin,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(qMin,  Math.max(work[2  +  pingPong],  work[2  +  pingPong]));	  dMin    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	7	None	replace
337	[BUG]  [BUGGY]  dMin  =  Math.max(qMin,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(qMin,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(qMin,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));	  dMin    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	7	None	replace
338	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1],  work[2  +  pingPong]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1],  work[2  +  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  work[l  -  1],  work[2  +  pingPong]);	  dMin    =    Math.min(work[l    -    1],    work[2    +    pingPong]);    	non-compiled	[CE]  ';'  expected	45	None	replace
339	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  *  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  *  pingPong]));	  dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    pingPong],    work[5    +    pingPong]));    	non-compiled	[CE]  ';'  expected	100	None	replace
340	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  9]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  >>  ';'  expected  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  9]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  >>  ';'  expected  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  9]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  >>  ';'  expected	  dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	137	None	replace
341	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  9]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  >>  ';'  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  9]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  >>  ';'  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  9]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  >>  ';'	  dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	137	None	replace
342	[BUG]  [BUGGY]  if(!flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  >>  ';'  expected  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(!flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  >>  ';'  expected  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(!flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  >>  ';'  expected	  dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	137	None	replace
343	[BUG]  [BUGGY]  if(!flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  >=  ';'  expected  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(!flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  >=  ';'  expected  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(!flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  >=  ';'  expected	  dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	137	None	replace
344	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    2    *    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	71	None	replace
345	[BUG]  [BUGGY]  if(qMax!=  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax!=  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0.0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	  if(qMax!=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	124	None	replace
346	[BUG]  [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	  if(qMax!=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	124	None	replace
347	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  1],  work[2]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  -  1],  work[2]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  -  1],  work[2]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[2]));    	non-compiled	[CE]  ';'  expected	15	None	replace
348	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	80	None	replace
349	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  3],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  3],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  -  3],  work[3  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[l    +    3],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	134	None	replace
350	[BUG]  [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[7  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(qMax,  Math.max(work[l  +  1],  work[7  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	36	None	replace
351	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  1],  work[2  +  1]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  1],  work[2  +  1]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  -  1],  work[2  +  1]));	  qMax=    Math.max(dMin2,    Math.max(work[l    +    1],    work[2    +    1]));    	non-compiled	[CE]  ';'  expected	135	None	replace
352	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin2,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	87	None	replace
353	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	87	None	replace
354	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	68	None	replace
355	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  1],  work[1  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  1],  work[1  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  -  1],  work[1  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[l    +    2    *    pingPong],    work[1    +    pingPong]));    	non-compiled	[CE]  ';'  expected	22	None	replace
356	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[7  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[7  +  pingPong]));	  dMin2    =    Math.max(work[l    -    1],    Math.min(work[3    +    2    *    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	41	None	replace
357	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  2  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	1	None	replace
358	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  +  1],  work[3]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  +  1],  work[3]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[l  +  1],  work[3]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[3]));    	non-compiled	[CE]  ';'  expected	26	None	replace
359	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[5  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[5  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[5    +    pingPong]));    	non-compiled	[CE]  ';'  expected	70	None	replace
360	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  1],  work[3  +  1]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  1],  work[3  +  1]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  -  1],  work[3  +  1]));	  qMax=    Math.max(dMin2,    Math.max(work[l    +    1],    work[3    +    1]));    	non-compiled	[CE]  ';'  expected	125	None	replace
361	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    ping    	non-compiled	[CE]  ';'  expected	73	None	replace
362	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    ping    	non-compiled	[CE]  ';'  expected	73	None	replace
363	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    ping    	non-compiled	[CE]  ';'  expected	73	None	replace
364	[BUG]  [BUGGY]  if(dMin  <  0)  {  Integer  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin  =  -0.0;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(dMin  <  0)  {  Integer  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin  =  -0.0;  }  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(dMin  <  0)  {  Integer  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin  =  -0.0;  }	  Integer    qMax    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    dMin    =    -0.0;    	non-compiled	[CE]  ';'  expected	18	None	replace
365	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));	  Integer    qMax    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    dMin    =    -0.0;    	non-compiled	[CE]  ';'  expected	18	None	replace
366	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMax  =  -0.0;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMax  =  -0.0;  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMax  =  -0.0;	  Integer    qMax    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    dMin    =    -0.0;    	non-compiled	[CE]  ';'  expected	18	None	replace
367	[BUG]  [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[3  +  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin,  Math.max(work[3  +  pingPong],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin,  Math.max(work[3  +  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(dMin,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	23	None	replace
368	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[7  -  2  *  pingPong]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[7  -  2  *  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(work[l  -  1],  work[7  -  2  *  pingPong]);	  dMin2    =    Math.max(work[l    -    1],    work[3    -    2    *    pingPong]);    	non-compiled	[CE]  ';'  expected	82	None	replace
369	[BUG]  [BUGGY]  dMin2  =  Math.max(dMin2,  work[l  -  1],  work[3  -  2  *  pingPong]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(dMin2,  work[l  -  1],  work[3  -  2  *  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(dMin2,  work[l  -  1],  work[3  -  2  *  pingPong]);	  dMin2    =    Math.max(work[l    -    1],    work[3    -    2    *    pingPong]);    	non-compiled	[CE]  ';'  expected	82	None	replace
370	[BUG]  [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  workMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement(start,  end  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  workMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement(start,  end  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  workMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement(start,  end	  if((    dMin    <    0)||(MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    work[3    +    pingPong],    work[7    +    pingPong])))    {    computeShiftIncrement(start,    end    	non-compiled	[CE]  ';'  expected	129	None	replace
371	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	72	None	replace
372	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	72	None	replace
373	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	72	None	replace
374	[BUG]  [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  (MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[5  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	(MathUtils.SAFE_MIN  *  qMax  <  Math.max(work[3  +  pingPong],  work[5  +  pingPong]));	  (MathUtils.SAFE_MIN    *    qMax    <    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	6	None	replace
375	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  >>  ';'  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  >>  ';'  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  >>  ';'	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	90	None	replace
376	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1],  Math.min(work[l  -  2  *  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1],  Math.min(work[l  -  2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  work[l  -  1],  Math.min(work[l  -  2  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	58	None	replace
377	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  dMin2  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  computeShiftIncrement(start,  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  dMin2  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  computeShiftIncrement(start,  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  dMin2  <  Math.min(work[l  -  1],  Math.min(work[l  -  2],  work[3  +  pingPong],  work[6  +  pingPong]))))  {  computeShiftIncrement(start,	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    2],    work[3    +    pingPong],    work[7    +    pingPong]))))    {    computeShiftIncrement(start,    deflat    	non-compiled	[CE]  ';'  expected	96	None	replace
378	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3],  work[7  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3],  work[7  +  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    3],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	130	None	replace
379	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3],  work[6  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  3],  work[6  +  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    3],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	130	None	replace
380	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[1  *  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[1  *  pingPong],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  Math.max(work[1  *  pingPong],  work[2  *  pingPong]));	  dMin    =    Math.min(dMin2,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	85	None	replace
381	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  1],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  1],  work[7  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  Math.max(work[l  -  1],  work[7  +  pingPong]));	  dMin    =    Math.min(work[l    -    1],    Math.max(work[l    -    1],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	133	None	replace
382	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.min(work[3  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.min(work[3  +  pingPong],  work[6  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.min(work[3  +  pingPong],  work[6  +  pingPong]));	  dMin    =    Math.max(dMin,    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	50	None	replace
383	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[3  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[3  +  pingPong]));	  Integer    qMax    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	8	None	replace
384	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[2  *  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.max(qMax,  Math.max(work[2  *  pingPong],  work[2  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(qMax,  Math.max(work[2  *  pingPong],  work[2  *  pingPong]));	  Integer    qMax    =    Math.max(qMax,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	8	None	replace
385	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	89	None	replace
386	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	89	None	replace
387	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	89	None	replace
388	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingPong    	non-compiled	[CE]  ';'  expected	74	None	replace
389	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingPong    	non-compiled	[CE]  ';'  expected	74	None	replace
390	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingPong    	non-compiled	[CE]  ';'  expected	74	None	replace
391	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  4],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  4],  work[7  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  4],  work[7  +  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    4],    work[3    +    pingPong]));    	non-compiled	[CE]  ';'  expected	14	None	replace
392	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  +  1],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  +  1],  work[2  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[l  +  1],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	24	None	replace
393	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  2],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  2],  work[6  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  2],  work[6  +  pingPong]));	  dMin    =    Math.min(dMin2,    work[l    -    1],    Math.max(work[l    -    9],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	2	None	replace
394	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  2  *  pingPong]),  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  2  *  pingPong]),  work[7  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1],  Math.max(work[l  -  2  *  pingPong]),  work[7  +  pingPong]));	  dMin    =    Math.min(dMin2,    work[l    -    1],    Math.max(work[l    -    9],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	2	None	replace
395	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  1],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  1],  work[7  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  1],  work[7  +  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    1],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	4	None	replace
396	[BUG]  [BUGGY]  if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong	  if(qMax    >=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	123	None	replace
397	[BUG]  [BUGGY]  if(qMax  >=  0.0)  {  if(flipIfWarranted(deflatedMin,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >=  0.0)  {  if(flipIfWarranted(deflatedMin,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0.0)  {  if(flipIfWarranted(deflatedMin,  0))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	  if(qMax    >=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	123	None	replace
398	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.min(work[1  +  pingPong],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.min(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	83	None	replace
399	[BUG]  [BUGGY]  if(!flipIfWarranted(deflatedEnd,  1))  {  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  }  ';'  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(!flipIfWarranted(deflatedEnd,  1))  {  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  }  ';'  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(!flipIfWarranted(deflatedEnd,  1))  {  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  }  ';'	  dMin    =    Math.max(dMin,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	9	None	replace
400	[BUG]  [BUGGY]  if(!flipIfWarranted(deflatedEnd,  1))  {  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  >>  ';'  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(!flipIfWarranted(deflatedEnd,  1))  {  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  >>  ';'  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(!flipIfWarranted(deflatedEnd,  1))  {  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  >>  ';'	  dMin    =    Math.max(dMin,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	9	None	replace
401	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[6  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[6  +  pingPong]));	  dMin    =    Math.max(dMin2,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	77	None	replace
402	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	79	None	replace
403	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	79	None	replace
404	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	79	None	replace
405	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  3],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  3],  work[3  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.max(work[l  -  3],  work[3  +  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.max(work[l    -    3],    work[l    -    2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	3	None	replace
406	[BUG]  [BUGGY]  Integer  qMax  =  Math.max(dMin,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  Integer  qMax  =  Math.max(dMin,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	Integer  qMax  =  Math.max(dMin,  Math.max(work[1  +  pingPong],  work[2  +  pingPong]));	  Integer    qMax    =    Math.max(qMax,    Math.max(work[1    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	51	None	replace
407	[BUG]  [BUGGY]  qMax=  Math.max(work[l  -  1],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work[l  -  1],  work[2  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work[l  -  1],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    -    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	55	None	replace
408	[BUG]  [BUGGY]  qMax=  Math.max(work[l  -  2  *  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work[l  -  2  *  pingPong],  work[7  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work[l  -  2  *  pingPong],  work[7  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    -    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	55	None	replace
409	[BUG]  [BUGGY]  qMax=  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work[l  -  2  *  pingPong],  work[3  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    -    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	55	None	replace
410	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	88	None	replace
411	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[3  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[3  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[3  +  pingPong]));	  dMin    =    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[6    +    pingPong]));    	non-compiled	[CE]  ';'  expected	76	None	replace
412	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  +  1],  work[2]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  +  1],  work[2]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[l  +  1],  work[2]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1],    work[2]));    	non-compiled	[CE]  ';'  expected	15	None	replace
413	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[7  *  pingPong]));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[7  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong],  work[7  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2    *    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	60	None	replace
414	[BUG]  [BUGGY]  if(!flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  }  ';'  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(!flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  }  ';'  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(!flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  }  ';'	  dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	137	None	replace
415	[BUG]  [BUGGY]  if(!flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(!flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(!flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[	  dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	137	None	replace
416	[BUG]  [BUGGY]  if(!flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  }  ';'  expected  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(!flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  }  ';'  expected  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(!flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[  }  ';'  expected	  dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[    	non-compiled	[CE]  ';'  expected	137	None	replace
417	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[3  +  pingPong],  work[4  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  Math.max(work[3  +  pingPong],  work[4  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  Math.max(work[3  +  pingPong],  work[4  +  pingPong]));	  dMin    =    Math.min(dMin2,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	132	None	replace
418	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +	  if(qMax    >=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	119	None	replace
419	[BUG]  [BUGGY]  if(qMax  >=  0.0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >=  0.0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0.0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +	  if(qMax    >=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	119	None	replace
420	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[2  *  pingPong],  work[3  *  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[2  *  pingPong],  work[3  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[2  *  pingPong],  work[3  *  pingPong]));	  dMin    =    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	103	None	replace
421	[BUG]  [BUGGY]  dMin2  =  Math.max(dMin2,  work[l  -  1],  work[3  +  2  *  pingPong]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(dMin2,  work[l  -  1],  work[3  +  2  *  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(dMin2,  work[l  -  1],  work[3  +  2  *  pingPong]);	  dMin2    =    Math.max(work[l    -    1],    work[3    +    2    *    pingPong]);    	non-compiled	[CE]  ';'  expected	39	None	replace
422	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[4  +  pingPong]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[4  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  Math.max(work[3  +  pingPong],  work[4  +  pingPong]));	  dMin    =    Math.max(dMin2,    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	48	None	replace
423	[BUG]  [BUGGY]  if(!flipIfWarranted(deflatedEnd,  1))  {  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  }  ';'  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(!flipIfWarranted(deflatedEnd,  1))  {  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  }  ';'  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(!flipIfWarranted(deflatedEnd,  1))  {  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  }  ';'	  dMin    =    Math.max(dMin,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	37	None	replace
424	[BUG]  [BUGGY]  if(!flipIfWarranted(deflatedEnd,  1))  {  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  >>  ';'  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(!flipIfWarranted(deflatedEnd,  1))  {  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  >>  ';'  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(!flipIfWarranted(deflatedEnd,  1))  {  dMin  =  Math.max(dMin,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[1  >>  ';'	  dMin    =    Math.max(dMin,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[1    	non-compiled	[CE]  ';'  expected	37	None	replace
425	[BUG]  [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	  if(qMax!=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	124	None	replace
426	[BUG]  [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  ping	  if(qMax!=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	124	None	replace
427	[BUG]  [BUGGY]  if(qMax!=  0.0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax!=  0.0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0.0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	  if(qMax!=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	124	None	replace
428	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  +  1  *  pingPong],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  +  1  *  pingPong],  work[2  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[l  +  1  *  pingPong],  work[2  *  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	93	None	replace
429	[BUG]  [BUGGY]  qMax=  Math.max(work[l  +  1],  work[2  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work[l  +  1],  work[2  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work[l  +  1],  work[2  +  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    +    1    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	93	None	replace
430	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  }  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  }	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work    	non-compiled	[CE]  ';'  expected	92	None	replace
431	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work!=  ';  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work!=  ';  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work!=  ';	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work    	non-compiled	[CE]  ';'  expected	92	None	replace
432	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >>  ';  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >>  ';  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >>  ';	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work    	non-compiled	[CE]  ';'  expected	92	None	replace
433	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >>  ';  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >>  ';  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >>  ';	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work    	non-compiled	[CE]  ';'  expected	92	None	replace
434	[BUG]  [BUGGY]  if(qMax  <  =  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  <  =  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  <  =  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingP	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingP    	non-compiled	[CE]  ';'  expected	122	None	replace
435	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  dMin2  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflate  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  dMin2  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflate  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  dMin2  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflate	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    9],    work[l    -    2    *    pingPong]))))    {    computeShiftIncrement(start,    deflatedEn    	non-compiled	[CE]  ';'  expected	95	None	replace
436	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  dMin2  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflat  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  ((  MathUtils.SAFE_MIN  *  dMin2  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflat  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	((  MathUtils.SAFE_MIN  *  dMin2  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflat	  ((    MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    Math.min(work[l    -    9],    work[l    -    2    *    pingPong]))))    {    computeShiftIncrement(start,    deflatedEn    	non-compiled	[CE]  ';'  expected	95	None	replace
437	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  1  +  pingPong],  work[1  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[l  -  1  +  pingPong],  work[1  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[l  -  1  +  pingPong],  work[1  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[l    +    2    *    pingPong],    work[1    +    pingPong]));    	non-compiled	[CE]  ';'  expected	22	None	replace
438	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	91	None	replace
439	[BUG]  [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	91	None	replace
440	[BUG]  [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +	  if(qMax!=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	78	None	replace
441	[BUG]  [BUGGY]  if(qMax!=  0.0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax!=  0.0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0.0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  +	  if(qMax!=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	78	None	replace
442	[BUG]  [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  ==  0.0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3	  if(qMax!=    0.0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    +    	non-compiled	[CE]  ';'  expected	78	None	replace
443	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  }  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  }	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work    	non-compiled	[CE]  ';'  expected	106	None	replace
444	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work!=  ';  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work!=  ';  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work!=  ';	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work    	non-compiled	[CE]  ';'  expected	106	None	replace
445	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >>  ';  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >>  ';  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  >>  ';	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work    	non-compiled	[CE]  ';'  expected	106	None	replace
446	[BUG]  [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  [Delete]  ';  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  [Delete]  ';  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >  0)  {  if(flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work  [Delete]  ';	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work    	non-compiled	[CE]  ';'  expected	106	None	replace
447	[BUG]  [BUGGY]  qMax=  Math.max(work[l  -  1],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work[l  -  1],  work[2  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work[l  -  1],  work[2  *  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    -    1],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	94	None	replace
448	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  1],  work[2  *  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  1],  work[2  *  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[l  -  1],  work[2  *  pingPong]));	  qMax=    Math.max(qMax,    Math.max(work[l    -    1],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	94	None	replace
449	[BUG]  [BUGGY]  dMin  =  Math.max(dMin1,  work[l  -  1]);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin1,  work[l  -  1]);  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin1,  work[l  -  1]);	  dMin    =    Math.max(dMin2,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	64	None	replace
450	[BUG]  [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  workMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement(start,  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  workMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement(start,  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if((  dMin  <  0)||(MathUtils.SAFE_MIN  *  workMax  <  Math.min(work[l  -  1],  work[3  +  pingPong],  work[6  +  pingPong])))  {  computeShiftIncrement(start,	  if((    dMin    <    0)||(MathUtils.SAFE_MIN    *    qMax    <    Math.min(work[l    -    1],    work[3    +    pingPong],    work[7    +    pingPong])))    {    computeShiftIncrement(start,    	non-compiled	[CE]  ';'  expected	127	None	replace
451	[BUG]  [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  }  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax!=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  }	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingPong],    	non-compiled	[CE]  ';'  expected	75	None	replace
452	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  }  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2  *  pingPong],  }	  if(qMax!=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2    *    pingPong],    	non-compiled	[CE]  ';'  expected	75	None	replace
453	[BUG]  [BUGGY]  dMin2  =  Math.max(dMin2,  work[l  -  1],  work[3  *  pingPong]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.max(dMin2,  work[l  -  1],  work[3  *  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.max(dMin2,  work[l  -  1],  work[3  *  pingPong]);	  dMin2    =    Math.max(work[l    -    1],    work[3    *    pingPong]);    	non-compiled	[CE]  ';'  expected	38	None	replace
454	[BUG]  [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]),  work[7  *  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]),  work[7  *  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(work[l  -  1],  Math.min(work[l  -  2  *  pingPong]),  work[7  *  pingPong]));	  dMin    =    Math.max(work[l    -    1],    Math.min(work[l    -    2    *    pingPong]),    work[2    *    pingPong]));    	non-compiled	[CE]  ';'  expected	131	None	replace
455	[BUG]  [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[7  +  pingPong]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(work[l  -  1],  work[7  +  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(work[l  -  1],  work[7  +  pingPong]);	  dMin    =    Math.min(work[l    -    1],    work[3    +    2    *    pingPong]);    	non-compiled	[CE]  ';'  expected	44	None	replace
456	[BUG]  [BUGGY]  dMin  =  Math.min(1.0,  work[l  -  1]);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(1.0,  work[l  -  1]);  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(1.0,  work[l  -  1]);	  dMin    =    Math.min(0.0,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	63	None	replace
457	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  >>  ';'  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  >>  ';'  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  >>  ';'	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	81	None	replace
458	[BUG]  [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	if(qMax  >=  0)  {  if(flipIfWarranted(deflatedMin,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  2],  work[3	  if(qMax    >=    0)    {    if(flipIfWarranted(deflatedEnd,    1))    {    dMin2    =    Math.min(dMin2,    work[l    -    1]);    work[l    -    1]    =    Math.min(work[l    -    2],    work[3    	non-compiled	[CE]  ';'  expected	81	None	replace
459	[BUG]  [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(work,  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(work,  Math.max(work[l  -  2  *  pingPong],  work[6  +  pingPong]));	  qMax=    Math.max(work,    Math.max(work[l    -    2    *    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	117	None	replace
460	[BUG]  [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1],  work[2  *  pingPong]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.max(dMin2,  work[l  -  1],  work[2  *  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.max(dMin2,  work[l  -  1],  work[2  *  pingPong]);	  dMin    =    Math.min(work[l    -    1],    work[2    *    pingPong]);    	non-compiled	[CE]  ';'  expected	107	None	replace
461	[BUG]  [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  work[2  *  pingPong]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin2,  work[l  -  1],  work[2  *  pingPong]);  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin2,  work[l  -  1],  work[2  *  pingPong]);	  dMin    =    Math.min(work[l    -    1],    work[2    *    pingPong]);    	non-compiled	[CE]  ';'  expected	107	None	replace
462	[BUG]  [BUGGY]  dMin  =  Math.min(dMin,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  dMin  =  Math.min(dMin,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  [BUGGY]      qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	dMin  =  Math.min(dMin,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));	  dMin    =    Math.min(dMin,    Math.max(work[3    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	31	None	replace
463	[BUG]  [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {  dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));      [BUGGY]  qMax=  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[6  +  pingPong]));  [BUGGY]      dMin=  -0.0;  }  }  if  ((dMin  <  0)  ||  (MathUtils.SAFE_MIN  *  qMax  <  Math.min(work[l  -  1],  Math.min(work[l  -  9],  dMin2  +  work[l  -  2  *  pingPong]))))  {  computeShiftIncrement(start,  deflatedEnd,  end  -  deflatedEnd);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1062	1062	1	replace	qMax=  Math.max(dMin2,  Math.max(work[2  +  pingPong],  work[6  +  pingPong]));	  qMax=    Math.max(dMin2,    Math.max(work[2    +    pingPong],    work[2    +    pingPong]));    	non-compiled	[CE]  ';'  expected	69	None	replace
