bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
7	[BUG] [BUGGY] d = work[i]; [FE] AssertionFailedError [CONTEXT] private void initialSplits(final int n) { pingPong = 0; for (int k = 0; k < 2; ++k) {  double d = work[4 * (n - 1) + pingPong]; for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) { if (work[i + 2] <= TOLERANCE_2 * d) { work[i + 2] = -0.0; [BUGGY] d = work[i]; [BUGGY] } else { d *= work[i] / (d + work[i + 2]); } }  d = work[pingPong]; for (int i = 2 + pingPong; i < 4 * n - 2; i += 4) { final int j = i - 2 * pingPong - 1; work[j] = d + work[i]; [CLASS] EigenDecompositionImpl Solver [METHOD] initialSplits [RETURN_TYPE] void  final int n [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 absDCurrent absDPrevious alpha b b2 beta c d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eps g invIJ lambda largestRoot lower lowerSpectra max mij minPivot mji offDiagMax offDiagMin oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns end fourI i i0 index j k lowerStart m maxIter n n0 nColB oneFourthCount pingPong rows split tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void initialSplits(final int n) { pingPong = 0; for (int k = 0; k < 2; ++k) {  double d = work[4 * (n - 1) + pingPong]; for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) { if (work[i + 2] <= TOLERANCE_2 * d) { work[i + 2] = -0.0; [BUGGY] [BUGGY] d = work[i]; } else { d *= work[i] / (d + work[i + 2]); } }  d = work[pingPong]; for (int i = 2 + pingPong; i < 4 * n - 2; i += 4) { final int j = i - 2 * pingPong - 1; work[j] = d + work[i]; [CLASS] EigenDecompositionImpl Solver [METHOD] initialSplits [RETURN_TYPE] void  final int n [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 absDCurrent absDPrevious alpha b b2 beta c d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eps g invIJ lambda largestRoot lower lowerSpectra max mij minPivot mji offDiagMax offDiagMin oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns end fourI i i0 index j k lowerStart m maxIter n n0 nColB oneFourthCount pingPong rows split tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	add	
