bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  d  =  work[i  +  2];  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;  [BUGGY]  d  =  work[i  +  2];  [BUGGY]  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  2];	d  =  work[i];  	non-compiled	[CE]  ';'  expected	7	None	replace
2	[BUG]  [BUGGY]  d  *=  work[i]  /  (d  +  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;  [BUGGY]  d  *=  work[i]  /  (d  +  work[i  +  2]);  [BUGGY]  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /  (d  +  work[i  +  2]);	d  =  work[i];  	non-compiled	[CE]  ';'  expected	7	None	replace
3	[BUG]  [BUGGY]  d  =  work[i  +  1];  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;  [BUGGY]  d  =  work[i  +  1];  [BUGGY]  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  1];	d  =  work[i];  	non-compiled	[CE]  ';'  expected	7	None	replace
4	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;  [BUGGY]    [BUGGY]  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	  	d  =  work[i];  	non-compiled	[CE]  ';'  expected	7	None	replace
5	[BUG]  [BUGGY]    work[i  +  2]  =  -0.0;  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;  [BUGGY]    work[i  +  2]  =  -0.0;  [BUGGY]  d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	    work[i  +  2]  =  -0.0;		non-compiled	[CE]  ';'  expected	8	None	add
6	[BUG]  [BUGGY]    d  *=  work[i]  /  (d  +  work[i  +  1]);  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;  [BUGGY]    d  *=  work[i]  /  (d  +  work[i  +  1]);  [BUGGY]  d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	    d  *=  work[i]  /  (d  +  work[i  +  1]);		non-compiled	[CE]  ';'  expected	8	None	add
7	[BUG]  [BUGGY]    work[i]  -=  work[i  +  2];  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;  [BUGGY]    work[i]  -=  work[i  +  2];  [BUGGY]  d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	    work[i]  -=  work[i  +  2];		non-compiled	[CE]  ';'  expected	8	None	add
8	[BUG]  [BUGGY]  d  =  work[i]  -  1;  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;  [BUGGY]  d  =  work[i]  -  1;  [BUGGY]  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i]  -  1;	d  =  work[i];  	non-compiled	[CE]  ';'  expected	7	None	replace
9	[BUG]  [BUGGY]  d  =  work[i]  +  1;  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;  [BUGGY]  d  =  work[i]  +  1;  [BUGGY]  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i]  +  1;	d  =  work[i];  	non-compiled	[CE]  ';'  expected	7	None	replace
10	[BUG]  [BUGGY]    d  *=  work[i  +  2]  /  (d  +  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;  [BUGGY]    d  *=  work[i  +  2]  /  (d  +  work[i  +  2]);  [BUGGY]  d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	    d  *=  work[i  +  2]  /  (d  +  work[i  +  2]);		non-compiled	[CE]  ';'  expected	8	None	add
11	[BUG]  [BUGGY]    d  *=  work[i  +  2]  /  (d  +  work[i  +  3]);  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;  [BUGGY]    d  *=  work[i  +  2]  /  (d  +  work[i  +  3]);  [BUGGY]  d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	    d  *=  work[i  +  2]  /  (d  +  work[i  +  3]);		non-compiled	[CE]  ';'  expected	8	None	add
12	[BUG]  [BUGGY]    d  *=  work[i  +  2]  /(work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;  [BUGGY]    d  *=  work[i  +  2]  /(work[i  +  2]);  [BUGGY]  d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	    d  *=  work[i  +  2]  /(work[i  +  2]);		non-compiled	[CE]  ';'  expected	8	None	add
13	[BUG]  [BUGGY]    d  *=  work[i]  /(work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;  [BUGGY]    d  *=  work[i]  /(work[i  +  2]);  [BUGGY]  d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	    d  *=  work[i]  /(work[i  +  2]);		non-compiled	[CE]  ';'  expected	8	None	add
14	[BUG]  [BUGGY]  d  =  work[i]  -  work[i  +  2];  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;  [BUGGY]  d  =  work[i]  -  work[i  +  2];  [BUGGY]  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i]  -  work[i  +  2];	d  =  work[i];  	non-compiled	[CE]  ';'  expected	7	None	replace
